{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { startContractExpirationScheduler } from \"./scheduler\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Start the contract expiration scheduler\n  startContractExpirationScheduler();\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2069},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPropertySchema, insertOfferSchema, insertContractSchema, insertNotificationSchema, insertConversationSchema, insertMessageSchema, insertReviewSchema, insertContractModificationRequestSchema, insertContractTerminationRequestSchema, contracts, users, conversations, messages, reviews, properties, offers, contractModificationRequests, contractTerminationRequests, contractVersions } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, inArray } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\n// Alias tables for clarity in joins\nconst offersTable = offers;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Properties routes\n  app.get(\"/api/properties\", async (req, res) => {\n    try {\n      const ownerId = req.query.ownerId ? parseInt(req.query.ownerId as string) : undefined;\n      const properties = await storage.getProperties(ownerId);\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const property = await storage.getProperty(id);\n      if (!property) {\n        return res.status(404).json({ error: \"Property not found\" });\n      }\n      res.json(property);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch property\" });\n    }\n  });\n\n  app.post(\"/api/properties\", async (req, res) => {\n    try {\n      console.log(\"Received property data:\", JSON.stringify(req.body, null, 2));\n      const validatedData = insertPropertySchema.parse(req.body);\n      console.log(\"Validated property data:\", JSON.stringify(validatedData, null, 2));\n      const property = await storage.createProperty(validatedData);\n      res.status(201).json(property);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.log(\"Validation errors:\", JSON.stringify(error.errors, null, 2));\n        return res.status(400).json({ error: \"Invalid property data\", details: error.errors });\n      }\n      console.log(\"Property creation error:\", error);\n      res.status(500).json({ error: \"Failed to create property\" });\n    }\n  });\n\n  app.put(\"/api/properties/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      const property = await storage.updateProperty(id, updates);\n      if (!property) {\n        return res.status(404).json({ error: \"Property not found\" });\n      }\n      res.json(property);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update property\" });\n    }\n  });\n\n  // Offers routes\n  app.get(\"/api/offers\", async (req, res) => {\n    try {\n      const userId = parseInt(req.query.userId as string);\n      const userType = req.query.userType as string;\n      const statusFilter = req.query.status as string;\n      \n      console.log(`Fetching offers for userId: ${userId}, userType: ${userType}, status: ${statusFilter}`);\n      \n      let whereCondition;\n      let offers;\n      \n      if (userType === 'owner') {\n        // Base condition for owner\n        whereCondition = eq(offersTable.ownerId, userId);\n        \n        // Add status filter if provided\n        if (statusFilter) {\n          whereCondition = and(whereCondition, eq(offersTable.status, statusFilter));\n        }\n\n        // Owners see offers received for their properties\n        offers = await db.select({\n          id: offersTable.id,\n          propertyId: offersTable.propertyId,\n          tenantId: offersTable.tenantId,\n          ownerId: offersTable.ownerId,\n          startDate: offersTable.startDate,\n          endDate: offersTable.endDate,\n          monthlyRent: offersTable.monthlyRent,\n          deposit: offersTable.deposit,\n          conditions: offersTable.conditions,\n          status: offersTable.status,\n          createdAt: offersTable.createdAt,\n          updatedAt: offersTable.updatedAt,\n          property: {\n            title: properties.title,\n            address: properties.address,\n          },\n          tenant: {\n            firstName: users.firstName,\n            lastName: users.lastName,\n            email: users.email,\n          }\n        })\n        .from(offersTable)\n        .leftJoin(properties, eq(offersTable.propertyId, properties.id))\n        .leftJoin(users, eq(offersTable.tenantId, users.id))\n        .where(whereCondition)\n        .orderBy(desc(offersTable.createdAt));\n      } else {\n        // Base condition for tenant\n        whereCondition = eq(offersTable.tenantId, userId);\n        \n        // Add status filter if provided\n        if (statusFilter) {\n          whereCondition = and(whereCondition, eq(offersTable.status, statusFilter));\n        }\n\n        // Tenants see offers they sent\n        offers = await db.select({\n          id: offersTable.id,\n          propertyId: offersTable.propertyId,\n          tenantId: offersTable.tenantId,\n          ownerId: offersTable.ownerId,\n          startDate: offersTable.startDate,\n          endDate: offersTable.endDate,\n          monthlyRent: offersTable.monthlyRent,\n          deposit: offersTable.deposit,\n          conditions: offersTable.conditions,\n          status: offersTable.status,\n          createdAt: offersTable.createdAt,\n          updatedAt: offersTable.updatedAt,\n          property: {\n            title: properties.title,\n            address: properties.address,\n          },\n          owner: {\n            firstName: users.firstName,\n            lastName: users.lastName,\n            email: users.email,\n          }\n        })\n        .from(offersTable)\n        .leftJoin(properties, eq(offersTable.propertyId, properties.id))\n        .leftJoin(users, eq(offersTable.ownerId, users.id))\n        .where(whereCondition)\n        .orderBy(desc(offersTable.createdAt));\n      }\n      \n      console.log(`Found ${offers.length} offers for user ${userId} (${userType}) with status: ${statusFilter || 'all'}`);\n      res.json(offers);\n    } catch (error) {\n      console.error(\"Failed to fetch offers:\", error);\n      res.status(500).json({ error: \"Failed to fetch offers\" });\n    }\n  });\n\n  app.post(\"/api/offers\", async (req, res) => {\n    try {\n      console.log(\"Received offer creation request:\", req.body);\n      const validatedData = insertOfferSchema.parse(req.body);\n      console.log(\"Validated offer data:\", validatedData);\n      \n      // Check for existing pending offers for this property from this tenant\n      const existingOffers = await storage.getOffersByTenantAndProperty(validatedData.tenantId, validatedData.propertyId);\n      const pendingOffers = existingOffers.filter(offer => offer.status === 'pending');\n      \n      if (pendingOffers.length > 0) {\n        return res.status(400).json({ \n          error: \"Vous avez déjà une offre en attente pour cette propriété. Attendez la réponse du propriétaire.\" \n        });\n      }\n      \n      console.log(\"Creating offer with data:\", validatedData);\n      const offer = await storage.createOffer(validatedData);\n      \n      // Get property details for notifications\n      const property = await storage.getProperty(validatedData.propertyId);\n      \n      // Notify owner about new offer\n      await storage.createNotification({\n        userId: validatedData.ownerId,\n        title: \"Nouvelle offre reçue\",\n        message: `Un locataire a envoyé une offre pour votre propriété ${property?.title || ''}.`,\n        type: \"offer\",\n        relatedId: offer.id,\n      });\n\n      // Notify tenant about their sent offer\n      await storage.createNotification({\n        userId: validatedData.tenantId,\n        title: \"Nouvelle offre envoyée\",\n        message: `Vous avez envoyé une offre au propriétaire pour ${property?.title || 'la propriété'}.`,\n        type: \"offer\",\n        relatedId: offer.id,\n      });\n      \n      res.status(201).json(offer);\n    } catch (error) {\n      console.error(\"Error creating offer:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid offer data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create offer\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Update offer status (owner accepts/declines offer)\n  app.put(\"/api/offers/:id/status\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      const offer = await storage.updateOfferStatus(id, status);\n      \n      if (!offer) {\n        return res.status(404).json({ error: \"Offer not found\" });\n      }\n\n      // Create notifications for both parties\n      if (status === 'accepted') {\n        // Notify tenant about acceptance\n        await storage.createNotification({\n          userId: offer.tenantId,\n          title: \"Offre acceptée\",\n          message: \"Votre offre a été acceptée! Vous pouvez maintenant demander un contrat.\",\n          type: \"offer\",\n          relatedId: offer.id,\n        });\n\n        // Notify owner about acceptance confirmation\n        await storage.createNotification({\n          userId: offer.ownerId,\n          title: \"Offre acceptée\",\n          message: \"Vous avez accepté l'offre. Le locataire peut maintenant demander un contrat.\",\n          type: \"offer\",\n          relatedId: offer.id,\n        });\n      } else if (status === 'rejected') {\n        // Notify tenant about rejection\n        await storage.createNotification({\n          userId: offer.tenantId,\n          title: \"Offre refusée\",\n          message: \"Votre offre a été refusée. Vous pouvez faire une nouvelle offre.\",\n          type: \"offer\",\n          relatedId: offer.id,\n        });\n\n        // Notify owner about rejection confirmation\n        await storage.createNotification({\n          userId: offer.ownerId,\n          title: \"Offre refusée\",\n          message: \"Vous avez refusé l'offre.\",\n          type: \"offer\",\n          relatedId: offer.id,\n        });\n      }\n\n      res.json(offer);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update offer status\" });\n    }\n  });\n\n  // Contract request endpoint (tenant requests contract after accepted offer)\n  app.put(\"/api/offers/:id/request-contract\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const offer = await storage.getOffer(id);\n      \n      if (!offer) {\n        return res.status(404).json({ error: \"Offer not found\" });\n      }\n\n      if (offer.status !== 'accepted') {\n        return res.status(400).json({ error: \"Offer must be accepted before requesting contract\" });\n      }\n\n      const updatedOffer = await storage.updateOfferStatus(id, \"contract_requested\");\n\n      // Create notifications for both parties\n      await storage.createNotification({\n        userId: offer.ownerId,\n        title: \"Demande de contrat\",\n        message: \"Un locataire demande la création d'un contrat pour son offre acceptée\",\n        type: \"contract_request\",\n        relatedId: offer.id,\n      });\n\n      await storage.createNotification({\n        userId: offer.tenantId,\n        title: \"Contrat demandé\",\n        message: \"Votre demande de contrat a été envoyée au propriétaire\",\n        type: \"contract_request\",\n        relatedId: offer.id,\n      });\n\n      res.json(updatedOffer);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to request contract\" });\n    }\n  });\n\n  // Contracts routes\n  app.get(\"/api/contracts\", async (req, res) => {\n    try {\n      const userId = parseInt(req.query.userId as string);\n      const ownerOnly = req.query.ownerOnly === 'true';\n      \n      console.log(`Fetching contracts for userId: ${userId}, ownerOnly: ${ownerOnly}`);\n      \n      if (isNaN(userId)) {\n        return res.status(400).json({ error: \"Valid userId required\" });\n      }\n      \n      const contracts = ownerOnly ? \n        await storage.getOwnerContracts(userId) : \n        await storage.getContracts(userId);\n        \n      console.log(`Found ${contracts.length} contracts for user ${userId}`);\n      res.json(contracts);\n    } catch (error) {\n      console.error(\"Error fetching contracts:\", error);\n      res.status(500).json({ error: \"Failed to fetch contracts\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  app.get(\"/api/contracts/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const contract = await storage.getContract(id);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contract\" });\n    }\n  });\n\n  app.post(\"/api/contracts\", async (req, res) => {\n    try {\n      console.log(\"Received contract data:\", req.body);\n      const validatedData = insertContractSchema.parse(req.body);\n      \n      // Verify that the offer exists and is in contract_requested status\n      const offer = await storage.getOffer(validatedData.offerId);\n      if (!offer) {\n        return res.status(400).json({ error: \"Offer not found\" });\n      }\n      if (offer.status !== \"contract_requested\") {\n        return res.status(400).json({ error: \"Contract can only be created for requested offers\" });\n      }\n\n      // ENFORCEMENT: Check if there's already an active contract for this property\n      const existingActiveContract = await storage.getActiveContractForProperty(validatedData.propertyId);\n      if (existingActiveContract) {\n        return res.status(400).json({ \n          error: \"Cette propriété a déjà un contrat actif. Impossible de créer un nouveau contrat tant que l'actuel n'est pas terminé ou expiré.\",\n          details: \"Contract creation is restricted when an active contract exists\"\n        });\n      }\n\n      // ENFORCEMENT: Additional check for contracts that might not be expired yet\n      const activeContracts = await db\n        .select()\n        .from(contracts)\n        .where(\n          and(\n            eq(contracts.propertyId, validatedData.propertyId),\n            eq(contracts.status, 'active')\n          )\n        );\n      \n      if (activeContracts.length > 0) {\n        return res.status(400).json({\n          error: \"Un contrat actif existe déjà pour cette propriété. Vous devez attendre soit l'expiration naturelle du contrat, soit obtenir l'accord du locataire pour un arrêt anticipé.\",\n          details: \"Active contract prevents new contract creation\"\n        });\n      }\n      \n      const contract = await storage.createContract(validatedData);\n      \n      // Create notification for tenant\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Contrat créé\",\n        message: \"Un contrat a été créé pour votre offre. Attendez la signature du propriétaire.\",\n        type: \"contract\",\n        relatedId: contract.id,\n      });\n\n      res.status(201).json(contract);\n    } catch (error) {\n      console.error(\"Contract creation error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid contract data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create contract\", details: (error as Error).message });\n    }\n  });\n\n  app.put(\"/api/contracts/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      \n      // Check if contract exists and can be modified\n      const existingContract = await storage.getContract(id);\n      if (!existingContract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n      \n      // Only allow modifications if tenant hasn't signed yet\n      if (existingContract.tenantSignature) {\n        return res.status(400).json({ error: \"Cannot modify contract after tenant signature\" });\n      }\n      \n      // Reset owner signature if contract data is modified\n      const resetSignature = {\n        ownerSignature: null,\n        ownerSignedAt: null,\n        tenantSignDeadline: null,\n        status: 'draft'\n      };\n      \n      const contract = await storage.updateContract(id, { ...updates, ...resetSignature });\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update contract\" });\n    }\n  });\n\n  app.put(\"/api/contracts/:id/sign\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { signatureType, signatureData } = req.body;\n      \n      if (!['owner', 'tenant'].includes(signatureType)) {\n        return res.status(400).json({ error: \"Invalid signature type\" });\n      }\n\n      const contract = await storage.updateContractSignature(id, signatureType, signatureData);\n      \n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Handle owner signature - set 3-day deadline for tenant\n      if (signatureType === 'owner' && contract.status === 'owner_signed') {\n        // Set tenant sign deadline to 3 days from now\n        const deadline = new Date();\n        deadline.setDate(deadline.getDate() + 3);\n        await storage.updateContractDeadline(id, deadline);\n\n        // Notify tenant with deadline\n        await storage.createNotification({\n          userId: contract.tenantId,\n          title: \"Nouveau contrat à signer\",\n          message: `Le propriétaire a signé le contrat. Vous avez 3 jours pour le signer avant expiration (deadline: ${deadline.toLocaleDateString('fr-FR')})`,\n          type: \"contract_signature_required\",\n          relatedId: contract.id,\n        });\n      }\n\n      // Handle tenant signature - activate contract and update property\n      if (signatureType === 'tenant' && contract.status === 'fully_signed') {\n        // Check if tenant signed within deadline\n        const currentContract = await storage.getContract(id);\n        if (currentContract?.tenantSignDeadline && new Date() > new Date(currentContract.tenantSignDeadline)) {\n          return res.status(400).json({ error: \"Contract expired. Signing deadline has passed.\" });\n        }\n\n        // Check for other active contracts on this property\n        const existingActiveContract = await storage.getActiveContractForProperty(contract.propertyId);\n        if (existingActiveContract) {\n          return res.status(400).json({ error: \"This property already has an active contract.\" });\n        }\n\n        // Activate contract and update property status\n        await storage.updateContractStatus(id, 'active');\n        await storage.updatePropertyStatus(contract.propertyId, 'Loué');\n\n        // Notify owner that contract is fully signed and active\n        await storage.createNotification({\n          userId: contract.ownerId,\n          title: \"Contrat activé\",\n          message: \"Le locataire a signé le contrat. Le contrat est maintenant actif et la propriété est marquée comme louée.\",\n          type: \"contract_active\",\n          relatedId: contract.id,\n        });\n      }\n\n      res.json(contract);\n    } catch (error) {\n      console.error(\"Contract signing error:\", error);\n      res.status(500).json({ error: \"Failed to sign contract\" });\n    }\n  });\n\n  // Notifications routes\n  app.get(\"/api/notifications\", async (req, res) => {\n    try {\n      const userId = parseInt(req.query.userId as string);\n      const notifications = await storage.getNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.markNotificationRead(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Notification not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.markNotificationRead(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Notification not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Contract expiration check endpoint\n  app.post(\"/api/contracts/expire-check\", async (req, res) => {\n    try {\n      await storage.expireContracts();\n      res.json({ success: true, message: \"Contract expiration check completed\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to check contract expiration\" });\n    }\n  });\n\n  // Contract modification\n  app.put(\"/api/contracts/:id/modify\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { contractData } = req.body;\n      \n      const contract = await storage.getContract(id);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only allow modification if contract is not fully signed yet\n      if (contract.status === 'active') {\n        return res.status(400).json({ error: \"Cannot modify an active contract\" });\n      }\n\n      // Reset signatures if contract data is modified\n      const [updated] = await db\n        .update(contracts)\n        .set({ \n          contractData, \n          ownerSignature: null, \n          tenantSignature: null,\n          ownerSignedAt: null,\n          tenantSignedAt: null,\n          status: 'draft',\n          tenantSignDeadline: null,\n          updatedAt: new Date() \n        })\n        .where(eq(contracts.id, id))\n        .returning();\n\n      // Notify both parties about the modification\n      await storage.createNotification({\n        userId: contract.ownerId,\n        title: \"Contrat modifié\",\n        message: \"Le contrat a été modifié. Veuillez le réviser et le signer à nouveau.\",\n        type: \"contract_modified\",\n        relatedId: contract.id,\n      });\n\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Contrat modifié\",\n        message: \"Le contrat a été modifié par le propriétaire. Les signatures précédentes ont été supprimées.\",\n        type: \"contract_modified\",\n        relatedId: contract.id,\n      });\n\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Contract modification error:\", error);\n      res.status(500).json({ error: \"Failed to modify contract\" });\n    }\n  });\n\n  // Contract modification request - Owner requests modification from tenant\n  app.post(\"/api/contracts/:id/request-modification\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { requestedBy, requestedChanges, fieldsToModify, modificationReason } = req.body;\n      \n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only allow modification requests for active contracts\n      if (contract.status !== 'active') {\n        return res.status(400).json({ error: \"Can only request modifications for active contracts\" });\n      }\n\n      // Only owner can request modifications\n      if (contract.ownerId !== requestedBy) {\n        return res.status(403).json({ error: \"Only the owner can request contract modifications\" });\n      }\n\n      // Validate required fields\n      if (!modificationReason || !fieldsToModify || fieldsToModify.length === 0) {\n        return res.status(400).json({ error: \"Modification reason and fields to modify are required\" });\n      }\n\n      // Create modification request\n      const [modificationRequest] = await db\n        .insert(contractModificationRequests)\n        .values({\n          contractId,\n          requestedBy,\n          requestedChanges,\n          fieldsToModify,\n          modificationReason,\n          status: 'pending'\n        })\n        .returning();\n\n      // Notify tenant of modification request\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Demande de modification de contrat\",\n        message: `Le propriétaire demande des modifications au contrat. Raison: ${modificationReason}. Champs à modifier: ${fieldsToModify.join(', ')}.`,\n        type: \"contract_modification_request\",\n        relatedId: contractId,\n      });\n\n      res.status(201).json(modificationRequest);\n    } catch (error) {\n      console.error(\"Contract modification request error:\", error);\n      res.status(500).json({ error: \"Failed to create modification request\" });\n    }\n  });\n\n  // Apply contract modifications - Owner can modify contract after modification request is pending\n  app.put(\"/api/contracts/:id/modify\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { modifications, modificationRequestId } = req.body;\n      \n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only allow modifications for active contracts\n      if (contract.status !== 'active') {\n        return res.status(400).json({ error: \"Can only modify active contracts\" });\n      }\n\n      // Update contract data with modifications\n      const updatedContractData = { ...(contract.contractData || {}) };\n      \n      // Apply field modifications\n      if (modifications.tenant_name) updatedContractData.tenantName = modifications.tenant_name;\n      if (modifications.tenant_address) updatedContractData.propertyAddress = modifications.tenant_address;\n      if (modifications.monthly_rent) updatedContractData.monthlyRent = modifications.monthly_rent;\n      if (modifications.deposit) updatedContractData.deposit = modifications.deposit;\n      if (modifications.special_conditions) updatedContractData.specialConditions = modifications.special_conditions;\n      if (modifications.payment_terms) updatedContractData.paymentDueDate = modifications.payment_terms;\n      if (modifications.start_date) updatedContractData.startDate = modifications.start_date;\n      if (modifications.end_date) updatedContractData.endDate = modifications.end_date;\n\n      // Update contract in database\n      const [updatedContract] = await db\n        .update(contracts)\n        .set({\n          contractData: updatedContractData,\n          status: 'modified', // Set status to modified to indicate changes\n          updatedAt: new Date()\n        })\n        .where(eq(contracts.id, contractId))\n        .returning();\n\n      // Mark modification request as completed if provided\n      if (modificationRequestId) {\n        await db\n          .update(contractModificationRequests)\n          .set({\n            status: 'completed',\n            respondedAt: new Date()\n          })\n          .where(eq(contractModificationRequests.id, modificationRequestId));\n      }\n\n      // Notify tenant of completed modification\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Contrat modifié\",\n        message: \"Le propriétaire a appliqué les modifications demandées au contrat.\",\n        type: \"contract_modified\",\n        relatedId: contractId,\n      });\n\n      res.json(updatedContract);\n    } catch (error) {\n      console.error(\"Contract modification error:\", error);\n      res.status(500).json({ error: \"Failed to modify contract\" });\n    }\n  });\n\n  // Get individual contract modification request\n  app.get(\"/api/contract-modification-requests/:id\", async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      \n      const [request] = await db\n        .select()\n        .from(contractModificationRequests)\n        .where(eq(contractModificationRequests.id, requestId));\n        \n      if (!request) {\n        return res.status(404).json({ error: \"Modification request not found\" });\n      }\n\n      res.json(request);\n    } catch (error) {\n      console.error(\"Get modification request error:\", error);\n      res.status(500).json({ error: \"Failed to fetch modification request\" });\n    }\n  });\n\n  // Respond to contract modification request - Tenant responds\n  app.put(\"/api/contract-modification-requests/:id/respond\", async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      const { response, tenantResponse, userId } = req.body; // response: 'accepted' | 'rejected'\n      \n      const [request] = await db\n        .select()\n        .from(contractModificationRequests)\n        .where(eq(contractModificationRequests.id, requestId));\n        \n      if (!request) {\n        return res.status(404).json({ error: \"Modification request not found\" });\n      }\n\n      const contract = await storage.getContract(request.contractId);\n      if (!contract || contract.tenantId !== userId) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      // Update request status\n      const [updatedRequest] = await db\n        .update(contractModificationRequests)\n        .set({\n          status: response,\n          tenantResponse,\n          respondedAt: new Date()\n        })\n        .where(eq(contractModificationRequests.id, requestId))\n        .returning();\n\n      if (response === 'accepted') {\n        // Set modification deadline to 24 hours from now\n        const modificationDeadline = new Date();\n        modificationDeadline.setHours(modificationDeadline.getHours() + 24);\n\n        // Update modification request with deadline\n        await db\n          .update(contractModificationRequests)\n          .set({ modificationDeadline })\n          .where(eq(contractModificationRequests.id, requestId));\n\n        // Update contract status to waiting for modification\n        await db\n          .update(contracts)\n          .set({ \n            status: 'waiting_for_modification',\n            modificationSummary: `En attente de modification - Échéance: ${modificationDeadline.toLocaleString('fr-FR')}`,\n            updatedAt: new Date()\n          })\n          .where(eq(contracts.id, request.contractId));\n\n        // Notify owner that they can now modify the contract\n        await storage.createNotification({\n          userId: contract.ownerId,\n          title: \"Modification acceptée - 24h pour modifier\",\n          message: `Le locataire a accepté votre demande de modification. Vous avez 24 heures pour modifier le contrat (jusqu'au ${modificationDeadline.toLocaleString('fr-FR')}).`,\n          type: \"contract_modification_accepted\",\n          relatedId: request.contractId,\n        });\n      } else {\n        // Notify owner of rejection\n        await storage.createNotification({\n          userId: contract.ownerId,\n          title: \"Modification refusée\",\n          message: \"Le locataire a refusé votre demande de modification. Le contrat reste inchangé.\",\n          type: \"contract_modification_rejected\",\n          relatedId: request.contractId,\n        });\n      }\n\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Contract modification response error:\", error);\n      res.status(500).json({ error: \"Failed to respond to modification request\" });\n    }\n  });\n\n  // Contract early termination request - Owner requests early termination\n  app.post(\"/api/contracts/:id/request-termination\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { requestedBy, reason, detailedReason } = req.body;\n      \n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only allow termination requests for active contracts\n      if (contract.status !== 'active') {\n        return res.status(400).json({ error: \"Can only request termination for active contracts\" });\n      }\n\n      // Only owner can request early termination\n      if (contract.ownerId !== requestedBy) {\n        return res.status(403).json({ error: \"Only the owner can request early termination\" });\n      }\n\n      // Validate required reason\n      if (!reason) {\n        return res.status(400).json({ error: \"Termination reason is required\" });\n      }\n\n      // Create termination request\n      const [terminationRequest] = await db\n        .insert(contractTerminationRequests)\n        .values({\n          contractId,\n          requestedBy,\n          reason,\n          detailedReason,\n          status: 'pending'\n        })\n        .returning();\n\n      // Notify tenant of termination request\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Demande d'arrêt anticipé du contrat\",\n        message: `Le propriétaire demande l'arrêt anticipé du contrat. Raison: ${reason}${detailedReason ? `. Détails: ${detailedReason}` : ''}`,\n        type: \"contract_termination_request\",\n        relatedId: contractId,\n      });\n\n      res.status(201).json(terminationRequest);\n    } catch (error) {\n      console.error(\"Contract termination request error:\", error);\n      res.status(500).json({ error: \"Failed to create termination request\" });\n    }\n  });\n\n  // Get individual contract termination request\n  app.get(\"/api/contract-termination-requests/:id\", async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      \n      const [request] = await db\n        .select()\n        .from(contractTerminationRequests)\n        .where(eq(contractTerminationRequests.id, requestId));\n        \n      if (!request) {\n        return res.status(404).json({ error: \"Termination request not found\" });\n      }\n\n      res.json(request);\n    } catch (error) {\n      console.error(\"Get termination request error:\", error);\n      res.status(500).json({ error: \"Failed to fetch termination request\" });\n    }\n  });\n\n  // Modify contract by owner (within 24h deadline)\n  app.put(\"/api/contracts/:id/modify\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { contractData, userId, modificationReason } = req.body;\n      \n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only owner can modify contracts\n      if (contract.ownerId !== userId) {\n        return res.status(403).json({ error: \"Only the owner can modify contracts\" });\n      }\n\n      // Check if contract is in waiting_for_modification status\n      if (contract.status !== 'waiting_for_modification') {\n        return res.status(400).json({ error: \"Contract is not in modification state\" });\n      }\n\n      // Check if modification deadline has passed\n      const [modRequest] = await db\n        .select()\n        .from(contractModificationRequests)\n        .where(eq(contractModificationRequests.contractId, contractId))\n        .orderBy(desc(contractModificationRequests.id))\n        .limit(1);\n\n      if (modRequest?.modificationDeadline && new Date() > modRequest.modificationDeadline) {\n        return res.status(400).json({ error: \"Modification deadline has passed\" });\n      }\n\n      // Create new contract version\n      const currentVersion = await db\n        .select({ version: contractVersions.version })\n        .from(contractVersions)\n        .where(eq(contractVersions.contractId, contractId))\n        .orderBy(desc(contractVersions.version))\n        .limit(1);\n\n      const newVersion = (currentVersion[0]?.version || 0) + 1;\n\n      // Save current contract data as previous version\n      await db\n        .insert(contractVersions)\n        .values({\n          contractId,\n          version: newVersion - 1,\n          contractData: contract.contractData,\n          ownerSignature: contract.ownerSignature,\n          tenantSignature: contract.tenantSignature,\n          ownerSignedAt: contract.ownerSignedAt,\n          tenantSignedAt: contract.tenantSignedAt,\n          status: 'superseded',\n          modificationReason: 'Original version before modification'\n        });\n\n      // Update main contract with new data and reset signatures\n      await db\n        .update(contracts)\n        .set({\n          contractData,\n          ownerSignature: null,\n          tenantSignature: null,\n          ownerSignedAt: null,\n          tenantSignedAt: null,\n          status: 'draft',\n          modificationSummary: `Contrat modifié (Version ${newVersion}) - ${modificationReason || 'Modifications apportées'}`,\n          updatedAt: new Date()\n        })\n        .where(eq(contracts.id, contractId));\n\n      // Notify tenant of contract modification\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Contrat modifié - Signature requise\",\n        message: `Le propriétaire a modifié le contrat. Veuillez examiner et signer la nouvelle version.`,\n        type: \"contract_modified\",\n        relatedId: contractId,\n      });\n\n      res.json({ success: true, newVersion });\n    } catch (error) {\n      console.error(\"Contract modification error:\", error);\n      res.status(500).json({ error: \"Failed to modify contract\" });\n    }\n  });\n\n  // Get contract versions for a specific contract\n  app.get(\"/api/contracts/:id/versions\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      \n      const versions = await db\n        .select()\n        .from(contractVersions)\n        .where(eq(contractVersions.contractId, contractId))\n        .orderBy(desc(contractVersions.version));\n        \n      res.json(versions);\n    } catch (error) {\n      console.error(\"Get contract versions error:\", error);\n      res.status(500).json({ error: \"Failed to fetch contract versions\" });\n    }\n  });\n\n  // Respond to contract termination request - Tenant responds\n  app.put(\"/api/contract-termination-requests/:id/respond\", async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      const { response, tenantResponse, userId } = req.body; // response: 'accepted' | 'rejected'\n      \n      const [request] = await db\n        .select()\n        .from(contractTerminationRequests)\n        .where(eq(contractTerminationRequests.id, requestId));\n        \n      if (!request) {\n        return res.status(404).json({ error: \"Termination request not found\" });\n      }\n\n      const contract = await storage.getContract(request.contractId);\n      if (!contract || contract.tenantId !== userId) {\n        return res.status(403).json({ error: \"Unauthorized\" });\n      }\n\n      // Update request status\n      const [updatedRequest] = await db\n        .update(contractTerminationRequests)\n        .set({\n          status: response,\n          tenantResponse,\n          respondedAt: new Date()\n        })\n        .where(eq(contractTerminationRequests.id, requestId))\n        .returning();\n\n      if (response === 'accepted') {\n        // Terminate contract immediately and make property available\n        await db\n          .update(contracts)\n          .set({ \n            status: 'terminated',\n            terminationReason: request.reason || 'Early termination accepted by tenant',\n            terminatedBy: contract.ownerId,\n            terminatedAt: new Date(),\n            updatedAt: new Date()\n          })\n          .where(eq(contracts.id, request.contractId));\n\n        // Update property status to available\n        await storage.updatePropertyStatus(contract.propertyId, 'Disponible');\n\n        // Notify owner that termination was accepted\n        await storage.createNotification({\n          userId: contract.ownerId,\n          title: \"Arrêt anticipé accepté\",\n          message: \"Le locataire a accepté l'arrêt anticipé du contrat. La propriété est maintenant disponible.\",\n          type: \"contract_termination_accepted\",\n          relatedId: request.contractId,\n        });\n      } else {\n        // Notify owner of rejection\n        await storage.createNotification({\n          userId: contract.ownerId,\n          title: \"Arrêt anticipé refusé\",\n          message: \"Le locataire a refusé l'arrêt anticipé. Le contrat reste actif jusqu'à son expiration naturelle.\",\n          type: \"contract_termination_rejected\",\n          relatedId: request.contractId,\n        });\n      }\n\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error(\"Contract termination response error:\", error);\n      res.status(500).json({ error: \"Failed to respond to termination request\" });\n    }\n  });\n\n  // Contract PDF download\n  app.get(\"/api/contracts/:id/download\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const contract = await storage.getContract(id);\n      \n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only allow download if contract is fully signed\n      if (contract.status !== 'active' && contract.status !== 'fully_signed') {\n        return res.status(400).json({ error: \"Contract must be fully signed to download\" });\n      }\n\n      // Generate PDF URL (in real implementation, this would generate/retrieve actual PDF)\n      const pdfUrl = `/api/contracts/${id}/pdf`;\n      \n      res.json({ \n        downloadUrl: pdfUrl,\n        filename: `contrat_${id}_${(contract.contractData as any)?.propertyTitle?.replace(/\\s+/g, '_') || 'property'}.pdf`\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to generate download link\" });\n    }\n  });\n\n  // Users routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const [user] = await db.select().from(users).where(eq(users.id, id));\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      // Don't send password in response\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Conversations routes\n  app.post(\"/api/conversations\", async (req, res) => {\n    try {\n      const { propertyId, tenantId, ownerId, message } = req.body;\n      \n      // Check if conversation already exists\n      let [existingConversation] = await db.select()\n        .from(conversations)\n        .where(and(\n          eq(conversations.propertyId, propertyId),\n          eq(conversations.tenantId, tenantId),\n          eq(conversations.ownerId, ownerId)\n        ));\n\n      if (!existingConversation) {\n        // Create new conversation\n        [existingConversation] = await db.insert(conversations)\n          .values({ propertyId, tenantId, ownerId })\n          .returning();\n      }\n\n      // Add message to conversation\n      await db.insert(messages).values({\n        conversationId: existingConversation.id,\n        senderId: tenantId,\n        content: message,\n      });\n\n      // Update last message timestamp\n      await db.update(conversations)\n        .set({ lastMessageAt: new Date() })\n        .where(eq(conversations.id, existingConversation.id));\n\n      res.json({ success: true, conversationId: existingConversation.id });\n    } catch (error) {\n      console.error(\"Conversation error:\", error);\n      res.status(500).json({ error: \"Failed to send message\" });\n    }\n  });\n\n  app.get(\"/api/conversations/:id/messages\", async (req, res) => {\n    try {\n      const conversationId = parseInt(req.params.id);\n      const messagesList = await db.select()\n        .from(messages)\n        .where(eq(messages.conversationId, conversationId))\n        .orderBy(messages.createdAt);\n      res.json(messagesList);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Reviews routes\n  app.get(\"/api/properties/:id/reviews\", async (req, res) => {\n    try {\n      const propertyId = parseInt(req.params.id);\n      const reviewsList = await db.select()\n        .from(reviews)\n        .where(eq(reviews.propertyId, propertyId))\n        .orderBy(desc(reviews.createdAt));\n      res.json(reviewsList);\n    } catch (error) {\n      console.error(\"Reviews fetch error:\", error);\n      res.json([]); // Return empty array instead of error\n    }\n  });\n\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      const validatedData = insertReviewSchema.parse(req.body);\n      const [review] = await db.insert(reviews).values(validatedData).returning();\n      res.status(201).json(review);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid review data\", details: error.errors });\n      }\n      console.error(\"Review creation error:\", error);\n      res.status(500).json({ error: \"Failed to create review\" });\n    }\n  });\n\n  // Get pending requests for a contract\n  app.get(\"/api/contracts/:id/pending-requests\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      \n      // Get modification requests\n      const modificationRequests = await db\n        .select({\n          id: contractModificationRequests.id,\n          type: sql<string>`'modification'`,\n          status: contractModificationRequests.status,\n          createdAt: contractModificationRequests.createdAt,\n        })\n        .from(contractModificationRequests)\n        .where(eq(contractModificationRequests.contractId, contractId));\n\n      // Get termination requests\n      const terminationRequests = await db\n        .select({\n          id: contractTerminationRequests.id,\n          type: sql<string>`'termination'`,\n          status: contractTerminationRequests.status,\n          createdAt: contractTerminationRequests.createdAt,\n        })\n        .from(contractTerminationRequests)\n        .where(eq(contractTerminationRequests.contractId, contractId));\n\n      const allRequests = [...modificationRequests, ...terminationRequests];\n      res.json(allRequests);\n    } catch (error) {\n      console.error(\"Failed to fetch pending requests:\", error);\n      res.status(500).json({ error: \"Failed to fetch pending requests\" });\n    }\n  });\n\n  // Get specific modification request\n  app.get(\"/api/contract-modification-requests/:id\", async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      const [request] = await db\n        .select()\n        .from(contractModificationRequests)\n        .where(eq(contractModificationRequests.id, requestId));\n        \n      if (!request) {\n        return res.status(404).json({ error: \"Request not found\" });\n      }\n\n      res.json(request);\n    } catch (error) {\n      console.error(\"Failed to fetch modification request:\", error);\n      res.status(500).json({ error: \"Failed to fetch modification request\" });\n    }\n  });\n\n  // Get specific termination request\n  app.get(\"/api/contract-termination-requests/:id\", async (req, res) => {\n    try {\n      const requestId = parseInt(req.params.id);\n      const [request] = await db\n        .select()\n        .from(contractTerminationRequests)\n        .where(eq(contractTerminationRequests.id, requestId));\n        \n      if (!request) {\n        return res.status(404).json({ error: \"Request not found\" });\n      }\n\n      res.json(request);\n    } catch (error) {\n      console.error(\"Failed to fetch termination request:\", error);\n      res.status(500).json({ error: \"Failed to fetch termination request\" });\n    }\n  });\n\n  // Get tenant's requests\n  app.get(\"/api/tenant-requests/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      \n      // Get all contracts where user is tenant\n      const userContracts = await db\n        .select({ id: contracts.id })\n        .from(contracts)\n        .where(eq(contracts.tenantId, userId));\n\n      if (userContracts.length === 0) {\n        return res.json([]);\n      }\n\n      const contractIds = userContracts.map(c => c.id);\n\n      // Get modification requests for all user contracts\n      const modificationRequests = await db\n        .select({\n          id: contractModificationRequests.id,\n          type: sql<string>`'modification'`,\n          status: contractModificationRequests.status,\n          createdAt: contractModificationRequests.createdAt,\n          contractId: contractModificationRequests.contractId,\n        })\n        .from(contractModificationRequests)\n        .where(inArray(contractModificationRequests.contractId, contractIds));\n\n      // Get termination requests for all user contracts\n      const terminationRequests = await db\n        .select({\n          id: contractTerminationRequests.id,\n          type: sql<string>`'termination'`,\n          status: contractTerminationRequests.status,\n          createdAt: contractTerminationRequests.createdAt,\n          contractId: contractTerminationRequests.contractId,\n        })\n        .from(contractTerminationRequests)\n        .where(inArray(contractTerminationRequests.contractId, contractIds));\n\n      console.log(`Found ${modificationRequests.length} modification requests and ${terminationRequests.length} termination requests for user ${userId}`);\n      console.log(\"Modification requests:\", modificationRequests);\n      console.log(\"Termination requests:\", terminationRequests);\n\n      const allRequests = [...modificationRequests, ...terminationRequests];\n      res.json(allRequests);\n    } catch (error) {\n      console.error(\"Failed to fetch tenant requests:\", error);\n      res.status(500).json({ error: \"Failed to fetch tenant requests\" });\n    }\n  });\n\n  // Authentication routes with proper user type handling\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ error: \"Username and password required\" });\n      }\n      \n      // Find user by username\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // In real implementation, you'd verify password hash here\n      // For testing, we'll check if the password matches what's stored in the database\n      if (password !== user.password) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Create session token with user type\n      const sessionToken = `session_${user.id}_${user.userType}_${Date.now()}`;\n      \n      // Return user info with session token\n      const responseUser = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phone: user.phone,\n        userType: user.userType,\n      };\n      \n      res.json({ \n        user: responseUser, \n        token: sessionToken,\n        userType: user.userType,\n        message: `Connexion réussie en tant que ${user.userType === 'owner' ? 'propriétaire' : 'locataire'}` \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Get current user session info\n  app.get(\"/api/auth/me\", async (req, res) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return res.status(401).json({ error: \"No token provided\" });\n      }\n      \n      const token = authHeader.split(' ')[1];\n      // Extract user ID from session token\n      const tokenParts = token.split('_');\n      if (tokenParts.length < 4 || tokenParts[0] !== 'session') {\n        return res.status(401).json({ error: \"Invalid token\" });\n      }\n      \n      const userId = parseInt(tokenParts[1]);\n      const userType = tokenParts[2];\n      \n      const user = await storage.getUser(userId);\n      if (!user || user.userType !== userType) {\n        return res.status(401).json({ error: \"Invalid session\" });\n      }\n      \n      const responseUser = {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phone: user.phone,\n        userType: user.userType,\n      };\n      \n      res.json({ user: responseUser });\n    } catch (error) {\n      console.error(\"Session validation error:\", error);\n      res.status(401).json({ error: \"Invalid session\" });\n    }\n  });\n\n  // Registration with automatic user type detection\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, password, email, firstName, lastName, phone } = req.body;\n      \n      if (!username || !password || !email) {\n        return res.status(400).json({ error: \"Username, password, and email required\" });\n      }\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(409).json({ error: \"Username already exists\" });\n      }\n      \n      // Auto-detect user type based on email patterns\n      let userType = 'tenant'; // Default to tenant\n      const emailLower = email.toLowerCase();\n      \n      // Check for student email patterns\n      const isStudent = emailLower.includes('etudiant') || \n                       emailLower.includes('student') || \n                       emailLower.endsWith('.tn') ||\n                       emailLower.includes('universite') ||\n                       emailLower.includes('university') ||\n                       emailLower.includes('fst') ||\n                       emailLower.includes('iset') ||\n                       emailLower.includes('enis');\n      \n      // If not clearly a student email, check for owner patterns\n      if (!isStudent) {\n        const isOwner = emailLower.includes('proprietaire') ||\n                       emailLower.includes('owner') ||\n                       emailLower.includes('agence') ||\n                       emailLower.includes('immobilier') ||\n                       (!emailLower.endsWith('.tn') && \n                        (emailLower.includes('gmail') || emailLower.includes('outlook') || emailLower.includes('hotmail')));\n        \n        if (isOwner) {\n          userType = 'owner';\n        }\n      }\n      \n      // Create user\n      const newUser = await storage.createUser({\n        username,\n        password, // In production, hash this password\n        email,\n        firstName,\n        lastName,\n        phone,\n        userType,\n      });\n      \n      // Create session token\n      const sessionToken = `session_${newUser.id}_${newUser.userType}_${Date.now()}`;\n      \n      const responseUser = {\n        id: newUser.id,\n        username: newUser.username,\n        email: newUser.email,\n        firstName: newUser.firstName,\n        lastName: newUser.lastName,\n        phone: newUser.phone,\n        userType: newUser.userType,\n      };\n      \n      res.status(201).json({ \n        user: responseUser, \n        token: sessionToken,\n        userType: newUser.userType,\n        message: `Compte créé avec succès en tant que ${newUser.userType === 'owner' ? 'propriétaire' : 'locataire'}` \n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Registration failed\" });\n    }\n  });\n\n  // Get modification requests for a user (owner or tenant)\n  app.get(\"/api/modification-requests/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const userType = req.query.userType as string;\n      \n      if (userType === 'owner') {\n        // Owner sees their sent modification requests\n        const requests = await db\n          .select({\n            id: contractModificationRequests.id,\n            contractId: contractModificationRequests.contractId,\n            requestedChanges: contractModificationRequests.requestedChanges,\n            fieldsToModify: contractModificationRequests.fieldsToModify,\n            modificationReason: contractModificationRequests.modificationReason,\n            status: contractModificationRequests.status,\n            tenantResponse: contractModificationRequests.tenantResponse,\n            respondedAt: contractModificationRequests.respondedAt,\n            createdAt: contractModificationRequests.createdAt,\n            property: {\n              title: properties.title,\n              address: properties.address,\n            },\n            tenant: {\n              firstName: users.firstName,\n              lastName: users.lastName,\n              email: users.email,\n            }\n          })\n          .from(contractModificationRequests)\n          .leftJoin(contracts, eq(contractModificationRequests.contractId, contracts.id))\n          .leftJoin(properties, eq(contracts.propertyId, properties.id))\n          .leftJoin(users, eq(contracts.tenantId, users.id))\n          .where(eq(contractModificationRequests.requestedBy, userId))\n          .orderBy(desc(contractModificationRequests.createdAt));\n        \n        res.json(requests);\n      } else {\n        // Tenant sees modification requests received for their contracts\n        const userContracts = await db\n          .select({ id: contracts.id })\n          .from(contracts)\n          .where(eq(contracts.tenantId, userId));\n        \n        if (userContracts.length === 0) {\n          return res.json([]);\n        }\n        \n        const contractIds = userContracts.map(c => c.id);\n        const requests = await db\n          .select({\n            id: contractModificationRequests.id,\n            contractId: contractModificationRequests.contractId,\n            requestedChanges: contractModificationRequests.requestedChanges,\n            fieldsToModify: contractModificationRequests.fieldsToModify,\n            modificationReason: contractModificationRequests.modificationReason,\n            status: contractModificationRequests.status,\n            tenantResponse: contractModificationRequests.tenantResponse,\n            respondedAt: contractModificationRequests.respondedAt,\n            createdAt: contractModificationRequests.createdAt,\n            property: {\n              title: properties.title,\n              address: properties.address,\n            },\n            owner: {\n              firstName: users.firstName,\n              lastName: users.lastName,\n              email: users.email,\n            }\n          })\n          .from(contractModificationRequests)\n          .leftJoin(contracts, eq(contractModificationRequests.contractId, contracts.id))\n          .leftJoin(properties, eq(contracts.propertyId, properties.id))\n          .leftJoin(users, eq(contractModificationRequests.requestedBy, users.id))\n          .where(inArray(contractModificationRequests.contractId, contractIds))\n          .orderBy(desc(contractModificationRequests.createdAt));\n        \n        res.json(requests);\n      }\n    } catch (error) {\n      console.error(\"Get modification requests error:\", error);\n      res.status(500).json({ error: \"Failed to fetch modification requests\" });\n    }\n  });\n\n  // Get termination requests for a user (owner or tenant)\n  app.get(\"/api/termination-requests/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const userType = req.query.userType as string;\n      \n      if (userType === 'owner') {\n        // Owner sees their sent termination requests\n        const requests = await db\n          .select({\n            id: contractTerminationRequests.id,\n            contractId: contractTerminationRequests.contractId,\n            reason: contractTerminationRequests.reason,\n            detailedReason: contractTerminationRequests.detailedReason,\n            status: contractTerminationRequests.status,\n            tenantResponse: contractTerminationRequests.tenantResponse,\n            respondedAt: contractTerminationRequests.respondedAt,\n            createdAt: contractTerminationRequests.createdAt,\n            property: {\n              title: properties.title,\n              address: properties.address,\n            },\n            tenant: {\n              firstName: users.firstName,\n              lastName: users.lastName,\n              email: users.email,\n            }\n          })\n          .from(contractTerminationRequests)\n          .leftJoin(contracts, eq(contractTerminationRequests.contractId, contracts.id))\n          .leftJoin(properties, eq(contracts.propertyId, properties.id))\n          .leftJoin(users, eq(contracts.tenantId, users.id))\n          .where(eq(contractTerminationRequests.requestedBy, userId))\n          .orderBy(desc(contractTerminationRequests.createdAt));\n        \n        res.json(requests);\n      } else {\n        // Tenant sees termination requests received for their contracts\n        const userContracts = await db\n          .select({ id: contracts.id })\n          .from(contracts)\n          .where(eq(contracts.tenantId, userId));\n        \n        if (userContracts.length === 0) {\n          return res.json([]);\n        }\n        \n        const contractIds = userContracts.map(c => c.id);\n        const requests = await db\n          .select({\n            id: contractTerminationRequests.id,\n            contractId: contractTerminationRequests.contractId,\n            reason: contractTerminationRequests.reason,\n            detailedReason: contractTerminationRequests.detailedReason,\n            status: contractTerminationRequests.status,\n            tenantResponse: contractTerminationRequests.tenantResponse,\n            respondedAt: contractTerminationRequests.respondedAt,\n            createdAt: contractTerminationRequests.createdAt,\n            property: {\n              title: properties.title,\n              address: properties.address,\n            },\n            owner: {\n              firstName: users.firstName,\n              lastName: users.lastName,\n              email: users.email,\n            }\n          })\n          .from(contractTerminationRequests)\n          .leftJoin(contracts, eq(contractTerminationRequests.contractId, contracts.id))\n          .leftJoin(properties, eq(contracts.propertyId, properties.id))\n          .leftJoin(users, eq(contractTerminationRequests.requestedBy, users.id))\n          .where(inArray(contractTerminationRequests.contractId, contractIds))\n          .orderBy(desc(contractTerminationRequests.createdAt));\n        \n        res.json(requests);\n      }\n    } catch (error) {\n      console.error(\"Get termination requests error:\", error);\n      res.status(500).json({ error: \"Failed to fetch termination requests\" });\n    }\n  });\n\n  // Get contract versions (history) for a contract\n  app.get(\"/api/contracts/:id/versions\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      \n      const versions = await db\n        .select()\n        .from(contractVersions)\n        .where(eq(contractVersions.contractId, contractId))\n        .orderBy(desc(contractVersions.version));\n      \n      res.json(versions);\n    } catch (error) {\n      console.error(\"Get contract versions error:\", error);\n      res.status(500).json({ error: \"Failed to fetch contract versions\" });\n    }\n  });\n\n  // Complete contract modification - Owner modifies and signs, creates new version\n  app.post(\"/api/contracts/:id/complete-modification\", async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { modificationRequestId, modifiedContractData, ownerSignature, userId } = req.body;\n      \n      const contract = await storage.getContract(contractId);\n      if (!contract) {\n        return res.status(404).json({ error: \"Contract not found\" });\n      }\n\n      // Only owner can complete modifications\n      if (contract.ownerId !== userId) {\n        return res.status(403).json({ error: \"Only the owner can complete contract modifications\" });\n      }\n\n      // Verify modification request exists and is accepted\n      const [modificationRequest] = await db\n        .select()\n        .from(contractModificationRequests)\n        .where(eq(contractModificationRequests.id, modificationRequestId));\n\n      if (!modificationRequest || modificationRequest.status !== 'accepted') {\n        return res.status(400).json({ error: \"Valid accepted modification request required\" });\n      }\n\n      // Get current version number\n      const existingVersions = await db\n        .select()\n        .from(contractVersions)\n        .where(eq(contractVersions.contractId, contractId))\n        .orderBy(desc(contractVersions.version));\n\n      const newVersion = existingVersions.length > 0 ? existingVersions[0].version + 1 : 1;\n\n      // Create new contract version\n      const [newContractVersion] = await db\n        .insert(contractVersions)\n        .values({\n          contractId,\n          version: newVersion,\n          contractData: modifiedContractData,\n          ownerSignature,\n          ownerSignedAt: new Date(),\n          status: 'owner_signed',\n          modificationReason: modificationRequest.modificationReason,\n        })\n        .returning();\n\n      // Update main contract with modified data and status\n      await db\n        .update(contracts)\n        .set({\n          contractData: modifiedContractData,\n          ownerSignature,\n          ownerSignedAt: new Date(),\n          tenantSignature: null, // Reset tenant signature\n          tenantSignedAt: null,\n          status: 'modification_in_progress',\n          modificationSummary: `Version ${newVersion} - ${modificationRequest.modificationReason}`,\n          updatedAt: new Date()\n        })\n        .where(eq(contracts.id, contractId));\n\n      // Update modification request status\n      await db\n        .update(contractModificationRequests)\n        .set({ status: 'modification_in_progress' })\n        .where(eq(contractModificationRequests.id, modificationRequestId));\n\n      // Notify tenant to sign the modified contract\n      await storage.createNotification({\n        userId: contract.tenantId,\n        title: \"Contrat modifié - Signature requise\",\n        message: `Le propriétaire a modifié le contrat (Version ${newVersion}). Veuillez examiner et signer la nouvelle version.`,\n        type: \"contract_modification_ready\",\n        relatedId: contractId,\n      });\n\n      res.status(201).json(newContractVersion);\n    } catch (error) {\n      console.error(\"Complete contract modification error:\", error);\n      res.status(500).json({ error: \"Failed to complete contract modification\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":66525},"server/storage.ts":{"content":"import { \n  users, properties, offers, contracts, notifications,\n  type User, type InsertUser, type Property, type InsertProperty,\n  type Offer, type InsertOffer, type Contract, type InsertContract,\n  type Notification, type InsertNotification \n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, lt, or } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Property operations\n  getProperties(ownerId?: number): Promise<Property[]>;\n  getProperty(id: number): Promise<Property | undefined>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  updateProperty(id: number, updates: Partial<InsertProperty>): Promise<Property | undefined>;\n  deleteProperty(id: number): Promise<boolean>;\n  \n  // Offer operations\n  getOffers(userId: number, type: 'sent' | 'received'): Promise<Offer[]>;\n  getOffer(id: number): Promise<Offer | undefined>;\n  getOffersByTenantAndProperty(tenantId: number, propertyId: number): Promise<Offer[]>;\n  createOffer(offer: InsertOffer): Promise<Offer>;\n  updateOfferStatus(id: number, status: string): Promise<Offer | undefined>;\n  \n  // Contract operations\n  getContracts(userId: number): Promise<Contract[]>;\n  getOwnerContracts(ownerId: number): Promise<Contract[]>;\n  getContract(id: number): Promise<Contract | undefined>;\n  createContract(contract: InsertContract): Promise<Contract>;\n  updateContract(id: number, updates: Partial<InsertContract>): Promise<Contract | undefined>;\n  updateContractSignature(id: number, signatureType: 'owner' | 'tenant', signatureData: string): Promise<Contract | undefined>;\n  updateContractDeadline(id: number, deadline: Date): Promise<void>;\n  updateContractStatus(id: number, status: string): Promise<void>;\n  getActiveContractForProperty(propertyId: number): Promise<Contract | undefined>;\n  updatePropertyStatus(propertyId: number, status: string): Promise<void>;\n  expireContracts(): Promise<void>;\n  \n  // Notification operations\n  getNotifications(userId: number): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: number): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Property operations\n  async getProperties(ownerId?: number): Promise<Property[]> {\n    if (ownerId) {\n      return await db.select().from(properties).where(eq(properties.ownerId, ownerId));\n    }\n    return await db.select().from(properties).orderBy(desc(properties.createdAt));\n  }\n\n  async getProperty(id: number): Promise<Property | undefined> {\n    const [property] = await db.select().from(properties).where(eq(properties.id, id));\n    return property || undefined;\n  }\n\n  async createProperty(property: InsertProperty): Promise<Property> {\n    const [newProperty] = await db\n      .insert(properties)\n      .values(property)\n      .returning();\n    return newProperty;\n  }\n\n  async updateProperty(id: number, updates: Partial<InsertProperty>): Promise<Property | undefined> {\n    const [updated] = await db\n      .update(properties)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(properties.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteProperty(id: number): Promise<boolean> {\n    const result = await db.delete(properties).where(eq(properties.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Offer operations\n  async getOffers(userId: number, type: 'sent' | 'received'): Promise<Offer[]> {\n    const field = type === 'sent' ? offers.tenantId : offers.ownerId;\n    return await db.select().from(offers)\n      .where(eq(field, userId))\n      .orderBy(desc(offers.createdAt));\n  }\n\n  async getOffer(id: number): Promise<Offer | undefined> {\n    const [offer] = await db.select().from(offers).where(eq(offers.id, id));\n    return offer || undefined;\n  }\n\n  async getOffersByTenantAndProperty(tenantId: number, propertyId: number): Promise<Offer[]> {\n    return await db.select()\n      .from(offers)\n      .where(and(eq(offers.tenantId, tenantId), eq(offers.propertyId, propertyId)));\n  }\n\n  async createOffer(offer: InsertOffer): Promise<Offer> {\n    const [newOffer] = await db\n      .insert(offers)\n      .values(offer)\n      .returning();\n    return newOffer;\n  }\n\n  async updateOfferStatus(id: number, status: string): Promise<Offer | undefined> {\n    const [updated] = await db\n      .update(offers)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(offers.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Contract operations\n  async getContracts(userId: number): Promise<Contract[]> {\n    return await db.select().from(contracts)\n      .where(or(eq(contracts.ownerId, userId), eq(contracts.tenantId, userId)))\n      .orderBy(desc(contracts.createdAt));\n  }\n\n  async getOwnerContracts(ownerId: number): Promise<Contract[]> {\n    return await db.select().from(contracts)\n      .where(eq(contracts.ownerId, ownerId))\n      .orderBy(desc(contracts.createdAt));\n  }\n\n  async getContract(id: number): Promise<Contract | undefined> {\n    const [contract] = await db.select().from(contracts).where(eq(contracts.id, id));\n    return contract || undefined;\n  }\n\n  async createContract(contract: InsertContract): Promise<Contract> {\n    const [newContract] = await db\n      .insert(contracts)\n      .values(contract)\n      .returning();\n    return newContract;\n  }\n\n  async updateContract(id: number, updates: Partial<InsertContract>): Promise<Contract | undefined> {\n    const [updated] = await db\n      .update(contracts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(contracts.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async updateContractSignature(id: number, signatureType: 'owner' | 'tenant', signatureData: string): Promise<Contract | undefined> {\n    const updateData = signatureType === 'owner' ? \n      { ownerSignature: signatureData, ownerSignedAt: new Date(), status: 'owner_signed' } :\n      { tenantSignature: signatureData, tenantSignedAt: new Date(), status: 'fully_signed' };\n\n    const [updated] = await db\n      .update(contracts)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(contracts.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Notification operations\n  async getNotifications(userId: number): Promise<Notification[]> {\n    return await db.select().from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async markNotificationRead(id: number): Promise<boolean> {\n    const result = await db\n      .update(notifications)\n      .set({ read: true })\n      .where(eq(notifications.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Additional contract methods\n  async updateContractDeadline(id: number, deadline: Date): Promise<void> {\n    await db\n      .update(contracts)\n      .set({ tenantSignDeadline: deadline, updatedAt: new Date() })\n      .where(eq(contracts.id, id));\n  }\n\n  async updateContractStatus(id: number, status: string): Promise<void> {\n    await db\n      .update(contracts)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(contracts.id, id));\n  }\n\n  async getActiveContractForProperty(propertyId: number): Promise<Contract | undefined> {\n    const [contract] = await db.select().from(contracts)\n      .where(and(\n        eq(contracts.propertyId, propertyId),\n        eq(contracts.status, 'active')\n      ));\n    return contract || undefined;\n  }\n\n  async updatePropertyStatus(propertyId: number, status: string): Promise<void> {\n    await db\n      .update(properties)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(properties.id, propertyId));\n  }\n\n  async expireContracts(): Promise<void> {\n    // Find contracts that are past deadline and still waiting for tenant signature\n    const expiredContracts = await db.select().from(contracts)\n      .where(and(\n        eq(contracts.status, 'owner_signed'),\n        lt(contracts.tenantSignDeadline, new Date())\n      ));\n\n    for (const contract of expiredContracts) {\n      // Update contract status to expired\n      await this.updateContractStatus(contract.id, 'expired');\n      \n      // Reset property status back to available\n      await this.updatePropertyStatus(contract.propertyId, 'Disponible');\n      \n      // Notify both parties\n      await this.createNotification({\n        userId: contract.ownerId,\n        title: \"Contrat expiré\",\n        message: \"Le contrat a expiré car le locataire n'a pas signé dans les délais.\",\n        type: \"contract_expired\",\n        relatedId: contract.id,\n      });\n\n      await this.createNotification({\n        userId: contract.tenantId,\n        title: \"Contrat expiré\",\n        message: \"Vous avez dépassé le délai de signature. Le contrat a expiré.\",\n        type: \"contract_expired\",\n        relatedId: contract.id,\n      });\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9934},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, jsonb, decimal, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { relations } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\n// Users table for authentication\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\"),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  phone: text(\"phone\"),\n  userType: text(\"user_type\").notNull().default(\"tenant\"), // tenant, owner\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Properties table\nexport const properties = pgTable(\"properties\", {\n  id: serial(\"id\").primaryKey(),\n  ownerId: integer(\"owner_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // studio, apartment, villa, etc.\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  priceType: text(\"price_type\").notNull().default(\"mois\"), // mois, semaine, jour\n  surface: integer(\"surface\"),\n  rooms: integer(\"rooms\"),\n  bathrooms: integer(\"bathrooms\"),\n  address: text(\"address\").notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  amenities: text(\"amenities\").array(),\n  rules: text(\"rules\").array(),\n  images: text(\"images\").array(),\n  status: text(\"status\").notNull().default(\"Disponible\"), // Disponible, Loué, Indisponible\n  deposit: decimal(\"deposit\", { precision: 10, scale: 2 }),\n  fees: decimal(\"fees\", { precision: 10, scale: 2 }),\n  utilities: text(\"utilities\"),\n  utilitiesIncluded: boolean(\"utilities_included\").default(false),\n  // New property categorization fields\n  categories: text(\"categories\").array(), // Famille, Étudiant, Maison d'été, Vue sur mer, Proche de la plage\n  geographicHighlight: text(\"geographic_highlight\"), // e.g., \"À 200m de l'INSAT\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Property offers/agreements\nexport const offers = pgTable(\"offers\", {\n  id: serial(\"id\").primaryKey(),\n  propertyId: integer(\"property_id\").notNull().references(() => properties.id),\n  tenantId: integer(\"tenant_id\").notNull().references(() => users.id),\n  ownerId: integer(\"owner_id\").notNull().references(() => users.id),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  monthlyRent: decimal(\"monthly_rent\", { precision: 10, scale: 2 }).notNull(),\n  deposit: decimal(\"deposit\", { precision: 10, scale: 2 }),\n  conditions: text(\"conditions\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, rejected, contract_requested\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contracts table\nexport const contracts = pgTable(\"contracts\", {\n  id: serial(\"id\").primaryKey(),\n  offerId: integer(\"offer_id\").notNull().references(() => offers.id),\n  propertyId: integer(\"property_id\").notNull().references(() => properties.id),\n  tenantId: integer(\"tenant_id\").notNull().references(() => users.id),\n  ownerId: integer(\"owner_id\").notNull().references(() => users.id),\n  contractData: jsonb(\"contract_data\").notNull(), // All contract details\n  ownerSignature: text(\"owner_signature\"), // Base64 signature data\n  tenantSignature: text(\"tenant_signature\"), // Base64 signature data\n  ownerSignedAt: timestamp(\"owner_signed_at\"),\n  tenantSignedAt: timestamp(\"tenant_signed_at\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, owner_signed, fully_signed, active, expired, cancelled, terminated, waiting_for_modification, modified\n  tenantSignDeadline: timestamp(\"tenant_sign_deadline\"), // 3 days from owner signature\n  pdfUrl: text(\"pdf_url\"),\n  // Enhanced contract management fields\n  contractStartDate: timestamp(\"contract_start_date\"),\n  contractEndDate: timestamp(\"contract_end_date\"),\n  modificationSummary: text(\"modification_summary\"), // Summary of modifications made\n  terminationReason: text(\"termination_reason\"), // Reason for early termination\n  terminatedBy: integer(\"terminated_by\").references(() => users.id), // User who initiated termination\n  terminatedAt: timestamp(\"terminated_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  type: text(\"type\").notNull(), // offer, contract, signature, etc.\n  relatedId: integer(\"related_id\"), // ID of related offer/contract\n  read: boolean(\"read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Conversations table for messaging\nexport const conversations = pgTable(\"conversations\", {\n  id: serial(\"id\").primaryKey(),\n  propertyId: integer(\"property_id\").notNull().references(() => properties.id),\n  tenantId: integer(\"tenant_id\").notNull().references(() => users.id),\n  ownerId: integer(\"owner_id\").notNull().references(() => users.id),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messages table\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  conversationId: integer(\"conversation_id\").notNull().references(() => conversations.id),\n  senderId: integer(\"sender_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  messageType: text(\"message_type\").notNull().default(\"text\"), // text, image, file\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reviews table for property reviews\nexport const reviews = pgTable(\"reviews\", {\n  id: serial(\"id\").primaryKey(),\n  propertyId: integer(\"property_id\").notNull().references(() => properties.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contract versions table for tracking contract modifications\nexport const contractVersions = pgTable(\"contract_versions\", {\n  id: serial(\"id\").primaryKey(),\n  contractId: integer(\"contract_id\").notNull().references(() => contracts.id),\n  version: integer(\"version\").notNull().default(1), // Version number (1, 2, 3, etc.)\n  contractData: jsonb(\"contract_data\").notNull(), // Contract data for this version\n  ownerSignature: text(\"owner_signature\"),\n  tenantSignature: text(\"tenant_signature\"),\n  ownerSignedAt: timestamp(\"owner_signed_at\"),\n  tenantSignedAt: timestamp(\"tenant_signed_at\"),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, owner_signed, fully_signed, active, superseded\n  modificationReason: text(\"modification_reason\"), // Why this version was created\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contract modification requests table\nexport const contractModificationRequests = pgTable(\"contract_modification_requests\", {\n  id: serial(\"id\").primaryKey(),\n  contractId: integer(\"contract_id\").notNull().references(() => contracts.id),\n  requestedBy: integer(\"requested_by\").notNull().references(() => users.id), // Always owner\n  requestedChanges: jsonb(\"requested_changes\").notNull(), // Details of requested changes\n  fieldsToModify: text(\"fields_to_modify\").array(), // Fields owner wants to modify (name, cin, signature, address, etc.)\n  modificationReason: text(\"modification_reason\").notNull(), // Reason for modification request\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, rejected, modification_in_progress, completed\n  tenantResponse: text(\"tenant_response\"), // Optional message from tenant\n  respondedAt: timestamp(\"responded_at\"),\n  modificationDeadline: timestamp(\"modification_deadline\"), // 24h from acceptance\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contract termination requests table\nexport const contractTerminationRequests = pgTable(\"contract_termination_requests\", {\n  id: serial(\"id\").primaryKey(),\n  contractId: integer(\"contract_id\").notNull().references(() => contracts.id),\n  requestedBy: integer(\"requested_by\").notNull().references(() => users.id), // Owner requesting early termination\n  reason: text(\"reason\").notNull(), // Reason for termination request (required)\n  detailedReason: text(\"detailed_reason\"), // More detailed explanation\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, rejected\n  tenantResponse: text(\"tenant_response\"), // Optional message from tenant\n  respondedAt: timestamp(\"responded_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  properties: many(properties),\n  sentOffers: many(offers, { relationName: \"tenant_offers\" }),\n  receivedOffers: many(offers, { relationName: \"owner_offers\" }),\n  tenantContracts: many(contracts, { relationName: \"tenant_contracts\" }),\n  ownerContracts: many(contracts, { relationName: \"owner_contracts\" }),\n  notifications: many(notifications),\n}));\n\nexport const propertiesRelations = relations(properties, ({ one, many }) => ({\n  owner: one(users, { fields: [properties.ownerId], references: [users.id] }),\n  offers: many(offers),\n  contracts: many(contracts),\n}));\n\nexport const offersRelations = relations(offers, ({ one }) => ({\n  property: one(properties, { fields: [offers.propertyId], references: [properties.id] }),\n  tenant: one(users, { fields: [offers.tenantId], references: [users.id], relationName: \"tenant_offers\" }),\n  owner: one(users, { fields: [offers.ownerId], references: [users.id], relationName: \"owner_offers\" }),\n  contract: one(contracts, { fields: [offers.id], references: [contracts.offerId] }),\n}));\n\nexport const contractsRelations = relations(contracts, ({ one }) => ({\n  offer: one(offers, { fields: [contracts.offerId], references: [offers.id] }),\n  property: one(properties, { fields: [contracts.propertyId], references: [properties.id] }),\n  tenant: one(users, { fields: [contracts.tenantId], references: [users.id], relationName: \"tenant_contracts\" }),\n  owner: one(users, { fields: [contracts.ownerId], references: [users.id], relationName: \"owner_contracts\" }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, { fields: [notifications.userId], references: [users.id] }),\n}));\n\nexport const contractModificationRequestsRelations = relations(contractModificationRequests, ({ one }) => ({\n  contract: one(contracts, { fields: [contractModificationRequests.contractId], references: [contracts.id] }),\n  requestedBy: one(users, { fields: [contractModificationRequests.requestedBy], references: [users.id] }),\n}));\n\nexport const contractTerminationRequestsRelations = relations(contractTerminationRequests, ({ one }) => ({\n  contract: one(contracts, { fields: [contractTerminationRequests.contractId], references: [contracts.id] }),\n  requestedBy: one(users, { fields: [contractTerminationRequests.requestedBy], references: [users.id] }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  phone: true,\n  userType: true,\n});\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOfferSchema = createInsertSchema(offers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  startDate: z.union([z.string(), z.date()]).transform((val) => new Date(val)),\n  endDate: z.union([z.string(), z.date()]).transform((val) => new Date(val)),\n});\n\nexport const insertContractSchema = createInsertSchema(contracts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  lastMessageAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContractModificationRequestSchema = createInsertSchema(contractModificationRequests).omit({\n  id: true,\n  createdAt: true,\n  respondedAt: true,\n  modificationDeadline: true,\n});\n\nexport const insertContractTerminationRequestSchema = createInsertSchema(contractTerminationRequests).omit({\n  id: true,\n  createdAt: true,\n  respondedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type Offer = typeof offers.$inferSelect;\nexport type InsertOffer = z.infer<typeof insertOfferSchema>;\nexport type Contract = typeof contracts.$inferSelect;\nexport type InsertContract = z.infer<typeof insertContractSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type ContractModificationRequest = typeof contractModificationRequests.$inferSelect;\nexport type InsertContractModificationRequest = z.infer<typeof insertContractModificationRequestSchema>;\nexport type ContractTerminationRequest = typeof contractTerminationRequests.$inferSelect;\nexport type InsertContractTerminationRequest = z.infer<typeof insertContractTerminationRequestSchema>;\n","size_bytes":14288},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Router, Route, Switch } from \"wouter\";\nimport Index from \"./pages/Index\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Search from \"./pages/Search\";\nimport PropertyDetails from \"./pages/PropertyDetails\";\nimport Messages from \"./pages/Messages\";\nimport NotFound from \"./pages/NotFound\";\nimport Favorites from \"./pages/Favorites\";\nimport AddProperty from \"./pages/AddProperty\";\nimport ManageProperties from \"./pages/ManageProperties\";\nimport Contracts from \"./pages/Contracts\";\nimport Notifications from \"./pages/Notifications\";\nimport CreateContract from \"./pages/CreateContract\";\nimport ContractView from \"./pages/ContractView\";\nimport ContractsDashboard from \"./pages/ContractsDashboard\";\nimport UserProfile from \"./pages/UserProfile\";\nimport EditProperty from \"./pages/EditProperty\";\nimport MapView from \"./pages/MapView\";\nimport Offers from \"./pages/Offers\";\nimport TenantRequestResponse from \"./pages/TenantRequestResponse\";\nimport ContractVersions from \"./pages/ContractVersions\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Index} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/search\" component={Search} />\n          <Route path=\"/property/:id\" component={PropertyDetails} />\n          <Route path=\"/messages\" component={Messages} />\n          <Route path=\"/favorites\" component={Favorites} />\n          <Route path=\"/add-property\" component={AddProperty} />\n          <Route path=\"/manage-properties\" component={ManageProperties} />\n          <Route path=\"/contracts\" component={ContractsDashboard} />\n          <Route path=\"/create-contract\" component={CreateContract} />\n          <Route path=\"/contract/:id\" component={ContractView} />\n          <Route path=\"/contract/:id/versions\" component={ContractVersions} />\n          <Route path=\"/profile\" component={UserProfile} />\n          <Route path=\"/edit-property/:id\" component={EditProperty} />\n          <Route path=\"/map\" component={MapView} />\n          <Route path=\"/notifications\" component={Notifications} />\n          <Route path=\"/offers\" component={Offers} />\n          <Route path=\"/tenant-requests/:type/:id\" component={TenantRequestResponse} />\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":2930},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Ekrili Neo-Brutalism Design System - Bold, Raw, Unapologetic\nAll colors MUST be HSL.\n*/\n\n@layer base {\n  :root {\n    /* Modern Glassmorphism Design System */\n    --background: 240 10% 98%;\n    --foreground: 240 10% 15%;\n\n    /* Primary Brand Colors - Tunisian inspired */\n    --primary: 15 86% 53%;          /* Warm orange-red */\n    --primary-foreground: 0 0% 98%;\n\n    /* Secondary Colors */\n    --secondary: 200 95% 55%;       /* Mediterranean blue */\n    --secondary-foreground: 0 0% 98%;\n\n    /* Accent Colors */\n    --accent: 160 84% 39%;          /* Olive green */\n    --accent-foreground: 0 0% 98%;\n\n    /* Success/Highlight */\n    --success: 142 76% 36%;         /* Emerald green */\n    --success-foreground: 0 0% 98%;\n\n    /* Warning */\n    --warning: 38 92% 50%;          /* Golden yellow */\n    --warning-foreground: 240 10% 15%;\n\n    /* Destructive */\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 98%;\n\n    /* Neutral System */\n    --muted: 240 4% 95%;\n    --muted-foreground: 240 4% 46%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 15%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 15%;\n\n    /* Borders & Inputs */\n    --border: 240 6% 90%;\n    --input: 240 6% 97%;\n    --ring: 15 86% 53%;\n\n    /* Glass Effects */\n    --glass-bg: 255 255 255 / 0.1;\n    --glass-border: 255 255 255 / 0.2;\n    --glass-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);\n\n    /* Smooth radius */\n    --radius: 16px;\n\n    /* Gradients */\n    --gradient-primary: linear-gradient(135deg, hsl(15 86% 53%) 0%, hsl(25 95% 63%) 100%);\n    --gradient-secondary: linear-gradient(135deg, hsl(200 95% 55%) 0%, hsl(220 95% 65%) 100%);\n    --gradient-hero: linear-gradient(135deg, hsl(15 86% 53% / 0.1) 0%, hsl(200 95% 55% / 0.1) 100%);\n  }\n\n  .dark {\n    --background: 240 10% 9%;\n    --foreground: 240 5% 96%;\n    --primary: 15 86% 58%;\n    --secondary: 200 95% 60%;\n    --accent: 160 84% 44%;\n    --success: 142 76% 41%;\n    --muted: 240 4% 15%;\n    --muted-foreground: 240 4% 65%;\n    --card: 240 10% 12%;\n    --border: 240 6% 20%;\n    --input: 240 6% 18%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-normal antialiased;\n    background: var(--gradient-hero);\n    min-height: 100vh;\n  }\n}\n\n/* Modern Glassmorphism Components */\n@layer components {\n  .glass {\n    background: rgba(var(--glass-bg));\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n    border: 1px solid rgba(var(--glass-border));\n    box-shadow: var(--glass-shadow);\n  }\n  \n  .glass-card {\n    @apply glass rounded-2xl p-6 transition-all duration-300 hover:shadow-2xl;\n  }\n  \n  .glass-button {\n    @apply glass rounded-xl px-6 py-3 font-semibold transition-all duration-300 hover:scale-105 active:scale-95;\n  }\n  \n  .glass-input {\n    @apply glass rounded-xl px-4 py-3 border-0 bg-white/10 placeholder:text-muted-foreground focus:bg-white/20 focus:outline-none focus:ring-2 focus:ring-primary/50;\n  }\n\n  .gradient-text {\n    background: var(--gradient-primary);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .gradient-button {\n    background: var(--gradient-primary);\n    @apply text-white rounded-xl px-6 py-3 font-semibold transition-all duration-300 hover:scale-105 hover:shadow-lg active:scale-95;\n  }\n\n  .floating-element {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-20px); }\n  }\n\n  .slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  @keyframes slideUp {\n    from { opacity: 0; transform: translateY(30px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  .pulse-gentle {\n    animation: pulseGentle 2s ease-in-out infinite;\n  }\n  \n  @keyframes pulseGentle {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n}","size_bytes":3966},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/BadgeSystem.tsx":{"content":"import React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, CheckCircle, Calendar, Award, MessageCircle, Crown } from \"lucide-react\";\n\ninterface UserBadgesProps {\n  userType: string;\n  isVerified?: boolean;\n  contractsCount?: number;\n  rating?: number;\n  responseTime?: string;\n  memberSince?: string;\n  className?: string;\n}\n\ninterface PropertyBadgeProps {\n  propertyType: \"priority\" | \"best\" | \"new\" | \"editor\" | \"normal\";\n  className?: string;\n}\n\nexport const UserBadges: React.FC<UserBadgesProps> = ({\n  userType,\n  isVerified = false,\n  contractsCount = 0,\n  rating = 0,\n  responseTime,\n  memberSince,\n  className = \"\"\n}) => {\n  const badges = [];\n\n  // Badge compte vérifié\n  if (isVerified) {\n    badges.push({\n      label: \"Compte vérifié\",\n      icon: <CheckCircle className=\"h-3 w-3\" />,\n      variant: \"default\" as const,\n      emoji: \"✅\"\n    });\n  }\n\n  // Badge super propriétaire\n  if (userType === \"owner\" && rating >= 4.5 && contractsCount >= 5) {\n    badges.push({\n      label: \"Super propriétaire\",\n      icon: <Crown className=\"h-3 w-3\" />,\n      variant: \"default\" as const,\n      emoji: \"🌟\"\n    });\n  }\n\n  // Badge propriétaire actif\n  if (userType === \"owner\" && contractsCount > 0) {\n    badges.push({\n      label: \"Propriétaire actif\",\n      icon: <Award className=\"h-3 w-3\" />,\n      variant: \"secondary\" as const,\n      emoji: \"📷\"\n    });\n  }\n\n  // Badge contrats signés\n  if (contractsCount > 0) {\n    badges.push({\n      label: `${contractsCount} contrat${contractsCount > 1 ? 's' : ''} signé${contractsCount > 1 ? 's' : ''}`,\n      icon: <Award className=\"h-3 w-3\" />,\n      variant: \"outline\" as const,\n      emoji: \"🧾\"\n    });\n  }\n\n  // Badge réactif\n  if (responseTime === \"fast\") {\n    badges.push({\n      label: \"Réactif\",\n      icon: <MessageCircle className=\"h-3 w-3\" />,\n      variant: \"secondary\" as const,\n      emoji: \"💬\"\n    });\n  }\n\n  // Badge ancienneté\n  if (memberSince) {\n    const years = new Date().getFullYear() - new Date(memberSince).getFullYear();\n    if (years >= 1) {\n      badges.push({\n        label: `${years} an${years > 1 ? 's' : ''} d'ancienneté`,\n        icon: <Calendar className=\"h-3 w-3\" />,\n        variant: \"outline\" as const,\n        emoji: \"🎖\"\n      });\n    }\n  }\n\n  return (\n    <div className={`flex flex-wrap gap-1 ${className}`}>\n      {badges.map((badge, index) => (\n        <Badge key={index} variant={badge.variant} className=\"text-xs flex items-center gap-1\">\n          <span>{badge.emoji}</span>\n          <span>{badge.label}</span>\n        </Badge>\n      ))}\n    </div>\n  );\n};\n\nexport const PropertyBadge: React.FC<PropertyBadgeProps> = ({ propertyType, className = \"\" }) => {\n  const getBadgeConfig = () => {\n    switch (propertyType) {\n      case \"priority\":\n        return {\n          label: \"Prioritaire\",\n          emoji: \"🔝\",\n          variant: \"default\" as const,\n          description: \"Super propriétaire\"\n        };\n      case \"best\":\n        return {\n          label: \"Best of\",\n          emoji: \"🌟\",\n          variant: \"default\" as const,\n          description: \"Meilleur avis\"\n        };\n      case \"new\":\n        return {\n          label: \"Nouveau\",\n          emoji: \"🆕\",\n          variant: \"secondary\" as const,\n          description: \"Moins de 7 jours\"\n        };\n      case \"editor\":\n        return {\n          label: \"Choix de la rédaction\",\n          emoji: \"📌\",\n          variant: \"outline\" as const,\n          description: \"Sélection manuelle\"\n        };\n      default:\n        return null;\n    }\n  };\n\n  const config = getBadgeConfig();\n  if (!config) return null;\n\n  return (\n    <Badge variant={config.variant} className={`text-xs flex items-center gap-1 ${className}`}>\n      <span>{config.emoji}</span>\n      <span>{config.label}</span>\n    </Badge>\n  );\n};\n\nexport const getPropertyBadgeType = (property: any): \"priority\" | \"best\" | \"new\" | \"editor\" | \"normal\" => {\n  // Propriété nouvelle (moins de 7 jours)\n  const createdDate = new Date(property.createdAt || Date.now());\n  const daysDiff = Math.floor((Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24));\n  \n  if (daysDiff <= 7) {\n    return \"new\";\n  }\n\n  // Best of (rating élevé)\n  if (property.rating >= 4.8 && property.reviews >= 10) {\n    return \"best\";\n  }\n\n  // Prioritaire (super propriétaire)\n  if (property.owner?.isVerified && property.owner?.rating >= 4.5) {\n    return \"priority\";\n  }\n\n  // Choix de la rédaction (flag spécial)\n  if (property.editorChoice) {\n    return \"editor\";\n  }\n\n  return \"normal\";\n};","size_bytes":4569},"client/src/components/FeaturesSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { \n  MapPin, \n  MessageSquare, \n  Shield, \n  Zap, \n  Users, \n  GraduationCap,\n  Search,\n  Heart,\n  Calendar,\n  Phone,\n  Star\n} from \"lucide-react\";\n\nconst FeaturesSection = () => {\n  const features = [\n    {\n      icon: MapPin,\n      title: \"Géolocalisation précise\",\n      description: \"Recherche dans un rayon de 1-5km avec clustering dynamique et repères locaux (universités, mosquées, cafés)\",\n      benefits: [\"📍 Me localiser\", \"🗺️ Carte interactive\", \"📍 Adresses précises\"],\n      color: \"text-primary\"\n    },\n    {\n      icon: MessageSquare,\n      title: \"Messagerie temps réel\",\n      description: \"Chat intégré avec notifications push personnalisées et historique des conversations\",\n      benefits: [\"💬 Chat en direct\", \"🔔 Notifications\", \"📱 SMS/Email\"],\n      color: \"text-secondary\"\n    },\n    {\n      icon: Shield,\n      title: \"Contrats sécurisés\",\n      description: \"Signature électronique, paiements D17/Flouci, et vérification d'identité CIN obligatoire\",\n      benefits: [\"✍️ Signature digitale\", \"💳 Paiement sécurisé\", \"🆔 Vérification CIN\"],\n      color: \"text-accent\"\n    },\n    {\n      icon: Zap,\n      title: \"Prix flexibles\",\n      description: \"Tarification jour/semaine/mois/année avec slider multi-échelle adapté à vos besoins\",\n      benefits: [\"📅 Tarifs flexibles\", \"💰 Prix transparent\", \"📊 Comparaison facile\"],\n      color: \"text-success\"\n    },\n    {\n      icon: GraduationCap,\n      title: \"Spécial étudiants\",\n      description: \"Filtres par université (ENSI, IHEC, Tunis El Manar), colocation possible, garantie parentale\",\n      benefits: [\"🎓 Proche universités\", \"👥 Colocation\", \"📋 Garantie parentale\"],\n      color: \"text-warning\"\n    },\n    {\n      icon: Users,\n      title: \"Family Friendly\",\n      description: \"Biens avec jardins sécurisés, proximité écoles/parcs, messagerie de groupe familiale\",\n      benefits: [\"🏡 Jardins sécurisés\", \"🏫 Proche écoles\", \"👨‍👩‍👧‍👦 Décisions familiales\"],\n      color: \"text-destructive\"\n    }\n  ];\n\n  const studentFeatures = [\n    { icon: Search, title: \"Recherche par université\", desc: \"ENSI, IHEC, Tunis El Manar...\" },\n    { icon: Users, title: \"Colocation\", desc: \"Partagez avec d'autres étudiants\" },\n    { icon: Shield, title: \"Garantie parentale\", desc: \"Sécurité pour les parents\" },\n    { icon: Zap, title: \"Internet inclus\", desc: \"WiFi haut débit garanti\" }\n  ];\n\n  const familyFeatures = [\n    { icon: Shield, title: \"Jardins sécurisés\", desc: \"Espaces verts protégés\" },\n    { icon: GraduationCap, title: \"Proche écoles\", desc: \"À pied des établissements\" },\n    { icon: Users, title: \"Messagerie groupe\", desc: \"Décisions collectives\" },\n    { icon: Heart, title: \"Espaces familiaux\", desc: \"Adapté aux enfants\" }\n  ];\n\n  return (\n    <div className=\"py-20 space-y-20\">\n      {/* Main Features */}\n      <section className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16 slide-up\">\n          <h2 className=\"text-3xl md:text-5xl font-bold mb-4\">\n            Une plateforme\n            <span className=\"block gradient-text\">intelligente & complète</span>\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Toutes les fonctionnalités pensées pour simplifier la location immobilière en Tunisie\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <div key={index} className=\"glass-card hover:scale-105 transition-all duration-300 group\">\n                <div className={`inline-flex p-3 rounded-xl bg-gradient-to-br from-primary/10 to-secondary/10 mb-4 ${feature.color}`}>\n                  <Icon className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-bold mb-3 group-hover:text-primary transition-colors\">\n                  {feature.title}\n                </h3>\n                <p className=\"text-muted-foreground mb-4 text-sm leading-relaxed\">\n                  {feature.description}\n                </p>\n                <div className=\"space-y-2\">\n                  {feature.benefits.map((benefit, idx) => (\n                    <div key={idx} className=\"text-xs bg-muted/50 rounded-lg px-3 py-2\">\n                      {benefit}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </section>\n\n      {/* Student Section */}\n      <section className=\"bg-gradient-to-r from-success/5 to-accent/5 py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div className=\"slide-up\">\n                <div className=\"inline-flex items-center gap-2 bg-success/10 text-success px-4 py-2 rounded-full text-sm font-semibold mb-6\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  Spécial Étudiants\n                </div>\n                <h3 className=\"text-3xl md:text-4xl font-bold mb-6\">\n                  Trouve ton studio près de ton\n                  <span className=\"block gradient-text\">université</span>\n                </h3>\n                <p className=\"text-muted-foreground mb-8 text-lg\">\n                  Recherche optimisée pour les étudiants tunisiens avec filtres spécialisés et géolocalisation précise\n                </p>\n                \n                <div className=\"space-y-4 mb-8\">\n                  {studentFeatures.map((item, idx) => {\n                    const Icon = item.icon;\n                    return (\n                      <div key={idx} className=\"flex items-start gap-4\">\n                        <div className=\"bg-success/10 p-2 rounded-lg\">\n                          <Icon className=\"h-5 w-5 text-success\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{item.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{item.desc}</p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                <Button variant=\"success\" size=\"lg\">\n                  <GraduationCap className=\"h-5 w-5 mr-2\" />\n                  Rechercher pour étudiants\n                </Button>\n              </div>\n              \n              <div className=\"glass-card bg-gradient-to-br from-success/10 to-transparent\">\n                <div className=\"space-y-4\">\n                  <div className=\"border-l-4 border-success pl-4\">\n                    <h4 className=\"font-bold text-success\">Exemple: Studio ENSI</h4>\n                    <p className=\"text-sm text-muted-foreground\">200m de l'ENSI, 5min à pied 🚶‍♂️</p>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-semibold\">Prix:</span>\n                      <p>400 TND/mois</p>\n                    </div>\n                    <div>\n                      <span className=\"font-semibold\">Inclus:</span>\n                      <p>Wi-Fi, Clim, Électricité</p>\n                    </div>\n                    <div>\n                      <span className=\"font-semibold\">Colocation:</span>\n                      <p>✅ 2 personnes max</p>\n                    </div>\n                    <div>\n                      <span className=\"font-semibold\">Transport:</span>\n                      <p>Bus direct campus</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Family Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div className=\"glass-card bg-gradient-to-br from-accent/10 to-transparent lg:order-2\">\n                <div className=\"space-y-4\">\n                  <div className=\"border-l-4 border-accent pl-4\">\n                    <h4 className=\"font-bold text-accent\">Exemple: Villa Sidi Bou Saïd</h4>\n                    <p className=\"text-sm text-muted-foreground\">4 pièces, jardin sécurisé, proche école 🏫</p>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-semibold\">Surface:</span>\n                      <p>120m² + jardin</p>\n                    </div>\n                    <div>\n                      <span className=\"font-semibold\">Sécurité:</span>\n                      <p>Gardien 24h/24</p>\n                    </div>\n                    <div>\n                      <span className=\"font-semibold\">École:</span>\n                      <p>300m École Primaire</p>\n                    </div>\n                    <div>\n                      <span className=\"font-semibold\">Loisirs:</span>\n                      <p>Parc public 200m</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"slide-up lg:order-1\">\n                <div className=\"inline-flex items-center gap-2 bg-accent/10 text-accent px-4 py-2 rounded-full text-sm font-semibold mb-6\">\n                  <Users className=\"h-4 w-4\" />\n                  Spécial Familles\n                </div>\n                <h3 className=\"text-3xl md:text-4xl font-bold mb-6\">\n                  Un foyer sûr pour votre\n                  <span className=\"block gradient-text\">famille</span>\n                </h3>\n                <p className=\"text-muted-foreground mb-8 text-lg\">\n                  Biens sélectionnés avec critères familiaux : sécurité, proximité écoles et espaces verts\n                </p>\n                \n                <div className=\"space-y-4 mb-8\">\n                  {familyFeatures.map((item, idx) => {\n                    const Icon = item.icon;\n                    return (\n                      <div key={idx} className=\"flex items-start gap-4\">\n                        <div className=\"bg-accent/10 p-2 rounded-lg\">\n                          <Icon className=\"h-5 w-5 text-accent\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold\">{item.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{item.desc}</p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                <Button variant=\"accent\" size=\"lg\">\n                  <Users className=\"h-5 w-5 mr-2\" />\n                  Rechercher pour familles\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-4\">\n        <div className=\"glass-card bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 text-center max-w-4xl mx-auto\">\n          <h3 className=\"text-2xl md:text-3xl font-bold mb-4\">\n            Prêt à trouver votre prochain chez-vous ?\n          </h3>\n          <p className=\"text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Rejoignez des milliers d'étudiants et familles qui ont trouvé leur logement idéal sur Ekrili\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button variant=\"default\" size=\"lg\" className=\"flex items-center gap-2\">\n              <Search className=\"h-5 w-5\" />\n              Commencer ma recherche\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"flex items-center gap-2\">\n              <Heart className=\"h-5 w-5\" />\n              Voir les biens populaires\n            </Button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default FeaturesSection;","size_bytes":12232},"client/src/components/Footer.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { MapPin, Mail, Phone, Facebook, Instagram, Twitter, Linkedin } from \"lucide-react\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"glass border-t border-white/10 mt-20\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Brand */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"gradient-button p-2 rounded-xl\">\n                <MapPin className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-2xl font-bold gradient-text\">\n                  Ekrili\n                </h3>\n                <p className=\"text-xs text-muted-foreground\">\n                  Location intelligente\n                </p>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground max-w-xs\">\n              La première plateforme de location intelligente adaptée aux étudiants et familles tunisiennes.\n            </p>\n            <div className=\"flex space-x-3\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-primary\">\n                <Facebook className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-primary\">\n                <Instagram className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-primary\">\n                <Twitter className=\"h-5 w-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover:text-primary\">\n                <Linkedin className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* For Tenants */}\n          <div>\n            <h4 className=\"text-lg font-bold mb-4 text-primary\">\n              Locataires\n            </h4>\n            <ul className=\"space-y-3 text-sm\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Rechercher un bien</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Espace étudiant</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Espace famille</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Mes favoris ❤️</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Contrats signés</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Messagerie</a></li>\n            </ul>\n          </div>\n\n          {/* For Owners */}\n          <div>\n            <h4 className=\"text-lg font-bold mb-4 text-secondary\">\n              Propriétaires\n            </h4>\n            <ul className=\"space-y-3 text-sm\">\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-secondary transition-colors\">Publier une annonce</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-secondary transition-colors\">Tableau de bord</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-secondary transition-colors\">Gestion contrats</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-secondary transition-colors\">Suivi paiements</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-secondary transition-colors\">Statistiques 📊</a></li>\n              <li><a href=\"#\" className=\"text-muted-foreground hover:text-secondary transition-colors\">Badge \"Super Hôte\" 🚀</a></li>\n            </ul>\n          </div>\n\n          {/* Contact & Support */}\n          <div>\n            <h4 className=\"text-lg font-bold mb-4 text-accent\">\n              Support\n            </h4>\n            <div className=\"space-y-3 text-sm\">\n              <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                <Mail className=\"h-4 w-4 text-accent\" />\n                <span>contact@ekrili.tn</span>\n              </div>\n              <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                <Phone className=\"h-4 w-4 text-accent\" />\n                <span>+216 XX XXX XXX</span>\n              </div>\n              <div className=\"flex items-center space-x-3 text-muted-foreground\">\n                <MapPin className=\"h-4 w-4 text-accent\" />\n                <span>Tunis, Tunisie 🇹🇳</span>\n              </div>\n            </div>\n            \n            <div className=\"mt-6\">\n              <h5 className=\"font-semibold mb-2 text-accent\">Support 24/7</h5>\n              <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Centre d'aide</a></li>\n                <li><a href=\"#\" className=\"hover:text-accent transition-colors\">FAQ</a></li>\n                <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Chat en direct</a></li>\n                <li><a href=\"#\" className=\"hover:text-accent transition-colors\">Signaler un problème</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Features Summary */}\n        <div className=\"mt-12 pt-8 border-t border-white/10\">\n          <div className=\"grid md:grid-cols-3 gap-6 text-center\">\n            <div className=\"glass-card\">\n              <h5 className=\"font-bold text-primary mb-2\">🔍 Recherche intelligente</h5>\n              <p className=\"text-xs text-muted-foreground\">Géolocalisation précise + IA</p>\n            </div>\n            <div className=\"glass-card\">\n              <h5 className=\"font-bold text-secondary mb-2\">💬 Messagerie intégrée</h5>\n              <p className=\"text-xs text-muted-foreground\">Chat temps réel + notifications</p>\n            </div>\n            <div className=\"glass-card\">\n              <h5 className=\"font-bold text-accent mb-2\">🛡️ Paiements sécurisés</h5>\n              <p className=\"text-xs text-muted-foreground\">D17, Flouci + signature digitale</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"mt-12 pt-8 border-t border-white/10\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            <p className=\"text-sm text-muted-foreground\">\n              © 2024 Ekrili. Tous droits réservés. 🇹🇳 Fièrement tunisien.\n            </p>\n            <div className=\"flex space-x-6 text-sm\">\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Conditions d'utilisation</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Confidentialité</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Cookies</a>\n              <a href=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Accessibilité</a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":7287},"client/src/components/Header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Menu, Bell, Heart, User, Search, LogOut, Home, Settings, FileText } from \"lucide-react\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { TenantRequestsDropdown } from \"./TenantRequestsDropdown\";\n\nconst Header = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userType, setUserType] = useState(\"\");\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    const updateUserState = () => {\n      const authStatus = localStorage.getItem(\"isAuthenticated\");\n      const userData = localStorage.getItem(\"userData\");\n      const userType = localStorage.getItem(\"userType\");\n      \n      console.log(\"Header auth check:\", { authStatus, userData: !!userData, userType });\n      \n      if (authStatus && userData && userType) {\n        try {\n          const user = JSON.parse(userData);\n          setIsAuthenticated(true);\n          setUserEmail(user.email || user.username || \"\");\n          setUserType(userType);\n          console.log(\"Header: Set user type to:\", userType, \"with user ID:\", user.id);\n        } catch (error) {\n          console.error(\"Error parsing user data:\", error);\n          setIsAuthenticated(false);\n          setUserEmail(\"\");\n          setUserType(\"\");\n        }\n      } else {\n        setIsAuthenticated(false);\n        setUserEmail(\"\");\n        setUserType(\"\");\n      }\n    };\n\n    // Initial load\n    updateUserState();\n\n    // Listen for storage changes\n    window.addEventListener('storage', updateUserState);\n    window.addEventListener('focus', updateUserState);\n    \n    // Check for changes every second (since localStorage changes in same tab don't trigger storage event)\n    const interval = setInterval(updateUserState, 1000);\n\n    return () => {\n      window.removeEventListener('storage', updateUserState);\n      window.removeEventListener('focus', updateUserState);\n      clearInterval(interval);\n    };\n  }, []);\n\n  const handleLogout = () => {\n    // Clear all authentication data\n    localStorage.removeItem(\"isAuthenticated\");\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"userData\");\n    localStorage.removeItem(\"userType\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"userEmail\");\n    localStorage.removeItem(\"userProfile\");\n    localStorage.removeItem(\"user\");\n    localStorage.clear(); // Ensure everything is cleared\n    \n    setIsAuthenticated(false);\n    setUserEmail(\"\");\n    setUserType(\"\");\n    \n    console.log(\"Logout: Cleared all localStorage and state\");\n    navigate(\"/login\");\n  };\n\n\n\n\n\n  return (\n    <header className=\"glass sticky top-0 z-50 border-b border-white/10\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <Link to=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"gradient-button p-2 rounded-xl\">\n              <MapPin className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold gradient-text\">\n                Ekrili\n              </h1>\n              <p className=\"text-xs text-muted-foreground hidden sm:block\">\n                Location intelligente\n              </p>\n            </div>\n          </Link>\n\n          {/* Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-6\">\n            <Link to=\"/search\" className=\"text-foreground hover:text-primary transition-colors font-medium\">\n              Découvrir\n            </Link>\n            <Link to=\"/search?filter=student\" className=\"text-foreground hover:text-primary transition-colors font-medium\">\n              Pour étudiants\n            </Link>\n            <Link to=\"/search?filter=family\" className=\"text-foreground hover:text-primary transition-colors font-medium\">\n              Pour familles\n            </Link>\n            {(userType === \"owner\" || !isAuthenticated) && (\n              <Link to=\"/dashboard\" className=\"text-foreground hover:text-primary transition-colors font-medium\">\n                Louer mon bien\n              </Link>\n            )}\n          </nav>\n\n          {/* User Actions */}\n          <div className=\"flex items-center space-x-3\">\n            {isAuthenticated && (\n              <>\n                {/* Tenant Requests Dropdown for tenants only */}\n                {userType === \"tenant\" && (() => {\n                  const userData = localStorage.getItem(\"userData\");\n                  const userId = userData ? JSON.parse(userData).id : 7;\n                  console.log(\"Header: Rendering TenantRequestsDropdown for userId:\", userId, \"userType:\", userType);\n                  return (\n                    <TenantRequestsDropdown \n                      userId={userId} \n                      userType={userType} \n                    />\n                  );\n                })()}\n                \n                {/* Notifications */}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"hidden md:flex relative\"\n                  onClick={() => navigate(\"/notifications\")}\n                >\n                  <Bell className=\"h-5 w-5\" />\n                  <span className=\"absolute -top-1 -right-1 h-3 w-3 bg-primary rounded-full text-xs\"></span>\n                </Button>\n                \n                {/* Favorites */}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"hidden md:flex\"\n                  onClick={() => navigate(\"/favorites\")}\n                >\n                  <Heart className=\"h-5 w-5\" />\n                </Button>\n\n                {/* Messages */}\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\" \n                  className=\"hidden md:flex\"\n                  onClick={() => navigate(\"/messages\")}\n                >\n                  <svg className=\"h-5 w-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\" />\n                  </svg>\n                </Button>\n              </>\n            )}\n\n            {/* Search on mobile */}\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              className=\"md:hidden\"\n              onClick={() => navigate(\"/search\")}\n            >\n              <Search className=\"h-5 w-5\" />\n            </Button>\n\n            {/* Auth Buttons / User Menu */}\n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-10 w-10 rounded-full\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>\n                        {userEmail.substring(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <div className=\"flex flex-col space-y-1 p-2\">\n                    <p className=\"text-sm font-medium leading-none\">{userEmail}</p>\n                    <p className=\"text-xs leading-none text-muted-foreground\">\n                      {localStorage.getItem(\"userType\") || \"utilisateur\"}\n                    </p>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={() => navigate(\"/dashboard\")}>\n                    Dashboard\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => navigate(\"/search\")}>\n                    Rechercher\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => navigate(\"/messages\")}>\n                    Messages\n                  </DropdownMenuItem>\n                   <DropdownMenuItem onClick={() => navigate(\"/favorites\")}>\n                     Favoris\n                   </DropdownMenuItem>\n                   <DropdownMenuItem onClick={() => navigate(\"/offers\")}>\n                     <FileText className=\"mr-2 h-4 w-4\" />\n                     {userType === \"owner\" ? \"Mes offres reçues\" : \"Mes offres envoyées\"}\n                   </DropdownMenuItem>\n                   {userType === \"owner\" && (\n                     <>\n                       <DropdownMenuItem onClick={() => navigate(\"/add-property\")}>\n                         <Home className=\"mr-2 h-4 w-4\" />\n                         Louer mon bien\n                       </DropdownMenuItem>\n                       <DropdownMenuItem onClick={() => navigate(\"/manage-properties\")}>\n                         <Settings className=\"mr-2 h-4 w-4\" />\n                         Gérer mes biens\n                       </DropdownMenuItem>\n                       <DropdownMenuItem onClick={() => navigate(\"/contracts\")}>\n                         <FileText className=\"mr-2 h-4 w-4\" />\n                         Contrats\n                       </DropdownMenuItem>\n                     </>\n                   )}\n                   {userType === \"tenant\" && (\n                     <DropdownMenuItem onClick={() => navigate(\"/contracts\")}>\n                       <FileText className=\"mr-2 h-4 w-4\" />\n                       Mes contrats\n                     </DropdownMenuItem>\n                   )}\n                   <DropdownMenuItem onClick={() => navigate(\"/notifications\")}>\n                     <Bell className=\"mr-2 h-4 w-4\" />\n                     Notifications\n                   </DropdownMenuItem>\n                   <DropdownMenuItem onClick={() => navigate(\"/profile\")}>\n                     <User className=\"mr-2 h-4 w-4\" />\n                     Mon profil\n                   </DropdownMenuItem>\n\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout}>\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Déconnexion\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate(\"/login\")}>\n                  Connexion\n                </Button>\n                <Button variant=\"default\" size=\"sm\" onClick={() => navigate(\"/signup\")}>\n                  S'inscrire\n                </Button>\n              </div>\n            )}\n\n            {/* Mobile Menu */}\n            <Button variant=\"ghost\" size=\"icon\" className=\"lg:hidden\">\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;","size_bytes":11292},"client/src/components/HeroSection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { MapPin, Search, Users, GraduationCap, Sliders, Filter } from \"lucide-react\";\nimport heroImage from \"@/assets/hero-tunisia-modern.jpg\";\n\nconst HeroSection = () => {\n  const [activeUserType, setActiveUserType] = useState<\"student\" | \"family\" | null>(null);\n  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);\n\n  return (\n    <section className=\"relative min-h-[80vh] overflow-hidden\">\n      {/* Background with Overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-secondary/10 to-accent/20\" />\n      \n      {/* Floating Elements */}\n      <div className=\"absolute top-20 right-10 w-32 h-32 bg-primary/20 rounded-full blur-3xl floating-element hidden lg:block\" />\n      <div className=\"absolute bottom-20 left-10 w-40 h-40 bg-secondary/20 rounded-full blur-3xl floating-element animation-delay-2000 hidden lg:block\" />\n\n      <div className=\"relative container mx-auto px-4 py-20\">\n        <div className=\"max-w-5xl mx-auto text-center slide-up\">\n          {/* Main Headline */}\n          <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight\">\n            Trouvez votre\n            <span className=\"block gradient-text\">chez-vous parfait</span>\n            <span className=\"block text-secondary\">en Tunisie</span>\n          </h1>\n\n          {/* Subtitle */}\n          <p className=\"text-lg md:text-xl mb-8 text-muted-foreground max-w-2xl mx-auto\">\n            La première plateforme de location intelligente adaptée aux étudiants et familles tunisiennes\n          </p>\n\n          {/* User Type Selection */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n            <Button \n              variant={activeUserType === \"student\" ? \"success\" : \"glass\"} \n              size=\"lg\" \n              className=\"flex items-center gap-3\"\n              onClick={() => setActiveUserType(activeUserType === \"student\" ? null : \"student\")}\n            >\n              <GraduationCap className=\"h-5 w-5\" />\n              Je suis étudiant\n            </Button>\n            <Button \n              variant={activeUserType === \"family\" ? \"accent\" : \"glass\"} \n              size=\"lg\" \n              className=\"flex items-center gap-3\"\n              onClick={() => setActiveUserType(activeUserType === \"family\" ? null : \"family\")}\n            >\n              <Users className=\"h-5 w-5\" />\n              Je suis une famille\n            </Button>\n          </div>\n\n          {/* Search Section */}\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"glass-card\">\n              {/* Main Search Bar */}\n              <div className=\"flex flex-col lg:flex-row gap-4 mb-4\">\n                <div className=\"flex-1\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Où cherchez-vous ? (ex: Ariana, Tunis, Sousse...)\"\n                    className=\"glass-input w-full text-base\"\n                  />\n                </div>\n                \n                {/* Price Range */}\n                <div className=\"lg:w-48\">\n                  <select className=\"glass-input w-full text-base\">\n                    <option>Prix max</option>\n                    <option>300 TND/mois</option>\n                    <option>500 TND/mois</option>\n                    <option>800 TND/mois</option>\n                    <option>1200 TND/mois</option>\n                    <option>2000+ TND/mois</option>\n                  </select>\n                </div>\n\n                <Button \n                  variant=\"default\" \n                  size=\"lg\" \n                  className=\"lg:w-auto\"\n                  onClick={() => {\n                    const isAuth = localStorage.getItem(\"isAuthenticated\");\n                    if (isAuth) {\n                      window.location.href = \"/search\";\n                    } else {\n                      window.location.href = \"/login\";\n                    }\n                  }}\n                >\n                  <Search className=\"h-5 w-5 mr-2\" />\n                  Rechercher\n                </Button>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"flex flex-wrap gap-3 pt-4 border-t border-white/10\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"flex items-center gap-2\"\n                  onClick={() => navigator.geolocation?.getCurrentPosition(() => {\n                    // Géolocalisation logic\n                    console.log(\"Géolocalisation activée\");\n                  })}\n                >\n                  <MapPin className=\"h-4 w-4\" />\n                  📍 Me localiser\n                </Button>\n                \n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Filter className=\"h-4 w-4\" />\n                  Filtres avancés\n                </Button>\n\n                {activeUserType === \"student\" && (\n                  <Button variant=\"success\" size=\"sm\">\n                    🎓 Proche de mon université\n                  </Button>\n                )}\n\n                {activeUserType === \"family\" && (\n                  <Button variant=\"accent\" size=\"sm\">\n                    👨‍👩‍👧‍👦 Family Friendly\n                  </Button>\n                )}\n              </div>\n\n              {/* Advanced Filters */}\n              {showAdvancedFilters && (\n                <div className=\"mt-4 pt-4 border-t border-white/10 grid md:grid-cols-3 gap-4 slide-up\">\n                  <select className=\"glass-input\">\n                    <option>Type de bien</option>\n                    <option>Studio</option>\n                    <option>Appartement</option>\n                    <option>Maison</option>\n                    <option>Villa</option>\n                  </select>\n                  \n                  <select className=\"glass-input\">\n                    <option>Durée</option>\n                    <option>Court terme (jour/semaine)</option>\n                    <option>Moyen terme (mois)</option>\n                    <option>Long terme (année)</option>\n                  </select>\n                  \n                  <select className=\"glass-input\">\n                    <option>Équipements</option>\n                    <option>Meublé</option>\n                    <option>Internet inclus</option>\n                    <option>Parking</option>\n                    <option>Climatisation</option>\n                  </select>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* CTA Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n            <Button \n              size=\"lg\" \n              className=\"hero-button\"\n              onClick={() => {\n                const isAuth = localStorage.getItem(\"isAuthenticated\");\n                if (isAuth) {\n                  window.location.href = \"/search\";\n                } else {\n                  window.location.href = \"/login\";\n                }\n              }}\n            >\n              Découvrir les biens\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\" \n              className=\"hero-button-outline\"\n              onClick={() => {\n                const isAuth = localStorage.getItem(\"isAuthenticated\");\n                if (isAuth) {\n                  window.location.href = \"/add-property\";\n                } else {\n                  window.location.href = \"/login\";\n                }\n              }}\n            >\n              Louer mon bien\n            </Button>\n          </div>\n\n          {/* Stats */}\n          <div className=\"mt-16 grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div className=\"glass-card text-center\">\n              <div className=\"text-3xl font-bold gradient-text\">2,500+</div>\n              <div className=\"text-sm text-muted-foreground\">Biens disponibles</div>\n            </div>\n            <div className=\"glass-card text-center\">\n              <div className=\"text-3xl font-bold text-secondary\">24</div>\n              <div className=\"text-sm text-muted-foreground\">Gouvernorats</div>\n            </div>\n            <div className=\"glass-card text-center\">\n              <div className=\"text-3xl font-bold text-accent\">15,000+</div>\n              <div className=\"text-sm text-muted-foreground\">Étudiants inscrits</div>\n            </div>\n            <div className=\"glass-card text-center\">\n              <div className=\"text-3xl font-bold text-success\">24/7</div>\n              <div className=\"text-sm text-muted-foreground\">Support client</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default HeroSection;","size_bytes":9148},"client/src/components/MessagingInterface.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Send, Upload, Image, FileText } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: number;\n  sender: string;\n  content: string;\n  timestamp: string;\n  type: 'text' | 'image' | 'file';\n  fileName?: string;\n}\n\ninterface MessagingInterfaceProps {\n  contactName: string;\n  messages: Message[];\n  onSendMessage: (message: Omit<Message, 'id' | 'timestamp'>) => void;\n}\n\nconst MessagingInterface = ({ contactName, messages, onSendMessage }: MessagingInterfaceProps) => {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const currentUser = localStorage.getItem(\"userEmail\") || \"Vous\";\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim()) return;\n\n    onSendMessage({\n      sender: currentUser,\n      content: newMessage,\n      type: 'text'\n    });\n\n    setNewMessage(\"\");\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Mock file upload\n    const isImage = file.type.startsWith('image/');\n    \n    onSendMessage({\n      sender: currentUser,\n      content: `${file.name} (${(file.size / 1024).toFixed(1)} KB)`,\n      type: isImage ? 'image' : 'file',\n      fileName: file.name\n    });\n\n    toast({\n      title: \"Fichier envoyé\",\n      description: `${file.name} a été envoyé avec succès`,\n    });\n\n    // Reset file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Card className=\"glass-card h-96 flex flex-col\">\n      <CardHeader className=\"flex-shrink-0\">\n        <CardTitle className=\"text-lg\">\n          Conversation avec {contactName}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex flex-col p-0\">\n        {/* Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${\n                message.sender === currentUser ? 'justify-end' : 'justify-start'\n              }`}\n            >\n              <div\n                className={`max-w-xs lg:max-w-md px-3 py-2 rounded-lg ${\n                  message.sender === currentUser\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-secondary text-secondary-foreground'\n                }`}\n              >\n                {message.type === 'image' && (\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <Image className=\"h-4 w-4\" />\n                    <span className=\"text-xs\">Image</span>\n                  </div>\n                )}\n                {message.type === 'file' && (\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <FileText className=\"h-4 w-4\" />\n                    <span className=\"text-xs\">Fichier</span>\n                  </div>\n                )}\n                <p className=\"text-sm\">{message.content}</p>\n                <p className=\"text-xs opacity-70 mt-1\">\n                  {new Date(message.timestamp).toLocaleTimeString('fr-FR', {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </p>\n              </div>\n            </div>\n          ))}\n          \n          {messages.length === 0 && (\n            <div className=\"text-center text-muted-foreground py-8\">\n              <p>Aucun message pour le moment</p>\n              <p className=\"text-sm\">Commencez la conversation !</p>\n            </div>\n          )}\n        </div>\n\n        {/* Message Input */}\n        <div className=\"p-4 border-t border-border/50\">\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileUpload}\n              accept=\"image/*,.pdf,.doc,.docx\"\n              className=\"hidden\"\n            />\n            \n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => fileInputRef.current?.click()}\n            >\n              <Upload className=\"h-4 w-4\" />\n            </Button>\n\n            <Input\n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Tapez votre message...\"\n              className=\"flex-1\"\n            />\n\n            <Button onClick={handleSendMessage} disabled={!newMessage.trim()}>\n              <Send className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MessagingInterface;","size_bytes":5157},"client/src/components/PropertyReviews.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Star, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\ninterface PropertyReviewsProps {\n  propertyId: number;\n}\n\nconst PropertyReviews = ({ propertyId }: PropertyReviewsProps) => {\n  const [newReview, setNewReview] = useState(\"\");\n  const [newRating, setNewRating] = useState(0);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch reviews from database\n  const { data: reviews = [], isLoading } = useQuery({\n    queryKey: [`/api/properties/${propertyId}/reviews`],\n    queryFn: () => fetch(`/api/properties/${propertyId}/reviews`).then(res => res.json()),\n  });\n\n  // Create review mutation\n  const createReview = useMutation({\n    mutationFn: async (reviewData: any) => {\n      return await apiRequest(\"/api/reviews\", {\n        method: \"POST\",\n        body: JSON.stringify(reviewData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/properties/${propertyId}/reviews`] });\n      setNewReview(\"\");\n      setNewRating(0);\n      toast({\n        title: \"Avis publié\",\n        description: \"Votre avis a été publié avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de publier l'avis\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const averageRating = reviews.length > 0 ? reviews.reduce((sum: number, review: any) => sum + review.rating, 0) / reviews.length : 0;\n\n  const handleSubmitReview = () => {\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      toast({\n        title: \"Connexion requise\",\n        description: \"Connectez-vous pour laisser un avis\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (!newReview.trim() || newRating === 0) {\n      toast({\n        title: \"Informations manquantes\",\n        description: \"Veuillez donner une note et écrire un commentaire\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const currentUser = JSON.parse(localStorage.getItem(\"user\") || '{\"id\": 1}');\n    const reviewData = {\n      propertyId: propertyId,\n      userId: currentUser.id,\n      rating: newRating,\n      comment: newReview.trim()\n    };\n\n    createReview.mutate(reviewData);\n  };\n\n  const renderStars = (rating: number, interactive = false, onRate?: (rating: number) => void) => {\n    return (\n      <div className=\"flex space-x-1\">\n        {[1, 2, 3, 4, 5].map((star) => (\n          <Star\n            key={star}\n            className={`h-4 w-4 ${\n              star <= rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'\n            } ${interactive ? 'cursor-pointer hover:fill-yellow-400 hover:text-yellow-400' : ''}`}\n            onClick={() => interactive && onRate && onRate(star)}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass-card\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p>Chargement des avis...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Avis et commentaires</span>\n          <div className=\"flex items-center space-x-2\">\n            {renderStars(Math.round(averageRating))}\n            <span className=\"text-sm text-muted-foreground\">\n              ({reviews.length} avis)\n            </span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Add Review */}\n        <div className=\"glass-card p-4 space-y-4\">\n          <h4 className=\"font-medium\">Laisser un avis</h4>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Note</label>\n            {renderStars(newRating, true, setNewRating)}\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Commentaire (optionnel)</label>\n            <Textarea\n              value={newReview}\n              onChange={(e) => setNewReview(e.target.value)}\n              placeholder=\"Partagez votre expérience avec cette propriété...\"\n              rows={3}\n            />\n          </div>\n          <Button \n            onClick={handleSubmitReview} \n            className=\"w-full\"\n            disabled={createReview.isPending || newRating === 0}\n          >\n            {createReview.isPending ? \"Publication...\" : \"Publier l'avis\"}\n          </Button>\n        </div>\n\n        {/* Reviews List */}\n        <div className=\"space-y-4\">\n          {reviews.map((review: any) => (\n            <div key={review.id} className=\"border-b border-border/50 pb-4 last:border-b-0\">\n              <div className=\"flex items-start justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <User className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium text-sm\">Utilisateur #{review.userId}</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {renderStars(review.rating)}\n                  <span className=\"text-xs text-muted-foreground\">\n                    {format(new Date(review.createdAt), \"dd MMM yyyy\", { locale: fr })}\n                  </span>\n                </div>\n              </div>\n              {review.comment && (\n                <p className=\"text-sm text-muted-foreground\">{review.comment}</p>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {reviews.length === 0 && (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Aucun avis pour le moment</p>\n            <p className=\"text-sm text-muted-foreground\">Soyez le premier à laisser un avis!</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PropertyReviews;","size_bytes":6471},"client/src/components/RecentProperties.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Clock, \n  MapPin, \n  Star, \n  Heart,\n  Eye\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst RecentProperties = () => {\n  const [, navigate] = useLocation();\n\n  // Mock recent properties (last 7 days)\n  const recentProperties = [\n    {\n      id: 1,\n      title: \"Studio moderne près INSAT\",\n      price: 450,\n      location: \"Ariana, Raoued\",\n      rating: 4.8,\n      reviews: 24,\n      daysAgo: 2,\n      image: \"/placeholder.svg\",\n      badge: \"🆕\"\n    },\n    {\n      id: 2,\n      title: \"Appartement 2 pièces meublé\",\n      price: 680,\n      location: \"Tunis, Manouba\",\n      rating: 4.5,\n      reviews: 18,\n      daysAgo: 4,\n      image: \"/placeholder.svg\",\n      badge: \"🆕\"\n    },\n    {\n      id: 3,\n      title: \"Villa avec jardin\",\n      price: 1200,\n      location: \"Sidi Bou Saïd\",\n      rating: 4.9,\n      reviews: 31,\n      daysAgo: 6,\n      image: \"/placeholder.svg\",\n      badge: \"🆕\"\n    }\n  ];\n\n  const handleFavorite = (propertyId: number) => {\n    // Handle favorite functionality\n  };\n\n  return (\n    <Card className=\"glass-card\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <Clock className=\"h-5 w-5 text-primary\" />\n          <span>Biens récemment ajoutés</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {recentProperties.map((property) => (\n            <div\n              key={property.id}\n              className=\"flex items-start space-x-4 p-4 glass-card rounded-lg hover:border-primary/50 transition-colors cursor-pointer\"\n              onClick={() => navigate(`/property/${property.id}`)}\n            >\n              <div className=\"w-20 h-20 bg-muted rounded-lg flex items-center justify-center flex-shrink-0\">\n                <div className=\"text-center\">\n                  <span className=\"text-2xl\">🏠</span>\n                </div>\n              </div>\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-medium text-sm line-clamp-2\">{property.title}</h3>\n                    <div className=\"flex items-center text-muted-foreground text-xs mt-1\">\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                      <span>{property.location}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Star className=\"h-3 w-3 fill-warning text-warning\" />\n                        <span className=\"text-xs\">{property.rating}</span>\n                        <span className=\"text-xs text-muted-foreground\">({property.reviews})</span>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <span className=\"mr-1\">{property.badge}</span>\n                        il y a {property.daysAgo} jour{property.daysAgo > 1 ? 's' : ''}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <p className=\"font-semibold text-primary\">{property.price} TND</p>\n                    <p className=\"text-xs text-muted-foreground\">par mois</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col space-y-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleFavorite(property.id);\n                  }}\n                >\n                  <Heart className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    navigate(`/property/${property.id}`);\n                  }}\n                >\n                  <Eye className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <Button \n          variant=\"outline\" \n          className=\"w-full mt-4\"\n          onClick={() => navigate(\"/search?filter=recent\")}\n        >\n          Voir tous les biens récents\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default RecentProperties;","size_bytes":4708},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 0, // Always consider data stale\n      gcTime: 0, // Don't cache queries\n      refetchOnWindowFocus: false,\n      retry: 1,\n    },\n  },\n});\n\n// Default fetcher function for react-query with authentication\nexport const apiRequest = async (url: string, options?: RequestInit) => {\n  console.log(\"API Request:\", url, options);\n  \n  // Get auth token from localStorage\n  const authToken = localStorage.getItem(\"authToken\");\n  \n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(authToken && { 'Authorization': `Bearer ${authToken}` }),\n      ...options?.headers,\n    },\n  });\n\n  console.log(\"API Response:\", response.status, response.statusText);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(\"API Error Response:\", errorText);\n    throw new Error(`Request failed: ${response.statusText} - ${errorText}`);\n  }\n\n  const data = await response.json();\n  console.log(\"API Response Data:\", data);\n  return data;\n};","size_bytes":1168},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AddProperty.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Home, \n  MapPin, \n  Upload, \n  Plus, \n  X,\n  Wifi,\n  Car,\n  Bed,\n  Bath,\n  Square\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst AddProperty = () => {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    type: \"\",\n    description: \"\",\n    price: \"\",\n    priceType: \"mois\",\n    surface: \"\",\n    rooms: \"\",\n    bathrooms: \"\",\n    address: \"\",\n    location: { lat: 0, lng: 0 },\n    amenities: [] as string[],\n    rules: [] as string[],\n    images: [] as File[],\n    availability: {\n      available: true,\n      availableFrom: \"\",\n      minimumStay: \"\",\n      maximumStay: \"\"\n    },\n        pricing: {\n          deposit: \"\",\n          fees: \"\",\n          utilities: \"\",\n          utilitiesIncluded: false\n        }\n  });\n\n  const [newRule, setNewRule] = useState(\"\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Check if user is authenticated and is an owner\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    const userType = localStorage.getItem(\"userType\");\n    \n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n    \n    if (userType !== \"owner\") {\n      toast({\n        title: \"Accès refusé\",\n        description: \"Seuls les propriétaires peuvent ajouter des biens\",\n        variant: \"destructive\",\n      });\n      navigate(\"/dashboard\");\n      return;\n    }\n  }, [navigate, toast]);\n\n  const availableAmenities = [\n    { id: \"wifi\", label: \"Wi-Fi gratuit\", icon: <Wifi className=\"h-4 w-4\" /> },\n    { id: \"furnished\", label: \"Meublé\", icon: <Home className=\"h-4 w-4\" /> },\n    { id: \"parking\", label: \"Parking\", icon: <Car className=\"h-4 w-4\" /> },\n    { id: \"AC\", label: \"Climatisation\", icon: <span>❄️</span> },\n    { id: \"washing_machine\", label: \"Lave-linge\", icon: <span>🫧</span> },\n    { id: \"garden\", label: \"Jardin\", icon: <span>🌿</span> },\n    { id: \"security\", label: \"Sécurité\", icon: <span>🔒</span> },\n    { id: \"elevator\", label: \"Ascenseur\", icon: <span>🛗</span> },\n    { id: \"balcony\", label: \"Balcon\", icon: <span>🏠</span> },\n    { id: \"kitchen\", label: \"Cuisine équipée\", icon: <span>🍳</span> }\n  ];\n\n  const propertyTypes = [\n    { value: \"studio\", label: \"Studio\" },\n    { value: \"apartment\", label: \"Appartement\" },\n    { value: \"villa\", label: \"Villa\" },\n    { value: \"house\", label: \"Maison\" },\n    { value: \"vacation\", label: \"Maison de vacances\" },\n    { value: \"room\", label: \"Chambre\" },\n    { value: \"office\", label: \"Bureau\" },\n    { value: \"shop\", label: \"Local commercial\" }\n  ];\n\n  const handleInputChange = (field: string, value: any) => {\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      setFormData(prev => ({\n        ...prev,\n        [parent]: {\n          ...(prev[parent as keyof typeof prev] as any),\n          [child]: value\n        }\n      }));\n    } else {\n      setFormData(prev => ({ ...prev, [field]: value }));\n    }\n  };\n\n  const toggleAmenity = (amenityId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      amenities: prev.amenities.includes(amenityId)\n        ? prev.amenities.filter(a => a !== amenityId)\n        : [...prev.amenities, amenityId]\n    }));\n  };\n\n  const addRule = () => {\n    if (newRule.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        rules: [...prev.rules, newRule.trim()]\n      }));\n      setNewRule(\"\");\n    }\n  };\n\n  const removeRule = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      rules: prev.rules.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setFormData(prev => ({\n      ...prev,\n      images: [...prev.images, ...files].slice(0, 10) // Max 10 images\n    }));\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleLocationClick = () => {\n    // Mock location picker - in real app would open map\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          handleInputChange('location', {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          toast({\n            title: \"Localisation mise à jour\",\n            description: \"Position actuelle utilisée\",\n          });\n        },\n        () => {\n          toast({\n            title: \"Erreur de géolocalisation\",\n            description: \"Impossible d'obtenir votre position\",\n            variant: \"destructive\",\n          });\n        }\n      );\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.title || !formData.type || !formData.price || !formData.address) {\n      toast({\n        title: \"Champs requis manquants\",\n        description: \"Veuillez remplir tous les champs obligatoires\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Get current user data\n      const currentUser = JSON.parse(localStorage.getItem(\"userData\") || \"{}\");\n      \n      console.log(\"Current user:\", currentUser);\n      console.log(\"Form data before processing:\", formData);\n\n      // Validate that we have a valid user\n      if (!currentUser.id) {\n        throw new Error(\"User not logged in\");\n      }\n      \n      // Prepare property data for API (ensuring correct types for Drizzle schema)\n      const propertyData = {\n        ownerId: currentUser.id,\n        title: formData.title,\n        description: formData.description,\n        type: formData.type,\n        price: formData.price, // Keep as string for decimal type\n        priceType: formData.priceType,\n        surface: formData.surface ? parseInt(formData.surface) : null,\n        rooms: formData.rooms ? parseInt(formData.rooms) : null,\n        bathrooms: formData.bathrooms ? parseInt(formData.bathrooms) : null,\n        address: formData.address,\n        amenities: formData.amenities.length > 0 ? formData.amenities : null,\n        rules: formData.rules.length > 0 ? formData.rules : null,\n        deposit: formData.pricing.deposit || null, // Keep as string for decimal type\n        fees: formData.pricing.fees || null, // Keep as string for decimal type\n        utilities: formData.pricing.utilities || null,\n        utilitiesIncluded: formData.pricing.utilitiesIncluded,\n        status: \"Disponible\"\n      };\n\n      console.log(\"Property data being sent to API:\", JSON.stringify(propertyData, null, 2));\n\n      // Debug: Let's also test the validation schema\n      try {\n        const { insertPropertySchema } = await import(\"@/../../shared/schema\");\n        const validated = insertPropertySchema.parse(propertyData);\n        console.log(\"Frontend validation passed:\", validated);\n      } catch (validationError) {\n        console.error(\"Frontend validation failed:\", validationError);\n      }\n\n      const response = await fetch(\"/api/properties\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(propertyData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.log(\"API Error Response:\", JSON.stringify(errorData, null, 2));\n        throw new Error(errorData.error || \"Failed to create property\");\n      }\n\n      const createdProperty = await response.json();\n\n      toast({\n        title: \"Bien ajouté avec succès!\",\n        description: \"Votre bien est maintenant disponible à la location\",\n      });\n\n      navigate(\"/manage-properties\");\n    } catch (error) {\n      console.error(\"Error creating property:\", error);\n      toast({\n        title: \"Erreur\",\n        description: error instanceof Error ? error.message : \"Impossible de créer le bien\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n            <Plus className=\"h-8 w-8 text-primary\" />\n            <span>Ajouter un bien</span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Publiez votre propriété et trouvez des locataires\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Basic Info */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Informations de base</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Titre de l'annonce *</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"Ex: Studio moderne près INSAT\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"type\">Type de bien *</Label>\n                    <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Sélectionner\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {propertyTypes.map(type => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"surface\">Surface (m²) *</Label>\n                    <Input\n                      id=\"surface\"\n                      type=\"number\"\n                      value={formData.surface}\n                      onChange={(e) => handleInputChange('surface', e.target.value)}\n                      placeholder=\"35\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"rooms\">Nombre de pièces</Label>\n                    <Input\n                      id=\"rooms\"\n                      type=\"number\"\n                      value={formData.rooms}\n                      onChange={(e) => handleInputChange('rooms', e.target.value)}\n                      placeholder=\"1\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"bathrooms\">Salles de bain</Label>\n                    <Input\n                      id=\"bathrooms\"\n                      type=\"number\"\n                      value={formData.bathrooms}\n                      onChange={(e) => handleInputChange('bathrooms', e.target.value)}\n                      placeholder=\"1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    placeholder=\"Décrivez votre bien...\"\n                    rows={4}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Location */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Localisation</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"address\">Adresse complète *</Label>\n                  <Input\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    placeholder=\"Rue Ibn Khaldoun, Raoued 2088\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={handleLocationClick}\n                    className=\"w-full\"\n                  >\n                    <MapPin className=\"h-4 w-4 mr-2\" />\n                    Définir la position exacte\n                  </Button>\n                  \n                  {formData.location.lat !== 0 && (\n                    <p className=\"text-sm text-success\">\n                      ✓ Position définie: {formData.location.lat.toFixed(4)}, {formData.location.lng.toFixed(4)}\n                    </p>\n                  )}\n                  \n                  <div className=\"text-xs text-muted-foreground\">\n                    Note: La position sur carte est prioritaire si elle est définie. Sinon, l'adresse manuelle est utilisée.\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Amenities */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Équipements</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {availableAmenities.map((amenity) => (\n                    <div key={amenity.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={amenity.id}\n                        checked={formData.amenities.includes(amenity.id)}\n                        onCheckedChange={() => toggleAmenity(amenity.id)}\n                      />\n                      <Label htmlFor={amenity.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                        {amenity.icon}\n                        <span className=\"text-sm\">{amenity.label}</span>\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Rules */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Règles du logement</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    value={newRule}\n                    onChange={(e) => setNewRule(e.target.value)}\n                    placeholder=\"Ajouter une règle...\"\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addRule())}\n                  />\n                  <Button type=\"button\" onClick={addRule}>\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {formData.rules.map((rule, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 glass-card rounded\">\n                      <span className=\"text-sm\">{rule}</span>\n                      <Button \n                        type=\"button\" \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => removeRule(index)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Images */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Photos</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"images\">Ajouter des photos</Label>\n                  <Input\n                    id=\"images\"\n                    type=\"file\"\n                    multiple\n                    accept=\"image/*\"\n                    onChange={handleImageUpload}\n                  />\n                </div>\n\n                {formData.images.length > 0 && (\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    {formData.images.map((image, index) => (\n                      <div key={index} className=\"relative\">\n                        <div className=\"aspect-square bg-muted rounded-lg flex items-center justify-center\">\n                          <Upload className=\"h-6 w-6 text-muted-foreground\" />\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"absolute -top-2 -right-2\"\n                          onClick={() => removeImage(index)}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Pricing */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Tarification</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <Label htmlFor=\"price\">Prix *</Label>\n                    <Input\n                      id=\"price\"\n                      type=\"number\"\n                      value={formData.price}\n                      onChange={(e) => handleInputChange('price', e.target.value)}\n                      placeholder=\"450\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"priceType\">Période</Label>\n                    <Select value={formData.priceType} onValueChange={(value) => handleInputChange('priceType', value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"jour\">Jour</SelectItem>\n                        <SelectItem value=\"semaine\">Semaine</SelectItem>\n                        <SelectItem value=\"mois\">Mois</SelectItem>\n                        <SelectItem value=\"année\">Année</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"deposit\">Caution (TND)</Label>\n                  <Input\n                    id=\"deposit\"\n                    type=\"number\"\n                    value={formData.pricing.deposit}\n                    onChange={(e) => handleInputChange('pricing.deposit', e.target.value)}\n                    placeholder=\"450\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fees\">Frais de dossier (TND)</Label>\n                  <Input\n                    id=\"fees\"\n                    type=\"number\"\n                    value={formData.pricing.fees}\n                    onChange={(e) => handleInputChange('pricing.fees', e.target.value)}\n                    placeholder=\"50\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"utilitiesIncluded\"\n                    checked={formData.pricing.utilitiesIncluded}\n                    onCheckedChange={(checked) => handleInputChange('pricing.utilitiesIncluded', checked)}\n                  />\n                  <Label htmlFor=\"utilitiesIncluded\">Charges incluses</Label>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fees\">Frais de dossier (TND)</Label>\n                  <Input\n                    id=\"fees\"\n                    type=\"number\"\n                    value={formData.pricing.fees}\n                    onChange={(e) => handleInputChange('pricing.fees', e.target.value)}\n                    placeholder=\"50\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"utilities\">Charges incluses</Label>\n                  <Input\n                    id=\"utilities\"\n                    value={formData.pricing.utilities}\n                    onChange={(e) => handleInputChange('pricing.utilities', e.target.value)}\n                    placeholder=\"Électricité incluse jusqu'à 100 TND/mois\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Availability */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Disponibilité</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"availableFrom\">Disponible à partir du</Label>\n                  <Input\n                    id=\"availableFrom\"\n                    type=\"date\"\n                    value={formData.availability.availableFrom}\n                    onChange={(e) => handleInputChange('availability.availableFrom', e.target.value)}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"minimumStay\">Séjour minimum</Label>\n                  <Select value={formData.availability.minimumStay} onValueChange={(value) => handleInputChange('availability.minimumStay', value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Sélectionner\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1 semaine\">1 semaine</SelectItem>\n                      <SelectItem value=\"1 mois\">1 mois</SelectItem>\n                      <SelectItem value=\"3 mois\">3 mois</SelectItem>\n                      <SelectItem value=\"6 mois\">6 mois</SelectItem>\n                      <SelectItem value=\"1 an\">1 an</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"maximumStay\">Séjour maximum</Label>\n                  <Select value={formData.availability.maximumStay} onValueChange={(value) => handleInputChange('availability.maximumStay', value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Sélectionner\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"3 mois\">3 mois</SelectItem>\n                      <SelectItem value=\"6 mois\">6 mois</SelectItem>\n                      <SelectItem value=\"1 an\">1 an</SelectItem>\n                      <SelectItem value=\"2 ans\">2 ans</SelectItem>\n                      <SelectItem value=\"Illimité\">Illimité</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Submit */}\n            <Card className=\"glass-card\">\n              <CardContent className=\"pt-6\">\n                <Button type=\"submit\" className=\"w-full\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Publier le bien\n                </Button>\n                <p className=\"text-xs text-muted-foreground mt-2 text-center\">\n                  Votre bien sera vérifié avant publication\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AddProperty;","size_bytes":24802},"client/src/pages/ContractView.tsx":{"content":"import React, { useState, useEffect, useRef } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport ContractGenerator from \"@/components/ContractGenerator\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ContractStatusBadge } from \"@/components/ContractStatusBadge\";\nimport { EnhancedContractActions } from \"@/components/EnhancedContractActions\";\nimport { NotificationCenter } from \"@/components/NotificationCenter\";\nimport { AutomaticTenantNavigation } from \"@/components/AutomaticTenantNavigation\";\nimport { TenantRequestsDropdown } from \"@/components/TenantRequestsDropdown\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst ContractView = () => {\n  const [match, params] = useRoute(\"/contract/:id\");\n  const id = params?.id;\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch contract data\n  const { data: contract, isLoading, error, refetch } = useQuery({\n    queryKey: [`/api/contracts/${id}`],\n    queryFn: async () => {\n      console.log(\"Query function called for contract:\", id);\n      const response = await fetch(`/api/contracts/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log(\"Query function returned data:\", data);\n      return data;\n    },\n    enabled: !!id,\n    retry: 3,\n    refetchOnWindowFocus: false,\n    refetchOnMount: true,\n    staleTime: 0,\n    gcTime: 0 // Don't cache the query\n  });\n\n  // Force refetch when component mounts\n  React.useEffect(() => {\n    if (id) {\n      console.log(\"Force refetching contract:\", id);\n      refetch().then((result) => {\n        console.log(\"Refetch result:\", result);\n      }).catch((err) => {\n        console.error(\"Refetch error:\", err);\n      });\n    }\n  }, [id, refetch]);\n\n  // Sign contract mutation\n  const signContract = useMutation({\n    mutationFn: async (signatureData: any) => {\n      return await apiRequest(`/api/contracts/${id}/sign`, {\n        method: \"PUT\",\n        body: JSON.stringify(signatureData)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/contracts/${id}`] });\n      toast({\n        title: \"Contrat signé\",\n        description: \"Votre signature a été enregistrée avec succès.\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de signer le contrat. Veuillez réessayer.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"h-64 bg-muted rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contract && !isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Contrat non trouvé</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            Le contrat demandé (ID: {id}) n'existe pas ou vous n'avez pas les permissions pour le voir.\n          </p>\n          <p className=\"text-xs text-muted-foreground mb-4\">\n            Error: {error ? JSON.stringify(error) : 'No error details'}\n          </p>\n          <p className=\"text-xs text-muted-foreground mb-4\">\n            Query URL: /api/contracts/{id}\n          </p>\n          <div className=\"space-x-4\">\n            <Button onClick={() => navigate(\"/\")}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour à l'accueil\n            </Button>\n            <Button variant=\"outline\" onClick={() => window.location.reload()}>\n              Recharger la page\n            </Button>\n            <Button variant=\"outline\" onClick={() => {\n              console.log(\"Manual test - fetching contract\");\n              fetch(`/api/contracts/${id}`)\n                .then(r => r.json())\n                .then(data => console.log(\"Manual fetch result:\", data))\n                .catch(err => console.error(\"Manual fetch error:\", err));\n            }}>\n              Test API Direct\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Debug logging (always log these)\n  console.log(\"=== ContractView Debug ===\");\n  console.log(\"Contract ID:\", id);\n  console.log(\"Contract data:\", contract);\n  console.log(\"Loading state:\", isLoading);\n  console.log(\"Error state:\", error);\n  console.log(\"Has contract?\", !!contract);\n  console.log(\"========================\");\n\n  // Get current user from localStorage (real session management)\n  const getCurrentUser = () => {\n    const userData = localStorage.getItem(\"userData\");\n    const userId = localStorage.getItem(\"userId\");\n    const userType = localStorage.getItem(\"userType\");\n    \n    if (userData && userId && userType) {\n      try {\n        const user = JSON.parse(userData);\n        return {\n          id: parseInt(userId),\n          userType: userType,\n          ...user\n        };\n      } catch (error) {\n        console.error(\"Error parsing user data:\", error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const currentUser = getCurrentUser();\n  const currentUserId = currentUser?.id || 0;\n  \n  // Debug current user info\n  console.log(\"Current user from localStorage:\", currentUser);\n  console.log(\"Current user ID:\", currentUserId);\n  console.log(\"Contract owner ID:\", contract?.ownerId);\n  console.log(\"Contract tenant ID:\", contract?.tenantId);\n  \n  // Only check permissions if we have a valid contract\n  if (contract && contract.ownerId && contract.tenantId) {\n    const canViewContract = (\n      contract.ownerId === currentUserId || \n      contract.tenantId === currentUserId\n    );\n\n    console.log(\"Can view contract?\", canViewContract);\n    \n    if (!canViewContract) {\n      return (\n        <div className=\"min-h-screen bg-background\">\n          <Header />\n          <div className=\"container mx-auto px-4 py-8 text-center\">\n            <h1 className=\"text-2xl font-bold mb-4\">Accès refusé</h1>\n            <p className=\"text-muted-foreground mb-4\">\n              Vous n'avez pas les permissions pour voir ce contrat.\n            </p>\n            <Button onClick={() => navigate(\"/\")}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour à l'accueil\n            </Button>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AutomaticTenantNavigation \n        userId={currentUserId} \n        userType={contract.ownerId === currentUserId ? 'owner' : 'tenant'} \n      />\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/\")}\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n          <div className=\"flex items-center gap-4\">\n            <TenantRequestsDropdown \n              userId={currentUserId} \n              userType={contract.ownerId === currentUserId ? 'owner' : 'tenant'} \n            />\n            <NotificationCenter userId={currentUserId} />\n            <EnhancedContractActions \n              contract={contract} \n              currentUserId={currentUserId} \n              userType={contract.ownerId === currentUserId ? 'owner' : 'tenant'} \n            />\n          </div>\n        </div>\n\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-4 mb-2\">\n            <h1 className=\"text-3xl font-bold\">Contrat #{contract.id}</h1>\n            <ContractStatusBadge \n              status={contract.status} \n              tenantSignDeadline={contract.tenantSignDeadline}\n            />\n          </div>\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <span>Créé le {format(new Date(contract.createdAt), 'dd MMMM yyyy', { locale: fr })}</span>\n            {contract.tenantSignDeadline && contract.status === 'owner_signed' && (\n              <span className=\"text-yellow-600 font-medium\">\n                Échéance: {format(new Date(contract.tenantSignDeadline), 'dd MMMM yyyy à HH:mm', { locale: fr })}\n              </span>\n            )}\n          </div>\n        </div>\n\n        <ContractGenerator \n          contract={contract}\n          onSign={(signatureData) => signContract.mutate(signatureData)}\n          isLoading={signContract.isPending}\n          currentUserId={currentUserId}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ContractView;","size_bytes":9136},"client/src/pages/Contracts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from '@tanstack/react-query';\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  FileText, \n  Plus,\n  Download,\n  Eye,\n  Edit,\n  Send,\n  Calendar,\n  DollarSign,\n  User,\n  Home,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Filter,\n  Search,\n  ArrowUpDown\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ContractStatusBadge } from \"@/components/ContractStatusBadge\";\nimport { EnhancedContractActions } from \"@/components/EnhancedContractActions\";\n\nconst Contracts = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"contracts\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  \n  // Get user authentication\n  const currentUserId = Number(localStorage.getItem(\"userId\"));\n  const userType = localStorage.getItem(\"userType\") as 'tenant' | 'owner';\n  \n  // Fetch contracts\n  const { data: contracts = [], isLoading: contractsLoading } = useQuery({\n    queryKey: ['/api/contracts'],\n    enabled: !!currentUserId\n  });\n  \n  // Fetch contract modification requests\n  const { data: modificationRequests = [], isLoading: modRequestsLoading } = useQuery({\n    queryKey: ['/api/contract-modification-requests'],\n    enabled: !!currentUserId\n  });\n  \n  // Fetch contract termination requests  \n  const { data: terminationRequests = [], isLoading: termRequestsLoading } = useQuery({\n    queryKey: ['/api/contract-termination-requests'],\n    enabled: !!currentUserId\n  });\n\n  useEffect(() => {\n    // Check authentication\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n  }, [navigate]);\n\n  // Filter contracts based on search and status\n  const filteredContracts = (contracts as any[]).filter((contract: any) => {\n    const contractData = contract.contractData ? JSON.parse(contract.contractData) : {};\n    const propertyTitle = contractData.propertyTitle || '';\n    const tenantName = contractData.tenantName || '';\n    const ownerName = contractData.landlordName || '';\n    \n    const matchesSearch = propertyTitle.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         tenantName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         ownerName.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"\" || contract.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n  \n  // Filter requests based on user type\n  const userModificationRequests = (modificationRequests as any[]).filter((req: any) => \n    userType === 'owner' ? req.requestedBy !== currentUserId : req.requestedBy === currentUserId\n  );\n  \n  const userTerminationRequests = (terminationRequests as any[]).filter((req: any) => \n    userType === 'owner' ? req.requestedBy !== currentUserId : req.requestedBy === currentUserId\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Actif\": return \"success\";\n      case \"En attente de signature\": return \"warning\";\n      case \"En cours de négociation\": return \"secondary\";\n      case \"Expiré\": return \"destructive\";\n      case \"Résilié\": return \"outline\";\n      default: return \"outline\";\n    }\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case \"À jour\": return \"success\";\n      case \"En retard\": return \"destructive\";\n      case \"En attente\": return \"warning\";\n      default: return \"outline\";\n    }\n  };\n\n  const generateNewContract = () => {\n    navigate(\"/create-contract\");\n  };\n\n  const signContract = (contractId: number) => {\n    // This will be handled by the contract signing component\n    toast({\n      title: \"Contrat signé\",\n      description: \"Le contrat a été signé numériquement avec succès\",\n    });\n  };\n\n  const downloadContract = (contractUrl: string) => {\n    // Mock download\n    toast({\n      title: \"Téléchargement\",\n      description: \"Le contrat PDF est en cours de téléchargement\",\n    });\n  };\n\n  const sendContractForSignature = (contractId: number) => {\n    toast({\n      title: \"Contrat envoyé\",\n      description: \"Le contrat a été envoyé pour signature numérique\",\n    });\n  };\n\n  // Calculate stats\n  const stats = {\n    totalContracts: (contracts as any[]).length,\n    activeContracts: (contracts as any[]).filter((c: any) => c.status === \"active\").length,\n    pendingContracts: (contracts as any[]).filter((c: any) => c.status === \"owner_signed\" || c.status === \"draft\").length,\n    totalRevenue: userType === \"owner\" ? (contracts as any[]).reduce((sum: number, c: any) => {\n      const contractData = c.contractData ? JSON.parse(c.contractData) : {};\n      return sum + (parseFloat(contractData.monthlyRent) || 0);\n    }, 0) : 0,\n    monthlyPayments: (contracts as any[]).filter((c: any) => c.status === \"active\").reduce((sum: number, c: any) => {\n      const contractData = c.contractData ? JSON.parse(c.contractData) : {};\n      return sum + (parseFloat(contractData.monthlyRent) || 0);\n    }, 0)\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <FileText className=\"h-8 w-8 text-primary\" />\n              <span>Mes Contrats</span>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {(contracts as any[]).length} contrat(s) {userType === \"owner\" ? \"propriétaire\" : \"locataire\"}\n            </p>\n          </div>\n          {userType === \"owner\" && (\n            <Button onClick={generateNewContract} className=\"flex items-center space-x-2\">\n              <Plus className=\"h-4 w-4\" />\n              <span>Nouveau contrat</span>\n            </Button>\n          )}\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <FileText className=\"h-4 w-4 text-primary\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total contrats</p>\n                  <p className=\"text-xl font-bold\">{stats.totalContracts}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-success\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Actifs</p>\n                  <p className=\"text-xl font-bold\">{stats.activeContracts}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"h-4 w-4 text-warning\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">En attente</p>\n                  <p className=\"text-xl font-bold\">{stats.pendingContracts}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-4 w-4 text-accent\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {userType === \"owner\" ? \"Revenus totaux\" : \"Paiements mensuels\"}\n                  </p>\n                  <p className=\"text-xl font-bold\">\n                    {userType === \"owner\" ? stats.totalRevenue.toLocaleString() : stats.monthlyPayments.toLocaleString()} TND\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"glass-card mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Rechercher par propriété, locataire/propriétaire...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Tous les statuts\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tous les statuts</SelectItem>\n                  <SelectItem value=\"actif\">Actif</SelectItem>\n                  <SelectItem value=\"en-attente\">En attente de signature</SelectItem>\n                  <SelectItem value=\"negociation\">En cours de négociation</SelectItem>\n                  <SelectItem value=\"expire\">Expiré</SelectItem>\n                  <SelectItem value=\"resilie\">Résilié</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Content with Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"contracts\">Mes Contrats</TabsTrigger>\n            <TabsTrigger value=\"modification-requests\">\n              {userType === 'owner' ? 'Demandes de modification reçues' : 'Mes demandes de modification'}\n            </TabsTrigger>\n            <TabsTrigger value=\"termination-requests\">\n              {userType === 'owner' ? 'Demandes de résiliation reçues' : 'Mes demandes de résiliation'}\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"contracts\" className=\"space-y-4 mt-6\">\n            {contractsLoading ? (\n              <div className=\"text-center py-8\">Chargement des contrats...</div>\n            ) : filteredContracts.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Aucun contrat trouvé\n              </div>\n            ) : (\n              filteredContracts.map((contract: any) => (\n            <Card key={contract.id} className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    {(() => {\n                      const contractData = contract.contractData ? JSON.parse(contract.contractData) : {};\n                      return (\n                        <>\n                          {/* Header */}\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div>\n                              <h3 className=\"font-semibold text-lg flex items-center space-x-2\">\n                                <Home className=\"h-4 w-4\" />\n                                <span>{contractData.propertyTitle || 'Propriété'}</span>\n                              </h3>\n                              <p className=\"text-muted-foreground text-sm\">{contractData.propertyAddress || 'Adresse non disponible'}</p>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <ContractStatusBadge status={contract.status} />\n                            </div>\n                          </div>\n\n                          {/* Details */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {userType === \"owner\" ? \"Locataire\" : \"Propriétaire\"}\n                              </p>\n                              <p className=\"font-medium flex items-center space-x-1\">\n                                <User className=\"h-3 w-3\" />\n                                <span>{userType === \"owner\" ? contractData.tenantName : contractData.landlordName}</span>\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {userType === \"owner\" ? contractData.tenantPhone : contractData.ownerPhone}\n                              </p>\n                            </div>\n\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Période</p>\n                              <p className=\"font-medium flex items-center space-x-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                <span>\n                                  {contractData.startDate && contractData.endDate ? \n                                    `${new Date(contractData.startDate).toLocaleDateString('fr-FR')} - ${new Date(contractData.endDate).toLocaleDateString('fr-FR')}` :\n                                    'Dates non définies'\n                                  }\n                                </span>\n                              </p>\n                              {contract.ownerSignedAt && (\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Signé le {new Date(contract.ownerSignedAt).toLocaleDateString('fr-FR')}\n                                </p>\n                              )}\n                            </div>\n\n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Montants</p>\n                              <p className=\"font-medium flex items-center space-x-1\">\n                                <DollarSign className=\"h-3 w-3\" />\n                                <span>{contractData.monthlyRent || '0'} TND/mois</span>\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Caution: {contractData.deposit || '0'} TND\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Contract Actions for Active Contracts */}\n                          {contract.status === 'active' && userType === 'owner' && (\n                            <div className=\"mt-4\">\n                              <EnhancedContractActions \n                                contract={contract}\n                                currentUserId={currentUserId}\n                                userType={userType}\n                              />\n                            </div>\n                          )}\n                        </>\n                      );\n                    })()}\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex flex-col space-y-2 ml-6\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => navigate(`/contract/${contract.id}`)}\n                    >\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Voir\n                    </Button>\n\n                    {(contract.status === 'fully_signed' || contract.status === 'active') && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => downloadContract(`/api/contracts/${contract.id}/download`)}\n                      >\n                        <Download className=\"h-3 w-3 mr-1\" />\n                        PDF\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n              ))\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"modification-requests\" className=\"space-y-4 mt-6\">\n            {modRequestsLoading ? (\n              <div className=\"text-center py-8\">Chargement des demandes...</div>\n            ) : userModificationRequests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {userType === 'owner' ? 'Aucune demande de modification reçue' : 'Aucune demande de modification envoyée'}\n              </div>\n            ) : (\n              userModificationRequests.map((request: any) => (\n                <Card key={request.id} className=\"glass-card\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Edit className=\"h-5 w-5 text-primary\" />\n                          <h3 className=\"font-semibold\">Demande de modification de contrat</h3>\n                          <Badge variant={request.status === 'pending' ? 'warning' : request.status === 'accepted' ? 'success' : 'destructive'}>\n                            {request.status === 'pending' ? 'En attente' : request.status === 'accepted' ? 'Acceptée' : 'Refusée'}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Contrat ID: {request.contractId}\n                        </p>\n                        <p className=\"text-sm mb-2\">\n                          <strong>Raison:</strong> {request.reason || 'Non spécifiée'}\n                        </p>\n                        {request.fieldsToModify && (\n                          <p className=\"text-sm mb-2\">\n                            <strong>Champs à modifier:</strong> {request.fieldsToModify}\n                          </p>\n                        )}\n                        <p className=\"text-xs text-muted-foreground\">\n                          Demandé le {new Date(request.createdAt).toLocaleDateString('fr-FR')}\n                        </p>\n                      </div>\n                      <div className=\"flex flex-col space-y-2\">\n                        {request.status === 'pending' && userType === 'tenant' && request.requestedBy !== currentUserId && (\n                          <>\n                            <Button size=\"sm\" variant=\"default\">\n                              Accepter\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\">\n                              Refuser\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"termination-requests\" className=\"space-y-4 mt-6\">\n            {termRequestsLoading ? (\n              <div className=\"text-center py-8\">Chargement des demandes...</div>\n            ) : userTerminationRequests.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                {userType === 'owner' ? 'Aucune demande de résiliation reçue' : 'Aucune demande de résiliation envoyée'}\n              </div>\n            ) : (\n              userTerminationRequests.map((request: any) => (\n                <Card key={request.id} className=\"glass-card\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <AlertCircle className=\"h-5 w-5 text-destructive\" />\n                          <h3 className=\"font-semibold\">Demande de résiliation de contrat</h3>\n                          <Badge variant={request.status === 'pending' ? 'warning' : request.status === 'accepted' ? 'success' : 'destructive'}>\n                            {request.status === 'pending' ? 'En attente' : request.status === 'accepted' ? 'Acceptée' : 'Refusée'}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          Contrat ID: {request.contractId}\n                        </p>\n                        <p className=\"text-sm mb-2\">\n                          <strong>Raison:</strong> {request.reason || 'Non spécifiée'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Demandé le {new Date(request.createdAt).toLocaleDateString('fr-FR')}\n                        </p>\n                      </div>\n                      <div className=\"flex flex-col space-y-2\">\n                        {request.status === 'pending' && userType === 'tenant' && request.requestedBy !== currentUserId && (\n                          <>\n                            <Button size=\"sm\" variant=\"destructive\">\n                              Accepter\n                            </Button>\n                            <Button size=\"sm\" variant=\"outline\">\n                              Refuser\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default Contracts;","size_bytes":22323},"client/src/pages/CreateContract.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ErrorAlert } from \"@/components/ErrorAlert\";\nimport { \n  FileText, \n  ArrowLeft, \n  User, \n  Home, \n  Calendar, \n  DollarSign,\n  Send,\n  CheckCircle,\n  AlertCircle,\n  Info\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport Header from \"@/components/Header\";\n\ninterface ContractRequest {\n  id: number;\n  propertyId: number;\n  tenantId: number;\n  ownerId: number;\n  startDate: string;\n  endDate: string;\n  monthlyRent: string;\n  deposit: string;\n  conditions: string;\n  status: string;\n  property: {\n    title: string;\n    address: string;\n  };\n  tenant: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nexport default function CreateContract() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedOfferId, setSelectedOfferId] = useState<number | null>(null);\n  const [contractError, setContractError] = useState<{message: string, details?: string} | null>(null);\n  const [contractData, setContractData] = useState({\n    landlordName: \"\",\n    landlordCin: \"\",\n    tenantName: \"\",\n    tenantCin: \"\",\n    propertyTitle: \"\",\n    propertyAddress: \"\",\n    startDate: \"\",\n    endDate: \"\",\n    monthlyRent: \"\",\n    deposit: \"\",\n    specialConditions: \"\",\n    paymentDueDate: \"1\", // Default to 1st of each month\n  });\n\n  // Get current user from localStorage (consistent with ContractsDashboard)\n  const getCurrentUser = () => {\n    const userData = localStorage.getItem(\"userData\");\n    const userId = localStorage.getItem(\"userId\");\n    const userType = localStorage.getItem(\"userType\");\n    \n    if (userData && userId && userType) {\n      try {\n        const user = JSON.parse(userData);\n        const currentUser = {\n          id: parseInt(userId),\n          userType: userType,\n          ...user\n        };\n        console.log(\"Current user in CreateContract:\", currentUser);\n        return currentUser;\n      } catch (error) {\n        console.error(\"Error parsing user data:\", error);\n        return null;\n      }\n    }\n    console.log(\"No user found in localStorage\");\n    return null;\n  };\n\n  const [currentUser] = useState(getCurrentUser());\n\n  // Fetch contract requests (offers with status 'contract_requested')\n  const { data: contractRequests = [], isLoading } = useQuery({\n    queryKey: [\"/api/offers\", \"contract_requests\", currentUser?.id],\n    queryFn: async () => {\n      if (!currentUser) {\n        throw new Error('No user logged in');\n      }\n      \n      const params = new URLSearchParams({\n        userId: currentUser.id.toString(),\n        userType: currentUser.userType,\n        status: \"contract_requested\"\n      });\n      \n      console.log(\"Fetching contract requests for user:\", currentUser.id, \"userType:\", currentUser.userType);\n      \n      const response = await fetch(`/api/offers?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch contract requests');\n      const data = await response.json();\n      \n      console.log(\"Contract requests received:\", data);\n      \n      // Filter for contract_requested status to be sure\n      return Array.isArray(data) ? data.filter((offer: any) => offer.status === 'contract_requested') : [];\n    },\n    enabled: !!currentUser,\n  });\n\n  // Create contract mutation\n  const createContract = useMutation({\n    mutationFn: async (contractPayload: any) => {\n      return await apiRequest(\"/api/contracts\", {\n        method: \"POST\",\n        body: JSON.stringify(contractPayload),\n      });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contracts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\"] });\n      setContractError(null); // Clear any previous errors\n      toast({\n        title: \"Contrat créé\",\n        description: \"Le contrat a été créé avec succès. Vous pouvez maintenant le signer.\",\n      });\n      // Navigate to the specific contract to allow immediate signing\n      navigate(`/contract/${data.id}`);\n    },\n    onError: (error: any) => {\n      console.error(\"Contract creation error:\", error);\n      \n      // Handle contract creation restriction error specifically\n      if (error.message && error.message.includes(\"contrat actif\")) {\n        setContractError({\n          message: \"Impossible de créer un nouveau contrat pour cette propriété. Un contrat est déjà actif et doit être terminé ou expiré avant d'en créer un nouveau.\",\n          details: \"Vous pouvez utiliser les options 'Arrêt anticipé' ou 'Demander modification' pour gérer le contrat existant.\"\n        });\n      } else {\n        setContractError({\n          message: error.message || \"Une erreur est survenue lors de la création du contrat\",\n          details: \"Veuillez vérifier vos informations et réessayer.\"\n        });\n      }\n    }\n  });\n\n  // Handle offer selection\n  const handleOfferSelection = (offerId: string) => {\n    const selectedOffer = contractRequests.find((offer: ContractRequest) => offer.id === parseInt(offerId));\n    if (selectedOffer) {\n      setSelectedOfferId(selectedOffer.id);\n      setContractData({\n        ...contractData,\n        tenantName: `${selectedOffer.tenant.firstName} ${selectedOffer.tenant.lastName}`,\n        propertyTitle: selectedOffer.property.title,\n        propertyAddress: selectedOffer.property.address,\n        startDate: selectedOffer.startDate.split('T')[0], // Convert to YYYY-MM-DD format\n        endDate: selectedOffer.endDate.split('T')[0],\n        monthlyRent: selectedOffer.monthlyRent,\n        deposit: selectedOffer.deposit || selectedOffer.monthlyRent,\n      });\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedOfferId) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez sélectionner une demande de contrat\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!contractData.landlordName || !contractData.landlordCin || !contractData.tenantCin) {\n      toast({\n        title: \"Erreur\", \n        description: \"Veuillez remplir tous les champs obligatoires\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const selectedOffer = contractRequests.find((offer: ContractRequest) => offer.id === selectedOfferId);\n    if (!selectedOffer) return;\n\n    const contractPayload = {\n      offerId: selectedOfferId,\n      propertyId: selectedOffer.propertyId,\n      tenantId: selectedOffer.tenantId,\n      ownerId: currentUser.id, // Use the current logged-in user as owner\n      contractData: {\n        ...contractData,\n        createdAt: new Date().toISOString(),\n      },\n    };\n    \n    console.log(\"Creating contract with payload:\", contractPayload);\n\n    createContract.mutate(contractPayload);\n  };\n\n  // Check authentication\n  useEffect(() => {\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n\n    if (currentUser.userType !== \"owner\") {\n      toast({\n        title: \"Accès refusé\",\n        description: \"Seuls les propriétaires peuvent créer des contrats\",\n        variant: \"destructive\",\n      });\n      navigate(\"/\");\n      return;\n    }\n  }, [navigate, currentUser.userType]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-lg\">Chargement des demandes de contrat...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center space-x-4 mb-8\">\n          <Button variant=\"outline\" onClick={() => navigate(\"/contracts\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <FileText className=\"h-8 w-8 text-primary\" />\n              <span>Créer un Contrat</span>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Créez un contrat de location pour une demande acceptée\n            </p>\n          </div>\n        </div>\n\n        {/* Error Alert */}\n        {contractError && (\n          <div className=\"mb-6\">\n            <ErrorAlert\n              type=\"warning\"\n              title=\"Restriction de création de contrat\"\n              message={contractError.message}\n              details={contractError.details}\n              onDismiss={() => setContractError(null)}\n            />\n          </div>\n        )}\n\n        {/* Contract Requests Info */}\n        {contractRequests.length === 0 ? (\n          <Card className=\"glass-card mb-8\">\n            <CardContent className=\"p-8 text-center\">\n              <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Aucune demande de contrat</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Vous devez d'abord recevoir des offres acceptées où les locataires demandent un contrat.\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                Le processus: Locataire fait une offre → Vous acceptez l'offre → Locataire demande un contrat → Vous pouvez créer le contrat\n              </p>\n              <Button onClick={() => navigate(\"/offers\")} className=\"mt-4\">\n                Voir mes offres\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <>\n            {/* Available Contract Requests */}\n            <Card className=\"glass-card mb-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Info className=\"h-5 w-5\" />\n                  <span>Demandes de contrat disponibles ({contractRequests.length})</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4\">\n                  {contractRequests.map((request: ContractRequest) => (\n                    <div\n                      key={request.id}\n                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                        selectedOfferId === request.id\n                          ? \"border-primary bg-primary/5\"\n                          : \"border-border hover:border-primary/50\"\n                      }`}\n                      onClick={() => handleOfferSelection(request.id.toString())}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <Home className=\"h-4 w-4\" />\n                            <h4 className=\"font-semibold\">{request.property.title}</h4>\n                            <Badge variant=\"outline\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Contrat demandé\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-2\">{request.property.address}</p>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                            <div className=\"flex items-center space-x-1\">\n                              <User className=\"h-3 w-3\" />\n                              <span>{request.tenant.firstName} {request.tenant.lastName}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              <span>\n                                {format(new Date(request.startDate), \"dd/MM/yyyy\", { locale: fr })} - \n                                {format(new Date(request.endDate), \"dd/MM/yyyy\", { locale: fr })}\n                              </span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <DollarSign className=\"h-3 w-3\" />\n                              <span>{request.monthlyRent} TND/mois</span>\n                            </div>\n                          </div>\n                        </div>\n                        {selectedOfferId === request.id && (\n                          <CheckCircle className=\"h-5 w-5 text-primary\" />\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contract Form */}\n            {selectedOfferId && (\n              <form onSubmit={handleSubmit}>\n                <Card className=\"glass-card\">\n                  <CardHeader>\n                    <CardTitle>Détails du Contrat</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-6\">\n                    {/* Owner Information */}\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Informations du Propriétaire</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"landlordName\">Nom complet *</Label>\n                          <Input\n                            id=\"landlordName\"\n                            value={contractData.landlordName}\n                            onChange={(e) => setContractData({ ...contractData, landlordName: e.target.value })}\n                            placeholder=\"Nom et prénom du propriétaire\"\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"landlordCin\">CIN *</Label>\n                          <Input\n                            id=\"landlordCin\"\n                            value={contractData.landlordCin}\n                            onChange={(e) => setContractData({ ...contractData, landlordCin: e.target.value })}\n                            placeholder=\"Numéro de CIN\"\n                            required\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Tenant Information */}\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Informations du Locataire</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"tenantName\">Nom complet</Label>\n                          <Input\n                            id=\"tenantName\"\n                            value={contractData.tenantName}\n                            onChange={(e) => setContractData({ ...contractData, tenantName: e.target.value })}\n                            placeholder=\"Nom et prénom du locataire\"\n                            disabled\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"tenantCin\">CIN *</Label>\n                          <Input\n                            id=\"tenantCin\"\n                            value={contractData.tenantCin}\n                            onChange={(e) => setContractData({ ...contractData, tenantCin: e.target.value })}\n                            placeholder=\"Numéro de CIN du locataire\"\n                            required\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Property Information */}\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Informations de la Propriété</h3>\n                      <div className=\"grid grid-cols-1 gap-4\">\n                        <div>\n                          <Label htmlFor=\"propertyTitle\">Titre de la propriété</Label>\n                          <Input\n                            id=\"propertyTitle\"\n                            value={contractData.propertyTitle}\n                            disabled\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"propertyAddress\">Adresse</Label>\n                          <Input\n                            id=\"propertyAddress\"\n                            value={contractData.propertyAddress}\n                            disabled\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Contract Terms */}\n                    <div>\n                      <h3 className=\"text-lg font-semibold mb-4\">Conditions du Contrat</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"startDate\">Date de début</Label>\n                          <Input\n                            id=\"startDate\"\n                            type=\"date\"\n                            value={contractData.startDate}\n                            onChange={(e) => setContractData({ ...contractData, startDate: e.target.value })}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"endDate\">Date de fin</Label>\n                          <Input\n                            id=\"endDate\"\n                            type=\"date\"\n                            value={contractData.endDate}\n                            onChange={(e) => setContractData({ ...contractData, endDate: e.target.value })}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"monthlyRent\">Loyer mensuel (TND)</Label>\n                          <Input\n                            id=\"monthlyRent\"\n                            type=\"number\"\n                            value={contractData.monthlyRent}\n                            onChange={(e) => setContractData({ ...contractData, monthlyRent: e.target.value })}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"deposit\">Caution (TND)</Label>\n                          <Input\n                            id=\"deposit\"\n                            type=\"number\"\n                            value={contractData.deposit}\n                            onChange={(e) => setContractData({ ...contractData, deposit: e.target.value })}\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"paymentDueDate\">Date d'échéance mensuelle</Label>\n                          <Select value={contractData.paymentDueDate} onValueChange={(value) => setContractData({ ...contractData, paymentDueDate: value })}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {Array.from({ length: 28 }, (_, i) => i + 1).map((day) => (\n                                <SelectItem key={day} value={day.toString()}>\n                                  Le {day} de chaque mois\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Special Conditions */}\n                    <div>\n                      <Label htmlFor=\"specialConditions\">Conditions spéciales (optionnel)</Label>\n                      <Textarea\n                        id=\"specialConditions\"\n                        value={contractData.specialConditions}\n                        onChange={(e) => setContractData({ ...contractData, specialConditions: e.target.value })}\n                        placeholder=\"Conditions spéciales, règles ou notes particulières...\"\n                        rows={4}\n                      />\n                    </div>\n\n                    {/* Submit Button */}\n                    <div className=\"flex justify-end space-x-4 pt-6\">\n                      <Button type=\"button\" variant=\"outline\" onClick={() => navigate(\"/contracts\")}>\n                        Annuler\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createContract.isPending}\n                        className=\"flex items-center space-x-2\"\n                      >\n                        <Send className=\"h-4 w-4\" />\n                        <span>\n                          {createContract.isPending ? \"Création...\" : \"Créer le Contrat\"}\n                        </span>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </form>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":22396},"client/src/pages/Dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport RecentProperties from \"@/components/RecentProperties\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Home, \n  Heart, \n  MessageSquare, \n  Star, \n  Plus, \n  TrendingUp, \n  Users, \n  MapPin,\n  Calendar,\n  DollarSign\n} from \"lucide-react\";\n\nconst Dashboard = () => {\n  const [userType, setUserType] = useState<string>(\"\");\n  const [userProfile, setUserProfile] = useState<any>(null);\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n\n    const type = localStorage.getItem(\"userType\") || \"\";\n    const profile = JSON.parse(localStorage.getItem(\"userProfile\") || \"{}\");\n    setUserType(type);\n    setUserProfile(profile);\n  }, [navigate]);\n\n  // Mock data\n  const mockFavorites = [\n    {\n      id: 1,\n      title: \"Studio moderne près INSAT\",\n      price: \"450 TND/mois\",\n      location: \"Ariana, Raoued\",\n      rating: 4.8,\n      image: \"/placeholder.svg\"\n    },\n    {\n      id: 2,\n      title: \"Appartement 2 pièces\",\n      price: \"650 TND/mois\", \n      location: \"Tunis, Bardo\",\n      rating: 4.6,\n      image: \"/placeholder.svg\"\n    }\n  ];\n\n  const mockProperties = [\n    {\n      id: 1,\n      title: \"Villa familiale avec jardin\",\n      price: \"1200 TND/mois\",\n      status: \"Occupé\",\n      views: 234,\n      messages: 8\n    },\n    {\n      id: 2,\n      title: \"Studio étudiant meublé\",\n      price: \"480 TND/mois\",\n      status: \"Disponible\",\n      views: 156,\n      messages: 12\n    }\n  ];\n\n  const mockStats = {\n    totalProperties: 3,\n    activeContracts: 2,\n    monthlyRevenue: 1680,\n    occupancyRate: 85\n  };\n\n  if (userType === \"owner\") {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold gradient-text\">Dashboard Propriétaire</h1>\n              <p className=\"text-muted-foreground\">\n                Bienvenue, {userProfile?.firstName} {userProfile?.lastName}\n              </p>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button onClick={() => navigate(\"/add-property\")} className=\"flex items-center space-x-2\">\n                <Plus className=\"h-4 w-4\" />\n                <span>Ajouter un bien</span>\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => navigate(\"/manage-properties\")} \n                className=\"flex items-center space-x-2\"\n              >\n                <Home className=\"h-4 w-4\" />\n                <span>Gérer mes biens</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <Card className=\"glass-card\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Biens totaux</CardTitle>\n                <Home className=\"h-4 w-4 text-primary\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{mockStats.totalProperties}</div>\n                <p className=\"text-xs text-muted-foreground\">+1 ce mois</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"glass-card\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Contrats actifs</CardTitle>\n                <Users className=\"h-4 w-4 text-success\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{mockStats.activeContracts}</div>\n                <p className=\"text-xs text-muted-foreground\">Stable</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Revenus mensuels</CardTitle>\n                <DollarSign className=\"h-4 w-4 text-accent\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{mockStats.monthlyRevenue} TND</div>\n                <p className=\"text-xs text-muted-foreground\">+12% vs mois dernier</p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"glass-card\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Taux d'occupation</CardTitle>\n                <TrendingUp className=\"h-4 w-4 text-warning\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{mockStats.occupancyRate}%</div>\n                <p className=\"text-xs text-muted-foreground\">Excellent</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Properties */}\n          <Card className=\"glass-card mb-8\">\n            <CardHeader>\n              <CardTitle>Mes biens</CardTitle>\n              <CardDescription>Gérez vos propriétés</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockProperties.map((property) => (\n                  <div key={property.id} className=\"flex items-center justify-between p-4 border border-white/10 rounded-lg\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold\">{property.title}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{property.price}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <Badge variant={property.status === \"Disponible\" ? \"default\" : \"secondary\"}>\n                        {property.status}\n                      </Badge>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {property.views} vues • {property.messages} messages\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => navigate(\"/manage-properties\")}\n                      >\n                        Gérer\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // Tenant/Student Dashboard\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text\">\n              Dashboard {userType === \"student\" ? \"Étudiant\" : \"Locataire\"}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Bienvenue, {userProfile?.firstName} {userProfile?.lastName}\n            </p>\n            {userType === \"student\" && userProfile?.studentInfo?.university && (\n              <p className=\"text-sm text-primary\">\n                📚 {userProfile.studentInfo.university}\n              </p>\n            )}\n          </div>\n          <Button onClick={() => navigate(\"/search\")} className=\"flex items-center space-x-2\">\n            <MapPin className=\"h-4 w-4\" />\n            <span>Rechercher un bien</span>\n          </Button>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"glass-card cursor-pointer hover:scale-105 transition-transform\" onClick={() => navigate(\"/search\")}>\n            <CardContent className=\"flex flex-col items-center p-6\">\n              <MapPin className=\"h-8 w-8 text-primary mb-2\" />\n              <p className=\"text-sm font-medium\">Rechercher</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glass-card cursor-pointer hover:scale-105 transition-transform\" onClick={() => navigate(\"/favorites\")}>\n            <CardContent className=\"flex flex-col items-center p-6\">\n              <Heart className=\"h-8 w-8 text-destructive mb-2\" />\n              <p className=\"text-sm font-medium\">Favoris</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glass-card cursor-pointer hover:scale-105 transition-transform\" onClick={() => navigate(\"/messages\")}>\n            <CardContent className=\"flex flex-col items-center p-6\">\n              <MessageSquare className=\"h-8 w-8 text-accent mb-2\" />\n              <p className=\"text-sm font-medium\">Messages</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glass-card cursor-pointer hover:scale-105 transition-transform\" onClick={() => navigate(\"/contracts\")}>\n            <CardContent className=\"flex flex-col items-center p-6\">\n              <Calendar className=\"h-8 w-8 text-success mb-2\" />\n              <p className=\"text-sm font-medium\">Contrats</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Favorites */}\n        <Card className=\"glass-card mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Heart className=\"h-5 w-5 text-destructive\" />\n              <span>Mes favoris</span>\n            </CardTitle>\n            <CardDescription>Biens sauvegardés</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {mockFavorites.map((property) => (\n                <div key={property.id} className=\"glass-card p-4 rounded-lg cursor-pointer hover:scale-105 transition-transform\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-16 h-16 bg-muted rounded-lg flex items-center justify-center\">\n                      <Home className=\"h-6 w-6 text-muted-foreground\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-sm\">{property.title}</h3>\n                      <p className=\"text-primary font-medium\">{property.price}</p>\n                      <p className=\"text-xs text-muted-foreground flex items-center space-x-1\">\n                        <MapPin className=\"h-3 w-3\" />\n                        <span>{property.location}</span>\n                      </p>\n                      <div className=\"flex items-center space-x-1 mt-1\">\n                        <Star className=\"h-3 w-3 fill-warning text-warning\" />\n                        <span className=\"text-xs\">{property.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Recent Activity */}\n        <Card className=\"glass-card\">\n          <CardHeader>\n            <CardTitle>Activité récente</CardTitle>\n            <CardDescription>Vos dernières actions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Avatar>\n                  <AvatarFallback>AK</AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"text-sm\">Ahmed Karim a répondu à votre message</p>\n                  <p className=\"text-xs text-muted-foreground\">Il y a 2 heures</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Avatar>\n                  <AvatarFallback>SF</AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"text-sm\">Nouveau bien ajouté près de votre université</p>\n                  <p className=\"text-xs text-muted-foreground\">Il y a 1 jour</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":12686},"client/src/pages/EditProperty.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute, useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Home, \n  ArrowLeft, \n  Save,\n  Wifi,\n  Car,\n  Plus,\n  X,\n  MapPin,\n  Upload\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst EditProperty = () => {\n  const [match, params] = useRoute(\"/edit-property/:id\");\n  const id = params?.id;\n  const [formData, setFormData] = useState({\n    title: \"\",\n    type: \"\",\n    description: \"\",\n    price: \"\",\n    priceType: \"mois\",\n    surface: \"\",\n    rooms: \"\",\n    bathrooms: \"\",\n    address: \"\",\n    location: { lat: 0, lng: 0 },\n    amenities: [] as string[],\n    rules: [] as string[],\n    images: [] as File[],\n    status: \"Disponible\",\n    pricing: {\n      deposit: \"\",\n      fees: \"\",\n      utilities: \"\",\n      utilitiesIncluded: false\n    }\n  });\n\n  const [newRule, setNewRule] = useState(\"\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Load property data (with mock data if needed)\n    const properties = JSON.parse(localStorage.getItem(\"userProperties\") || \"[]\");\n    let property = properties.find((p: any) => p.id === parseInt(id || \"0\"));\n    \n    // If property doesn't exist, create mock data for testing\n    if (!property) {\n      property = {\n        id: parseInt(id || \"0\"),\n        title: \"Studio moderne près INSAT\",\n        type: \"studio\",\n        description: \"Studio entièrement meublé et équipé, proche des transports en commun\",\n        price: \"450\",\n        priceType: \"mois\",\n        surface: \"35\",\n        rooms: \"1\",\n        bathrooms: \"1\",\n        address: \"Rue Ibn Khaldoun, Raoued 2088\",\n        location: { lat: 36.8065, lng: 10.1815 },\n        amenities: [\"wifi\", \"furnished\", \"parking\"],\n        rules: [\"Non fumeur\", \"Pas d'animaux\"],\n        images: [],\n        status: \"Disponible\",\n        pricing: {\n          deposit: \"450\",\n          fees: \"50\",\n          utilities: \"\",\n          utilitiesIncluded: false\n        }\n      };\n    }\n    \n    // Ensure all required fields are present with defaults\n    const sanitizedProperty = {\n      ...property,\n      amenities: property.amenities || [],\n      rules: property.rules || [],\n      location: property.location || { lat: 0, lng: 0 },\n      pricing: property.pricing || {\n        deposit: \"\",\n        fees: \"\",\n        utilities: \"\",\n        utilitiesIncluded: false\n      }\n    };\n    \n    setFormData(sanitizedProperty);\n  }, [id]);\n\n  const availableAmenities = [\n    { id: \"wifi\", label: \"Wi-Fi gratuit\", icon: <Wifi className=\"h-4 w-4\" /> },\n    { id: \"furnished\", label: \"Meublé\", icon: <Home className=\"h-4 w-4\" /> },\n    { id: \"parking\", label: \"Parking\", icon: <Car className=\"h-4 w-4\" /> },\n    { id: \"AC\", label: \"Climatisation\", icon: <span>❄️</span> },\n    { id: \"washing_machine\", label: \"Lave-linge\", icon: <span>🫧</span> },\n    { id: \"garden\", label: \"Jardin\", icon: <span>🌿</span> },\n    { id: \"security\", label: \"Sécurité\", icon: <span>🔒</span> },\n    { id: \"elevator\", label: \"Ascenseur\", icon: <span>🛗</span> },\n    { id: \"balcony\", label: \"Balcon\", icon: <span>🏠</span> },\n    { id: \"kitchen\", label: \"Cuisine équipée\", icon: <span>🍳</span> }\n  ];\n\n  const propertyTypes = [\n    { value: \"studio\", label: \"Studio\" },\n    { value: \"apartment\", label: \"Appartement\" },\n    { value: \"villa\", label: \"Villa\" },\n    { value: \"house\", label: \"Maison\" },\n    { value: \"vacation\", label: \"Maison de vacances\" },\n    { value: \"room\", label: \"Chambre\" },\n    { value: \"office\", label: \"Bureau\" },\n    { value: \"shop\", label: \"Local commercial\" }\n  ];\n\n  const handleInputChange = (field: string, value: any) => {\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      setFormData(prev => ({\n        ...prev,\n        [parent]: {\n          ...(prev[parent as keyof typeof prev] as any),\n          [child]: value\n        }\n      }));\n    } else {\n      setFormData(prev => ({ ...prev, [field]: value }));\n    }\n  };\n\n  const toggleAmenity = (amenityId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      amenities: prev.amenities.includes(amenityId)\n        ? prev.amenities.filter(a => a !== amenityId)\n        : [...prev.amenities, amenityId]\n    }));\n  };\n\n  const addRule = () => {\n    if (newRule.trim()) {\n      setFormData(prev => ({\n        ...prev,\n        rules: [...prev.rules, newRule.trim()]\n      }));\n      setNewRule(\"\");\n    }\n  };\n\n  const removeRule = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      rules: prev.rules.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleLocationClick = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          handleInputChange('location', {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          });\n          toast({\n            title: \"Localisation mise à jour\",\n            description: \"Position actuelle utilisée\",\n          });\n        },\n        () => {\n          toast({\n            title: \"Erreur de géolocalisation\",\n            description: \"Impossible d'obtenir votre position\",\n            variant: \"destructive\",\n          });\n        }\n      );\n    }\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setFormData(prev => ({\n      ...prev,\n      images: [...prev.images, ...files].slice(0, 10)\n    }));\n  };\n\n  const removeImage = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      images: prev.images.filter((_, i) => i !== index)\n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validation\n    if (!formData.title || !formData.type || !formData.price || !formData.address) {\n      toast({\n        title: \"Champs requis manquants\",\n        description: \"Veuillez remplir tous les champs obligatoires\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Update property\n    const properties = JSON.parse(localStorage.getItem(\"userProperties\") || \"[]\");\n    const updatedProperties = properties.map((p: any) => \n      p.id === parseInt(id || \"0\") ? { ...formData, updatedAt: new Date().toISOString() } : p\n    );\n    localStorage.setItem(\"userProperties\", JSON.stringify(updatedProperties));\n\n    toast({\n      title: \"Bien mis à jour!\",\n      description: \"Les modifications ont été sauvegardées\",\n    });\n\n    navigate(\"/manage-properties\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/manage-properties\")}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <Home className=\"h-8 w-8 text-primary\" />\n              <span>Modifier le bien</span>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Modifiez les informations de votre propriété\n            </p>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Basic Info */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Informations de base</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Titre de l'annonce *</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => handleInputChange('title', e.target.value)}\n                    placeholder=\"Ex: Studio moderne près INSAT\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"type\">Type de bien *</Label>\n                    <Select value={formData.type} onValueChange={(value) => handleInputChange('type', value)}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Sélectionner\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {propertyTypes.map(type => (\n                          <SelectItem key={type.value} value={type.value}>\n                            {type.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"surface\">Surface (m²) *</Label>\n                    <Input\n                      id=\"surface\"\n                      type=\"number\"\n                      value={formData.surface}\n                      onChange={(e) => handleInputChange('surface', e.target.value)}\n                      placeholder=\"35\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"rooms\">Nombre de pièces</Label>\n                    <Input\n                      id=\"rooms\"\n                      type=\"number\"\n                      value={formData.rooms}\n                      onChange={(e) => handleInputChange('rooms', e.target.value)}\n                      placeholder=\"1\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"bathrooms\">Salles de bain</Label>\n                    <Input\n                      id=\"bathrooms\"\n                      type=\"number\"\n                      value={formData.bathrooms}\n                      onChange={(e) => handleInputChange('bathrooms', e.target.value)}\n                      placeholder=\"1\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => handleInputChange('description', e.target.value)}\n                    placeholder=\"Décrivez votre bien...\"\n                    rows={4}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"address\">Adresse complète *</Label>\n                  <Input\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    placeholder=\"Rue Ibn Khaldoun, Raoued 2088\"\n                    required\n                  />\n                </div>\n\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={handleLocationClick}\n                  className=\"w-full\"\n                >\n                  <MapPin className=\"h-4 w-4 mr-2\" />\n                  Définir la position exacte\n                </Button>\n                \n                {formData.location && formData.location.lat !== 0 && formData.location.lng !== undefined && (\n                  <p className=\"text-sm text-success\">\n                    ✓ Position définie: {formData.location.lat.toFixed(4)}, {formData.location.lng.toFixed(4)}\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Amenities */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Équipements</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {availableAmenities.map((amenity) => (\n                    <div key={amenity.id} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={amenity.id}\n                        checked={formData.amenities.includes(amenity.id)}\n                        onCheckedChange={() => toggleAmenity(amenity.id)}\n                      />\n                      <Label htmlFor={amenity.id} className=\"flex items-center space-x-2 cursor-pointer\">\n                        {amenity.icon}\n                        <span className=\"text-sm\">{amenity.label}</span>\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Rules */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Règles du logement</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    value={newRule}\n                    onChange={(e) => setNewRule(e.target.value)}\n                    placeholder=\"Ajouter une règle...\"\n                    onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addRule())}\n                  />\n                  <Button type=\"button\" onClick={addRule}>\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {formData.rules.map((rule, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 glass-card rounded\">\n                      <span className=\"text-sm\">{rule}</span>\n                      <Button \n                        type=\"button\" \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => removeRule(index)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Images */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Photos</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"images\">Ajouter des photos</Label>\n                  <Input\n                    id=\"images\"\n                    type=\"file\"\n                    multiple\n                    accept=\"image/*\"\n                    onChange={handleImageUpload}\n                  />\n                </div>\n\n                {formData.images.length > 0 && (\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    {formData.images.map((image, index) => (\n                      <div key={index} className=\"relative\">\n                        <div className=\"aspect-square bg-muted rounded-lg flex items-center justify-center\">\n                          <Upload className=\"h-6 w-6 text-muted-foreground\" />\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          className=\"absolute -top-2 -right-2\"\n                          onClick={() => removeImage(index)}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Status */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Statut du bien</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Select value={formData.status} onValueChange={(value) => handleInputChange('status', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sélectionner le statut\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Disponible\">Disponible</SelectItem>\n                    <SelectItem value=\"Occupé\">Occupé</SelectItem>\n                    <SelectItem value=\"En rénovation\">En rénovation</SelectItem>\n                    <SelectItem value=\"En attente\">En attente</SelectItem>\n                    <SelectItem value=\"Indisponible\">Indisponible</SelectItem>\n                  </SelectContent>\n                </Select>\n              </CardContent>\n            </Card>\n            {/* Pricing */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Tarification</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <div>\n                    <Label htmlFor=\"price\">Prix *</Label>\n                    <Input\n                      id=\"price\"\n                      type=\"number\"\n                      value={formData.price}\n                      onChange={(e) => handleInputChange('price', e.target.value)}\n                      placeholder=\"450\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"priceType\">Période</Label>\n                    <Select value={formData.priceType} onValueChange={(value) => handleInputChange('priceType', value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"jour\">Jour</SelectItem>\n                        <SelectItem value=\"semaine\">Semaine</SelectItem>\n                        <SelectItem value=\"mois\">Mois</SelectItem>\n                        <SelectItem value=\"année\">Année</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"deposit\">Caution (TND)</Label>\n                  <Input\n                    id=\"deposit\"\n                    type=\"number\"\n                    value={formData.pricing.deposit}\n                    onChange={(e) => handleInputChange('pricing.deposit', e.target.value)}\n                    placeholder=\"450\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fees\">Frais de dossier (TND)</Label>\n                  <Input\n                    id=\"fees\"\n                    type=\"number\"\n                    value={formData.pricing.fees}\n                    onChange={(e) => handleInputChange('pricing.fees', e.target.value)}\n                    placeholder=\"50\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"utilitiesIncluded\"\n                    checked={formData.pricing.utilitiesIncluded}\n                    onCheckedChange={(checked) => handleInputChange('pricing.utilitiesIncluded', checked)}\n                  />\n                  <Label htmlFor=\"utilitiesIncluded\">Charges incluses</Label>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Actions */}\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <Button type=\"submit\" className=\"w-full\">\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Sauvegarder les modifications\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => navigate(\"/manage-properties\")}\n                  >\n                    Annuler\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EditProperty;","size_bytes":20989},"client/src/pages/Favorites.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Heart, \n  Star, \n  MapPin, \n  Home, \n  Trash2,\n  Search\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst Favorites = () => {\n  const [favorites, setFavorites] = useState<any[]>([]);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Mock favorites data\n  const mockFavorites = [\n    {\n      id: 1,\n      title: \"Studio moderne près INSAT\",\n      price: 450,\n      priceType: \"mois\",\n      location: \"Ariana, Raoued\",\n      distance: \"200m de l'INSAT\",\n      rating: 4.8,\n      reviews: 24,\n      type: \"studio\",\n      amenities: [\"wifi\", \"furnished\", \"parking\"],\n      images: [\"/placeholder.svg\"],\n      isStudentFriendly: true,\n      owner: \"Ahmed Karim\",\n      available: true,\n      addedToFavorites: \"2024-01-15\"\n    },\n    {\n      id: 2,\n      title: \"Appartement 2 pièces famille\",\n      price: 680,\n      priceType: \"mois\",\n      location: \"Tunis, Bardo\",\n      distance: \"5 min de l'école primaire\",\n      rating: 4.6,\n      reviews: 18,\n      type: \"apartment\",\n      amenities: [\"wifi\", \"garden\", \"security\"],\n      images: [\"/placeholder.svg\"],\n      isFamilyFriendly: true,\n      owner: \"Fatma Ben Ali\",\n      available: true,\n      addedToFavorites: \"2024-01-12\"\n    },\n    {\n      id: 3,\n      title: \"Villa avec jardin sécurisé\",\n      price: 1200,\n      priceType: \"mois\",\n      location: \"Sidi Bou Saïd\",\n      distance: \"10 min du centre\",\n      rating: 4.9,\n      reviews: 32,\n      type: \"villa\",\n      amenities: [\"wifi\", \"garden\", \"parking\", \"security\"],\n      images: [\"/placeholder.svg\"],\n      isFamilyFriendly: true,\n      owner: \"Mohamed Trabelsi\",\n      available: true,\n      addedToFavorites: \"2024-01-10\"\n    }\n  ];\n\n  useEffect(() => {\n    // Check authentication\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n\n    // Load favorites from localStorage or use mock data\n    const savedFavorites = localStorage.getItem(\"userFavorites\");\n    if (savedFavorites) {\n      setFavorites(JSON.parse(savedFavorites));\n    } else {\n      setFavorites(mockFavorites);\n      localStorage.setItem(\"userFavorites\", JSON.stringify(mockFavorites));\n    }\n  }, [navigate]);\n\n  const removeFavorite = (propertyId: number) => {\n    const updatedFavorites = favorites.filter(fav => fav.id !== propertyId);\n    setFavorites(updatedFavorites);\n    localStorage.setItem(\"userFavorites\", JSON.stringify(updatedFavorites));\n    \n    toast({\n      title: \"Retiré des favoris\",\n      description: \"Le bien a été retiré de vos favoris\",\n    });\n  };\n\n  const getAmenityIcon = (amenity: string): string => {\n    switch (amenity) {\n      case \"wifi\": return \"📶\";\n      case \"parking\": return \"🚗\";\n      case \"furnished\": return \"🛋️\";\n      case \"garden\": return \"🌿\";\n      case \"security\": return \"🔒\";\n      default: return \"✓\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <Heart className=\"h-8 w-8 text-destructive\" />\n              <span>Mes Favoris</span>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {favorites.length} bien(s) sauvegardé(s)\n            </p>\n          </div>\n          <Button onClick={() => navigate(\"/search\")} className=\"flex items-center space-x-2\">\n            <Search className=\"h-4 w-4\" />\n            <span>Continuer la recherche</span>\n          </Button>\n        </div>\n\n        {/* Favorites Grid */}\n        {favorites.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {favorites.map((property) => (\n              <Card \n                key={property.id} \n                className=\"glass-card cursor-pointer hover:scale-105 transition-transform\"\n                onClick={() => navigate(`/property/${property.id}`)}\n              >\n                <CardContent className=\"p-0\">\n                  {/* Image */}\n                  <div className=\"relative h-48 bg-muted rounded-t-lg overflow-hidden\">\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <Home className=\"h-12 w-12 text-muted-foreground\" />\n                    </div>\n                    \n                    {/* Remove from favorites button */}\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\" \n                      className=\"absolute top-2 right-2 bg-white/20 backdrop-blur-sm hover:bg-destructive/20\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeFavorite(property.id);\n                      }}\n                    >\n                      <Trash2 className=\"h-4 w-4 text-destructive\" />\n                    </Button>\n\n                    {/* Badges */}\n                    {!property.available && (\n                      <Badge className=\"absolute bottom-2 left-2\" variant=\"destructive\">\n                        Non disponible\n                      </Badge>\n                    )}\n                    {property.isStudentFriendly && (\n                      <Badge className=\"absolute top-2 left-2\" variant=\"default\">\n                        🎓 Étudiant\n                      </Badge>\n                    )}\n                    {property.isFamilyFriendly && (\n                      <Badge className=\"absolute top-2 left-2\" variant=\"default\">\n                        👨‍👩‍👧‍👦 Famille\n                      </Badge>\n                    )}\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"p-4\">\n                    <h3 className=\"font-semibold text-lg mb-2\">{property.title}</h3>\n                    <p className=\"text-primary font-bold text-xl mb-2\">\n                      {property.price} TND/{property.priceType}\n                    </p>\n                    \n                    <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                      <MapPin className=\"h-3 w-3 mr-1\" />\n                      <span>{property.location}</span>\n                    </div>\n                    \n                    <div className=\"flex items-center text-sm text-muted-foreground mb-3\">\n                      <span className=\"text-accent\">📍 {property.distance}</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Star className=\"h-4 w-4 fill-warning text-warning\" />\n                        <span className=\"text-sm font-medium\">{property.rating}</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          ({property.reviews} avis)\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* Amenities */}\n                    <div className=\"flex flex-wrap gap-1 mb-3\">\n                      {property.amenities.slice(0, 3).map((amenity) => (\n                        <Badge key={amenity} variant=\"outline\" className=\"text-xs\">\n                          {getAmenityIcon(amenity)}\n                        </Badge>\n                      ))}\n                      {property.amenities.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{property.amenities.length - 3}\n                        </Badge>\n                      )}\n                    </div>\n\n                    <div className=\"text-xs text-muted-foreground\">\n                      Ajouté le {new Date(property.addedToFavorites).toLocaleDateString('fr-FR')}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-16\">\n            <Heart className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Aucun favori pour le moment</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Explorez nos biens et ajoutez vos préférés à cette liste\n            </p>\n            <Button onClick={() => navigate(\"/search\")} className=\"flex items-center space-x-2\">\n              <Search className=\"h-4 w-4\" />\n              <span>Découvrir des biens</span>\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Favorites;","size_bytes":9055},"client/src/pages/Index.tsx":{"content":"import Header from \"@/components/Header\";\nimport HeroSection from \"@/components/HeroSection\";\nimport FeaturesSection from \"@/components/FeaturesSection\";\nimport Footer from \"@/components/Footer\";\n\nconst Index = () => {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <HeroSection />\n      <FeaturesSection />\n      <Footer />\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":403},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MapPin, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!username || !password) {\n      toast({\n        title: \"Erreur\",\n        description: \"Veuillez remplir tous les champs.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      const response = await apiRequest(\"/api/auth/login\", {\n        method: \"POST\",\n        body: JSON.stringify({ username, password }),\n      });\n      \n      // Store user session data\n      localStorage.setItem(\"isAuthenticated\", \"true\");\n      localStorage.setItem(\"authToken\", response.token);\n      localStorage.setItem(\"userData\", JSON.stringify(response.user));\n      localStorage.setItem(\"userType\", response.user.userType);\n      localStorage.setItem(\"userId\", response.user.id.toString());\n      \n      toast({\n        title: \"Connexion réussie!\",\n        description: response.message || \"Vous êtes maintenant connecté à Ekrili.\",\n      });\n      \n      navigate(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      toast({\n        title: \"Erreur de connexion\",\n        description: \"Nom d'utilisateur ou mot de passe incorrect.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md glass-card\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"gradient-primary p-2 rounded-xl\">\n              <MapPin className=\"h-6 w-6 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold gradient-text\">Ekrili</h1>\n          </div>\n          <CardTitle className=\"text-2xl\">Connexion</CardTitle>\n          <CardDescription>\n            Accédez à votre compte Ekrili\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Nom d'utilisateur</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"ahmed_malik\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Mot de passe</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                disabled={isLoading}\n                required\n              />\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Connexion...\n                </>\n              ) : (\n                \"Se connecter\"\n              )}\n            </Button>\n            <p className=\"text-sm text-muted-foreground text-center\">\n              Pas encore de compte?{\" \"}\n              <Link to=\"/signup\" className=\"text-primary hover:underline\">\n                S'inscrire\n              </Link>\n            </p>\n            <div className=\"text-xs text-muted-foreground text-center space-y-1\">\n              <p className=\"font-semibold\">Comptes de test:</p>\n              <p><strong>Propriétaires:</strong> ahmed_malik ou sara_ben_ali</p>\n              <p><strong>Locataires:</strong> mohamed_student, amira_etudiant ou youssef_learner</p>\n              <p><strong>Mot de passe:</strong> hashed_password_123 (ou 456, 789, 101, 202)</p>\n            </div>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n};\n\nexport default Login;","size_bytes":4841},"client/src/pages/ManageProperties.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { \n  Home, \n  Plus,\n  Eye,\n  MessageSquare,\n  Edit,\n  Trash2,\n  Search,\n  Calendar,\n  DollarSign,\n  TrendingUp,\n  FileText\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst ManageProperties = () => {\n  const [properties, setProperties] = useState<any[]>([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [showContractDialog, setShowContractDialog] = useState(false);\n  const [selectedProperty, setSelectedProperty] = useState<any>(null);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Mock properties data\n  const mockProperties = [\n    {\n      id: 1,\n      title: \"Villa familiale avec jardin\",\n      type: \"villa\",\n      price: 1200,\n      priceType: \"mois\",\n      address: \"Sidi Bou Saïd\",\n      status: \"Occupé\",\n      tenant: \"Famille Gharbi\",\n      contractEnd: \"2024-12-31\",\n      views: 234,\n      messages: 8,\n      revenue: 14400,\n      createdAt: \"2023-06-15\",\n      images: [\"/placeholder.svg\"]\n    },\n    {\n      id: 2,\n      title: \"Studio étudiant meublé\",\n      type: \"studio\",\n      price: 480,\n      priceType: \"mois\",\n      address: \"Tunis, Manouba\",\n      status: \"Disponible\",\n      tenant: null,\n      contractEnd: null,\n      views: 156,\n      messages: 12,\n      revenue: 5760,\n      createdAt: \"2023-08-20\",\n      images: [\"/placeholder.svg\"]\n    },\n    {\n      id: 3,\n      title: \"Appartement 2 pièces moderne\",\n      type: \"apartment\",\n      price: 650,\n      priceType: \"mois\",\n      address: \"Tunis, Bardo\",\n      status: \"En rénovation\",\n      tenant: null,\n      contractEnd: null,\n      views: 89,\n      messages: 3,\n      revenue: 0,\n      createdAt: \"2024-01-10\",\n      images: [\"/placeholder.svg\"]\n    }\n  ];\n\n  useEffect(() => {\n    // Check if user is authenticated and is an owner\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    const userType = localStorage.getItem(\"userType\");\n    \n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n    \n    if (userType !== \"owner\") {\n      toast({\n        title: \"Accès refusé\",\n        description: \"Seuls les propriétaires peuvent accéder à cette page\",\n        variant: \"destructive\",\n      });\n      navigate(\"/dashboard\");\n      return;\n    }\n\n    // Fetch properties from API\n    fetchOwnerProperties();\n  }, [navigate, toast]);\n\n  const fetchOwnerProperties = async () => {\n    try {\n      const currentUser = JSON.parse(localStorage.getItem(\"currentUser\") || \"{}\");\n      const response = await fetch(`/api/properties?ownerId=${currentUser.id}`);\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch properties\");\n      }\n      \n      const fetchedProperties = await response.json();\n      setProperties(fetchedProperties.map((property: any) => ({\n        ...property,\n        revenue: 0, // Will be calculated from contracts later\n        views: Math.floor(Math.random() * 300), // Mock for now\n        messages: Math.floor(Math.random() * 20), // Mock for now\n        tenant: null, // Will be populated from active contracts\n        contractEnd: null\n      })));\n    } catch (error) {\n      console.error(\"Error fetching properties:\", error);\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de charger vos biens\",\n        variant: \"destructive\",\n      });\n      // Fallback to empty array instead of mock data\n      setProperties([]);\n    }\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         property.address.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = !statusFilter || statusFilter === \"all\" || property.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Occupé\": return \"default\";\n      case \"Disponible\": return \"success\";\n      case \"En rénovation\": return \"warning\";\n      case \"En attente\": return \"secondary\";\n      default: return \"outline\";\n    }\n  };\n\n  const generateContract = (propertyId: number) => {\n    toast({\n      title: \"Contrat généré\",\n      description: \"Le contrat numérique a été créé et envoyé au locataire\",\n    });\n  };\n\n  const deleteProperty = (propertyId: number) => {\n    const updatedProperties = properties.filter(p => p.id !== propertyId);\n    setProperties(updatedProperties);\n    localStorage.setItem(\"userProperties\", JSON.stringify(updatedProperties));\n    \n    toast({\n      title: \"Bien supprimé\",\n      description: \"Le bien a été retiré de votre portfolio\",\n    });\n  };\n\n  const handleContractAction = (propertyId: number) => {\n    const property = properties.find(p => p.id === propertyId);\n    setSelectedProperty(property);\n    setShowContractDialog(true);\n  };\n\n  const navigateToContracts = () => {\n    navigate(\"/contracts\");\n  };\n\n  const createContractForProperty = () => {\n    if (selectedProperty) {\n      navigate(`/create-contract?propertyId=${selectedProperty.id}`);\n    }\n    setShowContractDialog(false);\n  };\n\n  // Calculate stats\n  const stats = {\n    totalProperties: properties.length,\n    occupiedProperties: properties.filter(p => p.status === \"Occupé\").length,\n    availableProperties: properties.filter(p => p.status === \"Disponible\").length,\n    totalRevenue: properties.reduce((sum, p) => sum + p.revenue, 0),\n    averageViews: Math.round(properties.reduce((sum, p) => sum + p.views, 0) / properties.length) || 0\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <Home className=\"h-8 w-8 text-primary\" />\n              <span>Gérer mes biens</span>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {properties.length} bien(s) dans votre portfolio\n            </p>\n          </div>\n          <Button onClick={() => navigate(\"/add-property\")} className=\"flex items-center space-x-2\">\n            <Plus className=\"h-4 w-4\" />\n            <span>Ajouter un bien</span>\n          </Button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-8\">\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Home className=\"h-4 w-4 text-primary\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Total biens</p>\n                  <p className=\"text-xl font-bold\">{stats.totalProperties}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"h-4 w-4 text-success\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Occupés</p>\n                  <p className=\"text-xl font-bold\">{stats.occupiedProperties}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Home className=\"h-4 w-4 text-warning\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Disponibles</p>\n                  <p className=\"text-xl font-bold\">{stats.availableProperties}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-4 w-4 text-accent\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Revenus</p>\n                  <p className=\"text-xl font-bold\">{stats.totalRevenue.toLocaleString()} TND</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-card\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-4 w-4 text-primary\" />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Vues moy.</p>\n                  <p className=\"text-xl font-bold\">{stats.averageViews}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"glass-card mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Rechercher par titre ou localisation...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Tous les statuts\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tous les statuts</SelectItem>\n                  <SelectItem value=\"Disponible\">Disponible</SelectItem>\n                  <SelectItem value=\"Occupé\">Occupé</SelectItem>\n                  <SelectItem value=\"En rénovation\">En rénovation</SelectItem>\n                  <SelectItem value=\"En attente\">En attente</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Properties List */}\n        <div className=\"space-y-4\">\n          {filteredProperties.map((property) => (\n            <Card key={property.id} className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-4 flex-1\">\n                    {/* Image */}\n                    <div className=\"w-20 h-20 bg-muted rounded-lg flex items-center justify-center\">\n                      <Home className=\"h-8 w-8 text-muted-foreground\" />\n                    </div>\n\n                    {/* Info */}\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{property.title}</h3>\n                          <p className=\"text-muted-foreground text-sm\">{property.address}</p>\n                          <p className=\"text-primary font-medium\">{property.price} TND/{property.priceType}</p>\n                        </div>\n                        <Badge variant={getStatusColor(property.status) as any}>\n                          {property.status}\n                        </Badge>\n                      </div>\n\n                      {/* Tenant Info */}\n                      {property.tenant && (\n                        <div className=\"mb-2\">\n                          <p className=\"text-sm\">\n                            <span className=\"text-muted-foreground\">Locataire:</span> {property.tenant}\n                          </p>\n                          <p className=\"text-sm\">\n                            <span className=\"text-muted-foreground\">Fin de contrat:</span> {new Date(property.contractEnd).toLocaleDateString('fr-FR')}\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Stats */}\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <span className=\"flex items-center space-x-1\">\n                          <Eye className=\"h-3 w-3\" />\n                          <span>{property.views || 0} vues</span>\n                        </span>\n                        <span className=\"flex items-center space-x-1\">\n                          <MessageSquare className=\"h-3 w-3\" />\n                          <span>{property.messages || 0} messages</span>\n                        </span>\n                        <span className=\"flex items-center space-x-1\">\n                          <DollarSign className=\"h-3 w-3\" />\n                          <span>{(property.revenue || 0).toLocaleString()} TND revenus</span>\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center space-x-2 ml-4\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => navigate(`/property/${property.id}`)}\n                    >\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      Voir\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => navigate(`/edit-property/${property.id}`)}\n                    >\n                      <Edit className=\"h-3 w-3 mr-1\" />\n                      Modifier\n                    </Button>\n\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleContractAction(property.id)}\n                    >\n                      <FileText className=\"h-3 w-3 mr-1\" />\n                      Contrat\n                    </Button>\n\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => navigate(`/messages?contact=${property.tenant || 'prospects'}`)}\n                    >\n                      <MessageSquare className=\"h-3 w-3 mr-1\" />\n                      Messages\n                    </Button>\n\n                    <Button \n                      variant=\"destructive\" \n                      size=\"sm\"\n                      onClick={() => deleteProperty(property.id)}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredProperties.length === 0 && (\n          <div className=\"text-center py-16\">\n            <Home className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">\n              {searchQuery || statusFilter ? \"Aucun bien trouvé\" : \"Aucun bien pour le moment\"}\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              {searchQuery || statusFilter \n                ? \"Essayez de modifier vos critères de recherche\"\n                : \"Commencez par ajouter votre premier bien\"\n              }\n            </p>\n            {!searchQuery && !statusFilter && (\n              <Button onClick={() => navigate(\"/add-property\")} className=\"flex items-center space-x-2\">\n                <Plus className=\"h-4 w-4\" />\n                <span>Ajouter un bien</span>\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Contract Action Dialog */}\n      <AlertDialog open={showContractDialog} onOpenChange={setShowContractDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Gestion des contrats</AlertDialogTitle>\n            <AlertDialogDescription>\n              {selectedProperty && (\n                <>\n                  Que souhaitez-vous faire pour le bien \"{selectedProperty.title}\" ?\n                  <br />\n                  <span className=\"text-sm text-muted-foreground\">\n                    Statut actuel: {selectedProperty.status}\n                  </span>\n                </>\n              )}\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter className=\"flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2\">\n            <AlertDialogAction onClick={navigateToContracts} className=\"w-full\">\n              Voir tous mes contrats\n            </AlertDialogAction>\n            <AlertDialogAction onClick={createContractForProperty} className=\"w-full\">\n              Créer un nouveau contrat\n            </AlertDialogAction>\n            <AlertDialogCancel className=\"w-full\">Annuler</AlertDialogCancel>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default ManageProperties;","size_bytes":17898},"client/src/pages/MapView.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  ArrowLeft,\n  MapPin, \n  Search,\n  Filter,\n  Heart,\n  Star,\n  Home,\n  Layers\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst MapView = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedProperty, setSelectedProperty] = useState<any>(null);\n  const [showFilters, setShowFilters] = useState(false);\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  // Mock properties data with coordinates\n  const properties = [\n    {\n      id: 1,\n      title: \"Studio moderne près INSAT\",\n      price: 450,\n      location: \"Ariana, Raoued\",\n      coordinates: { lat: 36.8622, lng: 10.1958 },\n      type: \"studio\",\n      rating: 4.8,\n      reviews: 24\n    },\n    {\n      id: 2,\n      title: \"Appartement 2 pièces\",\n      price: 680,\n      location: \"Tunis, Manouba\",\n      coordinates: { lat: 36.8083, lng: 10.0963 },\n      type: \"apartment\",\n      rating: 4.5,\n      reviews: 18\n    },\n    {\n      id: 3,\n      title: \"Villa avec jardin\",\n      price: 1200,\n      location: \"Sidi Bou Saïd\",\n      coordinates: { lat: 36.8704, lng: 10.3472 },\n      type: \"villa\",\n      rating: 4.9,\n      reviews: 31\n    }\n  ];\n\n  const handlePropertyClick = (property: any) => {\n    setSelectedProperty(property);\n  };\n\n  const handleFavorite = (propertyId: number) => {\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      toast({\n        title: \"Connexion requise\",\n        description: \"Connectez-vous pour ajouter aux favoris.\",\n        variant: \"destructive\",\n      });\n      navigate(\"/login\");\n      return;\n    }\n\n    toast({\n      title: \"Ajouté aux favoris\",\n      description: \"Bien ajouté à vos favoris\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-6\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/search\")}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour à la liste\n          </Button>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <MapPin className=\"h-8 w-8 text-primary\" />\n              <span>Carte Interactive</span>\n            </h1>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"glass-card mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Rechercher par lieu, type de bien...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Button \n                variant=\"outline\"\n                onClick={() => setShowFilters(!showFilters)}\n              >\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filtres\n              </Button>\n            </div>\n            \n            {showFilters && (\n              <div className=\"mt-4 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Type de bien\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"studio\">Studio</SelectItem>\n                    <SelectItem value=\"apartment\">Appartement</SelectItem>\n                    <SelectItem value=\"villa\">Villa</SelectItem>\n                    <SelectItem value=\"vacation\">Maison de vacances</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Prix max\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"500\">Jusqu'à 500 TND</SelectItem>\n                    <SelectItem value=\"1000\">Jusqu'à 1000 TND</SelectItem>\n                    <SelectItem value=\"1500\">Jusqu'à 1500 TND</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Surface\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"50\">Jusqu'à 50m²</SelectItem>\n                    <SelectItem value=\"100\">Jusqu'à 100m²</SelectItem>\n                    <SelectItem value=\"150\">Plus de 150m²</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Map Container */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-0\">\n                <div className=\"relative h-96 lg:h-[600px] bg-muted rounded-lg overflow-hidden\">\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 to-accent/20\"></div>\n                  \n                  {/* Map Markers */}\n                  {properties.map((property) => (\n                    <div\n                      key={property.id}\n                      className=\"absolute cursor-pointer transform -translate-x-1/2 -translate-y-1/2 z-10\"\n                      style={{\n                        left: `${30 + (property.id * 25)}%`,\n                        top: `${20 + (property.id * 15)}%`\n                      }}\n                      onClick={() => handlePropertyClick(property)}\n                    >\n                      <div className=\"relative\">\n                        <div className=\"bg-primary text-primary-foreground px-3 py-2 rounded-lg shadow-lg border-2 border-background\">\n                          <div className=\"text-sm font-medium\">{property.price} TND</div>\n                          <div className=\"text-xs\">{property.type}</div>\n                        </div>\n                        <div className=\"absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-primary\"></div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {/* Map Center */}\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center text-foreground/60\">\n                      <Layers className=\"h-16 w-16 mx-auto mb-4\" />\n                      <p className=\"font-medium\">Carte Interactive de Tunis</p>\n                      <p className=\"text-sm\">Cliquez sur les marqueurs pour voir les détails</p>\n                    </div>\n                  </div>\n                  \n                  {/* Map Controls */}\n                  <div className=\"absolute top-4 right-4 space-y-2\">\n                    <Button size=\"sm\" variant=\"secondary\">+</Button>\n                    <Button size=\"sm\" variant=\"secondary\">-</Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Property Details Sidebar */}\n          <div className=\"space-y-6\">\n            {selectedProperty ? (\n              <Card className=\"glass-card\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">{selectedProperty.title}</h3>\n                        <p className=\"text-muted-foreground text-sm flex items-center\">\n                          <MapPin className=\"h-3 w-3 mr-1\" />\n                          {selectedProperty.location}\n                        </p>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleFavorite(selectedProperty.id)}\n                      >\n                        <Heart className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Star className=\"h-4 w-4 fill-warning text-warning\" />\n                        <span className=\"font-medium\">{selectedProperty.rating}</span>\n                        <span className=\"text-muted-foreground text-sm\">({selectedProperty.reviews} avis)</span>\n                      </div>\n                      <Badge variant=\"outline\">{selectedProperty.type}</Badge>\n                    </div>\n\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {selectedProperty.price} TND/mois\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Button \n                        className=\"w-full\"\n                        onClick={() => navigate(`/property/${selectedProperty.id}`)}\n                      >\n                        <Home className=\"h-4 w-4 mr-2\" />\n                        Voir les détails\n                      </Button>\n                      <Button variant=\"outline\" className=\"w-full\">\n                        Contacter le propriétaire\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className=\"glass-card\">\n                <CardContent className=\"p-6 text-center\">\n                  <MapPin className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"font-semibold mb-2\">Sélectionnez un bien</h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    Cliquez sur un marqueur de la carte pour voir les détails du bien\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Properties List */}\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Biens disponibles ({properties.length})</h3>\n                <div className=\"space-y-3\">\n                  {properties.map((property) => (\n                    <div\n                      key={property.id}\n                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                        selectedProperty?.id === property.id \n                          ? 'border-primary bg-primary/5' \n                          : 'border-border hover:border-primary/50'\n                      }`}\n                      onClick={() => handlePropertyClick(property)}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <p className=\"font-medium text-sm\">{property.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">{property.location}</p>\n                          <div className=\"flex items-center space-x-1 mt-1\">\n                            <Star className=\"h-3 w-3 fill-warning text-warning\" />\n                            <span className=\"text-xs\">{property.rating}</span>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-sm\">{property.price} TND</p>\n                          <Badge variant=\"outline\" className=\"text-xs\">{property.type}</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MapView;","size_bytes":12681},"client/src/pages/Messages.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, Send, MessageCircle } from \"lucide-react\";\nimport Header from \"@/components/Header\";\n\nexport default function Messages() {\n  const [, navigate] = useLocation();\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current user from localStorage\n  const currentUser = JSON.parse(localStorage.getItem(\"user\") || '{\"id\": 1, \"userType\": \"tenant\"}');\n\n  // Get query parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const propertyId = parseInt(urlParams.get(\"propertyId\") || \"0\");\n  const ownerId = parseInt(urlParams.get(\"ownerId\") || \"0\");\n\n  // Fetch property details\n  const { data: property } = useQuery({\n    queryKey: [\"/api/properties\", propertyId],\n    queryFn: () => fetch(`/api/properties/${propertyId}`).then(res => res.json()),\n    enabled: propertyId > 0,\n  });\n\n  // Fetch owner details\n  const { data: owner } = useQuery({\n    queryKey: [\"/api/users\", ownerId],\n    queryFn: () => fetch(`/api/users/${ownerId}`).then(res => res.json()),\n    enabled: ownerId > 0,\n  });\n\n  // Send message mutation\n  const sendMessage = useMutation({\n    mutationFn: async (messageData: { propertyId: number; tenantId: number; ownerId: number; message: string }) => {\n      return await apiRequest(\"/api/conversations\", {\n        method: \"POST\",\n        body: JSON.stringify(messageData),\n      });\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      toast({\n        title: \"Message envoyé\",\n        description: \"Votre message a été envoyé avec succès\",\n      });\n      // Navigate to conversations list or stay on page\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer le message\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n    \n    sendMessage.mutate({\n      propertyId,\n      tenantId: currentUser.id,\n      ownerId,\n      message: message.trim(),\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(`/property/${propertyId}`)}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour à la propriété\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text\">Messages</h1>\n            <p className=\"text-muted-foreground\">\n              Conversation avec le propriétaire\n            </p>\n          </div>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          {/* Property and Owner Info */}\n          {property && owner && (\n            <Card className=\"mb-6 glass\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">À propos de cette propriété</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{property.title}</h3>\n                    <p className=\"text-muted-foreground\">{property.address}</p>\n                    <p className=\"font-bold text-primary text-xl mt-2\">{property.price} TND/mois</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">Propriétaire</p>\n                    <p className=\"text-muted-foreground\">{owner.firstName} {owner.lastName}</p>\n                    <p className=\"text-sm text-muted-foreground\">{owner.email}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Message Form */}\n          <Card className=\"glass\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <MessageCircle className=\"h-5 w-5 mr-2\" />\n                Envoyer un message\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Textarea\n                  placeholder=\"Tapez votre message ici...\"\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  rows={6}\n                  className=\"resize-none\"\n                />\n                <div className=\"flex justify-between items-center\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Le propriétaire recevra votre message et pourra vous répondre\n                  </p>\n                  <Button \n                    onClick={handleSendMessage}\n                    disabled={!message.trim() || sendMessage.isPending}\n                    className=\"min-w-24\"\n                  >\n                    {sendMessage.isPending ? (\n                      <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full\" />\n                    ) : (\n                      <>\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        Envoyer\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Message sent confirmation */}\n          {sendMessage.isSuccess && (\n            <Card className=\"mt-6 border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 rounded-full bg-green-100 dark:bg-green-900 flex items-center justify-center mx-auto mb-3\">\n                    <Send className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                  </div>\n                  <h3 className=\"font-semibold text-green-800 dark:text-green-200 mb-2\">\n                    Message envoyé avec succès !\n                  </h3>\n                  <p className=\"text-green-600 dark:text-green-300 text-sm\">\n                    Le propriétaire recevra une notification et pourra vous répondre.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6873},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location\n    );\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":713},"client/src/pages/Notifications.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Bell, \n  MessageSquare, \n  Home, \n  DollarSign,\n  FileText\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Notification {\n  id: number;\n  title: string;\n  message: string;\n  type: string;\n  relatedId?: number;\n  read: boolean;\n  createdAt: string;\n}\n\nconst Notifications = () => {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUserId = 1; // Should come from auth context\n\n  // Fetch real notifications from API\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: ['/api/notifications', currentUserId],\n    queryFn: async () => {\n      const response = await fetch(`/api/notifications?userId=${currentUserId}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to fetch notifications');\n      return response.json();\n    },\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  // Mark notification as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      return apiRequest(`/api/notifications/${notificationId}/read`, {\n        method: 'PUT'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    }\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'contract':\n      case 'contract_signature_required':\n      case 'contract_expired':\n      case 'contract_modified':\n        return <FileText className=\"h-4 w-4\" />;\n      case 'message':\n        return <MessageSquare className=\"h-4 w-4\" />;\n      case 'property':\n        return <Home className=\"h-4 w-4\" />;\n      case 'payment':\n        return <DollarSign className=\"h-4 w-4\" />;\n      default:\n        return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getNotificationColor = (type: string) => {\n    switch (type) {\n      case 'contract':\n      case 'contract_signature_required':\n        return 'text-blue-600';\n      case 'contract_expired':\n        return 'text-red-600';\n      case 'contract_modified':\n        return 'text-yellow-600';\n      case 'message':\n        return 'text-green-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    // Mark as read\n    if (!notification.read) {\n      markAsReadMutation.mutate(notification.id);\n    }\n\n    // Navigate based on type\n    switch (notification.type) {\n      case 'contract':\n      case 'contract_signature_required':\n      case 'contract_modified':\n        if (notification.relatedId) {\n          navigate(`/contract/${notification.relatedId}`);\n        } else {\n          navigate('/contracts');\n        }\n        break;\n      case 'message':\n        navigate('/messages');\n        break;\n      case 'property':\n        navigate('/manage-properties');\n        break;\n      default:\n        break;\n    }\n  };\n\n  const getTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diffInHours = Math.floor((now.getTime() - time.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"À l'instant\";\n    if (diffInHours < 24) return `Il y a ${diffInHours}h`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `Il y a ${diffInDays}j`;\n    \n    return time.toLocaleDateString('fr-FR');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/3 mb-4\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-20 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const unreadCount = notifications.filter((n: Notification) => !n.read).length;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center space-x-3\">\n              <Bell className=\"h-8 w-8 text-primary\" />\n              <span>Notifications</span>\n              {unreadCount > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Restez informé de toutes vos activités de location\n            </p>\n          </div>\n        </div>\n\n        {/* Notifications List */}\n        <div className=\"space-y-4\">\n          {notifications.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Bell className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Aucune notification</h3>\n                <p className=\"text-muted-foreground\">\n                  Vous n'avez pas encore de notifications.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            notifications.map((notification: Notification) => (\n              <Card \n                key={notification.id} \n                className={`cursor-pointer transition-all hover:shadow-md ${\n                  !notification.read ? 'border-primary bg-primary/5' : ''\n                }`}\n                onClick={() => handleNotificationClick(notification)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className={`p-2 rounded-full ${getNotificationColor(notification.type)}`}>\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-semibold text-sm\">{notification.title}</h4>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {getTimeAgo(notification.createdAt)}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {notification.message}\n                      </p>\n                      {!notification.read && (\n                        <Badge variant=\"secondary\" className=\"mt-2 text-xs\">\n                          Nouveau\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Notifications;","size_bytes":7453},"client/src/pages/PropertyDetails.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertOfferSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { MapPin, Home, Bed, Bath, Phone, MessageCircle, Banknote, ArrowLeft, Star, Heart, Share, Calendar, Users, Wifi, Car, Utensils, Tv, Wind, Droplets, ChevronLeft, ChevronRight, ExternalLink, Map, StarIcon, Clock, CheckCircle, XCircle, FileText } from \"lucide-react\";\nimport Header from \"@/components/Header\";\n\n\n\ntype OfferFormData = z.infer<typeof insertOfferSchema>;\n\nexport default function PropertyDetails() {\n  const [, params] = useRoute(\"/property/:id\");\n  const [, navigate] = useLocation();\n  const [isOfferDialogOpen, setIsOfferDialogOpen] = useState(false);\n  const [isMessageDialogOpen, setIsMessageDialogOpen] = useState(false);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [messageContent, setMessageContent] = useState(\"\");\n  const [reviewRating, setReviewRating] = useState(0);\n  const [reviewComment, setReviewComment] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const propertyId = params?.id ? parseInt(params.id) : 0;\n\n  // Get current user from localStorage\n  const getUserData = () => {\n    const userData = localStorage.getItem(\"userData\");\n    if (userData) {\n      try {\n        return JSON.parse(userData);\n      } catch (e) {\n        console.error(\"Error parsing userData:\", e);\n        return null;\n      }\n    }\n    return null;\n  };\n  \n  const currentUser = getUserData();\n\n  const { data: property, isLoading, error } = useQuery({\n    queryKey: [\"/api/properties\", propertyId],\n    queryFn: () => fetch(`/api/properties/${propertyId}`).then(res => {\n      if (!res.ok) {\n        throw new Error('Property not found');\n      }\n      return res.json();\n    }),\n    enabled: propertyId > 0,\n  });\n\n  // Fetch owner information\n  const { data: owner } = useQuery({\n    queryKey: [\"/api/users\", property?.ownerId],\n    queryFn: () => fetch(`/api/users/${property.ownerId}`).then(res => res.json()),\n    enabled: !!property?.ownerId,\n  });\n\n  // Fetch property reviews\n  const { data: reviews = [] } = useQuery({\n    queryKey: [\"/api/properties\", propertyId, \"reviews\"],\n    queryFn: () => fetch(`/api/properties/${propertyId}/reviews`).then(res => res.json()),\n    enabled: propertyId > 0,\n  });\n\n  // Fetch existing offers for this property and tenant\n  const { data: existingOffers = [] } = useQuery({\n    queryKey: [\"/api/offers\", \"tenant\", propertyId, currentUser?.id],\n    queryFn: async () => {\n      if (!currentUser) return [];\n      const response = await fetch(`/api/offers?userId=${currentUser.id}&userType=tenant`);\n      const allOffers = await response.json();\n      return allOffers.filter((offer: any) => offer.propertyId === propertyId);\n    },\n    enabled: propertyId > 0 && currentUser?.userType === \"tenant\",\n  });\n\n  const form = useForm({\n    resolver: zodResolver(z.object({\n      propertyId: z.number(),\n      tenantId: z.number(),\n      ownerId: z.number(),\n      startDate: z.string().transform((val) => new Date(val)),\n      endDate: z.string().transform((val) => new Date(val)),\n      monthlyRent: z.string(),\n      deposit: z.string().optional(),\n      conditions: z.string().optional(),\n      status: z.string().default(\"pending\"),\n    })),\n    defaultValues: {\n      propertyId: propertyId,\n      tenantId: currentUser.id,\n      ownerId: property?.ownerId || 0,\n      startDate: new Date().toISOString().split('T')[0],\n      endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      monthlyRent: property?.price || \"0\",\n      deposit: property?.deposit || \"0\",\n      conditions: \"\",\n      status: \"pending\",\n    },\n  });\n\n  const createOfferMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/offers\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        ...data,\n        startDate: new Date(data.startDate),\n        endDate: new Date(data.endDate),\n      }),\n    }),\n    onSuccess: () => {\n      toast({\n        title: \"Offre envoyée\",\n        description: \"Votre offre a été envoyée au propriétaire avec succès!\",\n      });\n      setIsOfferDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\", \"tenant\", propertyId, currentUser.id] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer l'offre. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: (data: { content: string }) => apiRequest(\"/api/conversations\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        propertyId: propertyId,\n        tenantId: currentUser.id,\n        ownerId: property?.ownerId,\n        message: data.content,\n      }),\n    }),\n    onSuccess: () => {\n      toast({\n        title: \"Message envoyé\",\n        description: \"Votre message a été envoyé au propriétaire!\",\n      });\n      setIsMessageDialogOpen(false);\n      setMessageContent(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer le message. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const requestContractMutation = useMutation({\n    mutationFn: (offerId: number) => apiRequest(`/api/offers/${offerId}/request-contract`, {\n      method: \"PUT\",\n    }),\n    onSuccess: () => {\n      toast({\n        title: \"Contrat demandé\",\n        description: \"Votre demande de contrat a été envoyée au propriétaire!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\", \"tenant\", propertyId, currentUser.id] });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de demander le contrat. Veuillez réessayer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    const offerData = {\n      ...data,\n      propertyId: propertyId,\n      tenantId: currentUser.id,\n      ownerId: property?.ownerId || 0,\n    };\n    createOfferMutation.mutate(offerData);\n  };\n\n  const handlePhoneCall = () => {\n    if (owner?.phone) {\n      window.open(`tel:${owner.phone}`, '_self');\n    } else {\n      toast({\n        title: \"Numéro indisponible\",\n        description: \"Le numéro de téléphone du propriétaire n'est pas disponible.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (messageContent.trim()) {\n      createMessageMutation.mutate({ content: messageContent });\n    }\n  };\n\n  const openMapsLocation = () => {\n    if (property?.latitude && property?.longitude) {\n      const mapsUrl = `https://www.google.com/maps?q=${property.latitude},${property.longitude}`;\n      window.open(mapsUrl, '_blank');\n    } else {\n      toast({\n        title: \"Localisation indisponible\",\n        description: \"Les coordonnées GPS de cette propriété ne sont pas disponibles.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\n            <div className=\"h-8 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !property) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Propriété non trouvée</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            La propriété avec l'ID {propertyId} n'existe pas ou n'est plus disponible.\n          </p>\n          <Button onClick={() => navigate(\"/search\")}>Retour à la recherche</Button>\n        </div>\n      </div>\n    );\n  }\n\n  // Check offer status for this property\n  const pendingOffer = existingOffers.find((offer: any) => offer.status === 'pending');\n  const acceptedOffer = existingOffers.find((offer: any) => offer.status === 'accepted');\n  const rejectedOffers = existingOffers.filter((offer: any) => offer.status === 'rejected');\n\n  // Only tenants can make offers, and only if they're not the owner and property is available\n  const canMakeOffer = currentUser.userType === \"tenant\" && \n                      property && \n                      property.ownerId !== currentUser.id && \n                      property.status === \"Disponible\" && \n                      !pendingOffer && \n                      !acceptedOffer;\n\n  const getAmenityIcon = (amenity: string) => {\n    const amenityLower = amenity.toLowerCase();\n    if (amenityLower.includes('wifi')) return <Wifi className=\"h-4 w-4\" />;\n    if (amenityLower.includes('parking')) return <Car className=\"h-4 w-4\" />;\n    if (amenityLower.includes('cuisine')) return <Utensils className=\"h-4 w-4\" />;\n    if (amenityLower.includes('tv')) return <Tv className=\"h-4 w-4\" />;\n    if (amenityLower.includes('climatisation')) return <Wind className=\"h-4 w-4\" />;\n    if (amenityLower.includes('chauffage')) return <Wind className=\"h-4 w-4\" />;\n    if (amenityLower.includes('piscine')) return <Droplets className=\"h-4 w-4\" />;\n    return <Star className=\"h-4 w-4\" />;\n  };\n\n  const nextImage = () => {\n    if (property.images && property.images.length > 0) {\n      setCurrentImageIndex((prev) => (prev + 1) % property.images.length);\n    }\n  };\n\n  const prevImage = () => {\n    if (property.images && property.images.length > 0) {\n      setCurrentImageIndex((prev) => (prev - 1 + property.images.length) % property.images.length);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/search\")}\n            className=\"flex items-center space-x-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span>Retour</span>\n          </Button>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"icon\">\n              <Heart className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\">\n              <Share className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Property Info */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Property Images Gallery */}\n            {property.images && property.images.length > 0 ? (\n              <div className=\"relative\">\n                <div className=\"aspect-video bg-gray-100 rounded-lg overflow-hidden\">\n                  <img\n                    src={property.images[currentImageIndex]}\n                    alt={`${property.title} - Image ${currentImageIndex + 1}`}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  {property.images.length > 1 && (\n                    <>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white\"\n                        onClick={prevImage}\n                      >\n                        <ChevronLeft className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/80 hover:bg-white\"\n                        onClick={nextImage}\n                      >\n                        <ChevronRight className=\"h-4 w-4\" />\n                      </Button>\n                    </>\n                  )}\n                </div>\n                \n                {/* Image thumbnails */}\n                {property.images.length > 1 && (\n                  <div className=\"flex space-x-2 mt-4 overflow-x-auto\">\n                    {property.images.map((image: string, index: number) => (\n                      <button\n                        key={index}\n                        onClick={() => setCurrentImageIndex(index)}\n                        className={`flex-shrink-0 w-20 h-16 rounded-lg overflow-hidden border-2 ${\n                          index === currentImageIndex ? 'border-primary' : 'border-transparent'\n                        }`}\n                      >\n                        <img\n                          src={image}\n                          alt={`Thumbnail ${index + 1}`}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"aspect-video bg-gradient-to-br from-primary/20 to-secondary/20 rounded-lg flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <Home className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Pas d'image disponible</p>\n                </div>\n              </div>\n            )}\n\n            {/* Property Details */}\n            <Card className=\"glass\">\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-3xl mb-2 gradient-text\">{property.title}</CardTitle>\n                    <div className=\"flex items-center text-muted-foreground mb-4 cursor-pointer hover:text-primary transition-colors\" onClick={openMapsLocation}>\n                      <MapPin className=\"h-4 w-4 mr-2\" />\n                      <span className=\"hover:underline\">{property.address}</span>\n                      <ExternalLink className=\"h-3 w-3 ml-1\" />\n                    </div>\n                    <div className=\"flex items-center space-x-6 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Home className=\"h-5 w-5 text-primary\" />\n                        <span className=\"font-semibold text-lg\">{property.rooms || 'N/A'}</span>\n                        <span className=\"text-muted-foreground\">ch</span>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Bath className=\"h-5 w-5 text-primary\" />\n                        <span className=\"font-semibold text-lg\">{property.bathrooms || 'N/A'}</span>\n                        <span className=\"text-muted-foreground\">sdb</span>\n                      </div>\n                      {property.surface && (\n                        <div className=\"flex items-center space-x-2\">\n                          <Users className=\"h-5 w-5 text-primary\" />\n                          <span className=\"font-semibold text-lg\">{property.surface}</span>\n                          <span className=\"text-muted-foreground\">m²</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge variant={property.status === \"Disponible\" ? \"default\" : \"secondary\"} className=\"mb-4 text-sm px-3 py-1\">\n                      {property.status}\n                    </Badge>\n                    <div className=\"text-4xl font-bold gradient-text mb-1\">\n                      {property.price} TND\n                    </div>\n                    <div className=\"text-muted-foreground\">\n                      /{property.priceType || 'mois'}\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"mb-6\">\n                  <h3 className=\"font-semibold mb-3 text-lg\">Description</h3>\n                  <p className=\"text-muted-foreground leading-relaxed text-base\">\n                    {property.description}\n                  </p>\n                </div>\n\n                {property.amenities && property.amenities.length > 0 && (\n                  <div>\n                    <h3 className=\"font-semibold mb-4 text-lg\">Équipements</h3>\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                      {property.amenities.map((amenity: string, index: number) => (\n                        <div key={index} className=\"flex items-center space-x-3 p-3 rounded-lg bg-muted/50 hover:bg-muted transition-colors\">\n                          {getAmenityIcon(amenity)}\n                          <span className=\"text-sm font-medium\">{amenity}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Integrated Maps */}\n                {property.latitude && property.longitude && (\n                  <div className=\"mt-6\">\n                    <h3 className=\"font-semibold mb-4 text-lg\">Localisation</h3>\n                    <div className=\"rounded-lg overflow-hidden border\">\n                      <iframe\n                        width=\"100%\"\n                        height=\"300\"\n                        frameBorder=\"0\"\n                        src={`https://www.google.com/maps/embed/v1/place?key=AIzaSyBFw0Qbyq9zTFTd-tUY6dOWTgaGzGnE_0M&q=${property.latitude},${property.longitude}&zoom=15`}\n                        allowFullScreen\n                        className=\"w-full\"\n                      />\n                      <div className=\"p-4 bg-muted/50\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"font-medium\">{property.address}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              GPS: {property.latitude}, {property.longitude}\n                            </p>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={openMapsLocation}\n                            className=\"flex items-center space-x-2\"\n                          >\n                            <ExternalLink className=\"h-3 w-3\" />\n                            <span>Ouvrir dans Maps</span>\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Reviews Section */}\n                <div className=\"mt-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-semibold text-lg\">Avis et commentaires</h3>\n                    {reviews.length > 0 && (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"flex\">\n                          {Array.from({length: 5}).map((_, i) => (\n                            <Star \n                              key={i} \n                              className={`h-4 w-4 ${i < Math.round(reviews.reduce((acc: number, r: any) => acc + r.rating, 0) / reviews.length) ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`} \n                            />\n                          ))}\n                        </div>\n                        <span className=\"text-sm text-muted-foreground\">\n                          ({reviews.length} avis)\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {reviews.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {reviews.slice(0, 3).map((review: any) => (\n                        <div key={review.id} className=\"p-4 rounded-lg bg-muted/30 border\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center\">\n                                <span className=\"text-sm font-medium\">U</span>\n                              </div>\n                              <div>\n                                <p className=\"font-medium text-sm\">Utilisateur #{review.userId}</p>\n                                <div className=\"flex\">\n                                  {Array.from({length: 5}).map((_, i) => (\n                                    <Star \n                                      key={i} \n                                      className={`h-3 w-3 ${i < review.rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`} \n                                    />\n                                  ))}\n                                </div>\n                              </div>\n                            </div>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(review.createdAt).toLocaleDateString()}\n                            </span>\n                          </div>\n                          {review.comment && (\n                            <p className=\"text-sm text-muted-foreground\">{review.comment}</p>\n                          )}\n                        </div>\n                      ))}\n                      {reviews.length > 3 && (\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                          Voir tous les avis ({reviews.length})\n                        </Button>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Star className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-muted-foreground\">Aucun avis pour le moment</p>\n                      <p className=\"text-sm text-muted-foreground\">Soyez le premier à laisser un avis!</p>\n                    </div>\n                  )}\n\n                  {/* Add Review Form */}\n                  {currentUser.id && currentUser.id !== property.ownerId && (\n                    <Card className=\"mt-4 glass\">\n                      <CardHeader>\n                        <CardTitle className=\"text-lg\">Laisser un avis</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Note</label>\n                            <div className=\"flex space-x-1\">\n                              {Array.from({length: 5}).map((_, i) => (\n                                <button\n                                  key={i}\n                                  onClick={() => setReviewRating(i + 1)}\n                                  className=\"transition-colors\"\n                                >\n                                  <Star \n                                    className={`h-6 w-6 ${i < reviewRating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300 hover:text-yellow-400'}`} \n                                  />\n                                </button>\n                              ))}\n                            </div>\n                          </div>\n                          <div>\n                            <label className=\"block text-sm font-medium mb-2\">Commentaire (optionnel)</label>\n                            <Textarea\n                              placeholder=\"Partagez votre expérience avec cette propriété...\"\n                              value={reviewComment}\n                              onChange={(e) => setReviewComment(e.target.value)}\n                              rows={3}\n                            />\n                          </div>\n                          <Button \n                            onClick={async () => {\n                              if (reviewRating === 0) {\n                                toast({\n                                  title: \"Note requise\",\n                                  description: \"Veuillez donner une note à cette propriété\",\n                                  variant: \"destructive\",\n                                });\n                                return;\n                              }\n                              \n                              try {\n                                await apiRequest(\"/api/reviews\", {\n                                  method: \"POST\",\n                                  body: JSON.stringify({\n                                    propertyId: property.id,\n                                    userId: currentUser.id,\n                                    rating: reviewRating,\n                                    comment: reviewComment.trim() || null,\n                                  }),\n                                });\n                                \n                                setReviewRating(0);\n                                setReviewComment(\"\");\n                                queryClient.invalidateQueries({ queryKey: [\"/api/properties\", propertyId, \"reviews\"] });\n                                \n                                toast({\n                                  title: \"Avis ajouté\",\n                                  description: \"Votre avis a été publié avec succès\",\n                                });\n                              } catch (error) {\n                                toast({\n                                  title: \"Erreur\",\n                                  description: \"Impossible d'ajouter votre avis\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                            disabled={reviewRating === 0}\n                            className=\"w-full\"\n                          >\n                            Publier l'avis\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Sidebar */}\n          <div className=\"space-y-4\">\n            <Card className=\"glass\">\n              <CardHeader>\n                <CardTitle className=\"gradient-text\">Contactez le propriétaire</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Make Offer Button or Status Messages */}\n                {canMakeOffer && (\n                  <Dialog open={isOfferDialogOpen} onOpenChange={setIsOfferDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button className=\"w-full gradient-button\" size=\"lg\">\n                        <Banknote className=\"mr-2 h-4 w-4\" />\n                        Faire une offre\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Faire une offre</DialogTitle>\n                        <DialogDescription>\n                          Proposez votre offre pour cette propriété au propriétaire\n                        </DialogDescription>\n                      </DialogHeader>\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"monthlyRent\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Montant proposé (TND/mois)</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder={`Prix affiché: ${property.price} TND`}\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"startDate\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Date de début</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"date\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"endDate\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Date de fin</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"date\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                          <FormField\n                            control={form.control}\n                            name=\"conditions\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Message au propriétaire</FormLabel>\n                                <FormControl>\n                                  <Textarea\n                                    placeholder=\"Expliquez pourquoi vous êtes intéressé par cette propriété...\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <Button \n                            type=\"submit\" \n                            className=\"w-full\"\n                            disabled={createOfferMutation.isPending}\n                          >\n                            {createOfferMutation.isPending ? \"Envoi en cours...\" : \"Envoyer l'offre\"}\n                          </Button>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                )}\n\n                {/* Pending Offer Status */}\n                {pendingOffer && (\n                  <div className=\"w-full p-4 rounded-lg bg-yellow-50 border border-yellow-200\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Clock className=\"h-4 w-4 text-yellow-600\" />\n                      <span className=\"font-medium text-yellow-800\">Offre en attente</span>\n                    </div>\n                    <p className=\"text-sm text-yellow-700\">\n                      Votre offre est en attente de réponse du propriétaire.\n                    </p>\n                  </div>\n                )}\n\n                {/* Accepted Offer Status */}\n                {acceptedOffer && (\n                  <div className=\"w-full space-y-3\">\n                    <div className=\"p-4 rounded-lg bg-green-50 border border-green-200\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <span className=\"font-medium text-green-800\">Offre acceptée</span>\n                      </div>\n                      <p className=\"text-sm text-green-700\">\n                        Félicitations! Votre offre a été acceptée.\n                      </p>\n                    </div>\n                    \n                    {acceptedOffer.status === 'accepted' && (\n                      <Button \n                        className=\"w-full gradient-button\" \n                        size=\"lg\"\n                        onClick={() => requestContractMutation.mutate(acceptedOffer.id)}\n                        disabled={requestContractMutation.isPending}\n                      >\n                        <FileText className=\"mr-2 h-4 w-4\" />\n                        {requestContractMutation.isPending ? \"Demande en cours...\" : \"Demander le contrat\"}\n                      </Button>\n                    )}\n\n                    {acceptedOffer.status === 'contract_requested' && (\n                      <div className=\"p-4 rounded-lg bg-blue-50 border border-blue-200\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <FileText className=\"h-4 w-4 text-blue-600\" />\n                          <span className=\"font-medium text-blue-800\">Contrat demandé</span>\n                        </div>\n                        <p className=\"text-sm text-blue-700\">\n                          Votre demande de contrat a été envoyée au propriétaire.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* Rejected Offer Status */}\n                {rejectedOffers.length > 0 && !pendingOffer && !acceptedOffer && (\n                  <div className=\"w-full p-4 rounded-lg bg-red-50 border border-red-200\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <XCircle className=\"h-4 w-4 text-red-600\" />\n                      <span className=\"font-medium text-red-800\">Offre refusée</span>\n                    </div>\n                    <p className=\"text-sm text-red-700\">\n                      Votre dernière offre a été refusée. Vous pouvez faire une nouvelle offre.\n                    </p>\n                  </div>\n                )}\n\n                {/* Contact Buttons */}\n                <div className=\"space-y-2\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\" \n                    onClick={handlePhoneCall}\n                    disabled={!owner?.phone}\n                  >\n                    <Phone className=\"mr-2 h-4 w-4\" />\n                    Appeler{owner?.phone ? ` ${owner.phone}` : ''}\n                  </Button>\n\n                  <Dialog open={isMessageDialogOpen} onOpenChange={setIsMessageDialogOpen}>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      onClick={() => navigate(`/messages?propertyId=${property.id}&ownerId=${property.ownerId}`)}\n                    >\n                      <MessageCircle className=\"mr-2 h-4 w-4\" />\n                      Message\n                    </Button>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Envoyer un message</DialogTitle>\n                        <DialogDescription>\n                          Contactez le propriétaire pour obtenir plus d'informations\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <Textarea\n                          placeholder=\"Tapez votre message ici...\"\n                          value={messageContent}\n                          onChange={(e) => setMessageContent(e.target.value)}\n                          rows={4}\n                        />\n                        <Button \n                          onClick={handleSendMessage}\n                          className=\"w-full\"\n                          disabled={!messageContent.trim() || createMessageMutation.isPending}\n                        >\n                          {createMessageMutation.isPending ? \"Envoi en cours...\" : \"Envoyer le message\"}\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n\n                {/* Owner Info */}\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-medium mb-3\">Propriétaire</h4>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 gradient-button rounded-full flex items-center justify-center text-white font-semibold\">\n                      {owner?.firstName?.[0] || owner?.username?.[0] || property.ownerId}\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">\n                        {owner?.firstName && owner?.lastName \n                          ? `${owner.firstName} ${owner.lastName}` \n                          : owner?.username || `Propriétaire #${property.ownerId}`}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {property.status === \"Disponible\" ? \"Disponible pour contact\" : \"Propriété occupée\"}\n                      </p>\n                      {owner?.phone && (\n                        <p className=\"text-sm text-muted-foreground\">{owner.phone}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":39084},"client/src/pages/Search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Search as SearchIcon, \n  MapPin, \n  Filter, \n  Heart, \n  Star, \n  Wifi, \n  Car, \n  GraduationCap,\n  Users,\n  Home,\n  Maximize\n} from \"lucide-react\";\n\nconst Search = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [priceRange, setPriceRange] = useState([0, 2000]);\n  const [propertyType, setPropertyType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [userLocation, setUserLocation] = useState<GeolocationPosition | null>(null);\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [, navigate] = useLocation();\n\n  const [properties, setProperties] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchProperties();\n  }, []);\n\n  const fetchProperties = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(\"/api/properties\");\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch properties\");\n      }\n      \n      const fetchedProperties = await response.json();\n      setProperties(fetchedProperties.map((property: any) => ({\n        ...property,\n        location: property.address,\n        rating: 4.5 + Math.random() * 0.5, // Mock rating for now\n        reviews: Math.floor(Math.random() * 50) + 5, // Mock reviews\n        owner: `Owner ${property.ownerId}`, // Will be populated with real owner data later\n        available: property.status === \"Disponible\",\n        isStudentFriendly: property.type === \"studio\" || property.amenities?.includes(\"étudiant\"),\n        isFamilyFriendly: property.type === \"villa\" || property.rooms >= 2\n      })));\n    } catch (error) {\n      console.error(\"Error fetching properties:\", error);\n      setProperties([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initialize filtered properties with fetched data\n  const [filteredProperties, setFilteredProperties] = useState<any[]>([]);\n\n  // Update filtered properties when properties change\n  useEffect(() => {\n    setFilteredProperties(properties);\n  }, [properties]);\n\n  useEffect(() => {\n    // Get user location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => setUserLocation(position),\n        (error) => console.log(\"Location access denied\")\n      );\n    }\n  }, []);\n\n  const handleLocationSearch = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation(position);\n          // Filter properties within 5km radius\n          const nearbyProperties = properties.filter(p => \n            p.location.includes(\"Tunis\") || p.location.includes(\"Ariana\")\n          );\n          setFilteredProperties(nearbyProperties);\n          console.log(\"📍 Position trouvée:\", position.coords.latitude, position.coords.longitude);\n        },\n        (error) => {\n          console.log(\"Erreur de géolocalisation:\", error);\n          // Fallback to nearby properties\n          const nearbyProperties = properties.filter(p => \n            p.location.includes(\"Tunis\") || p.location.includes(\"Ariana\")\n          );\n          setFilteredProperties(nearbyProperties);\n        }\n      );\n    }\n  };\n\n  const handleSearch = () => {\n    let filtered = properties;\n\n    if (searchQuery) {\n      filtered = filtered.filter(p => \n        p.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        p.location.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    if (propertyType && propertyType !== \"all\") {\n      filtered = filtered.filter(p => p.type === propertyType);\n    }\n\n    filtered = filtered.filter(p => parseFloat(p.price) >= priceRange[0] && parseFloat(p.price) <= priceRange[1]);\n\n    setFilteredProperties(filtered);\n  };\n\n  useEffect(() => {\n    handleSearch();\n  }, [searchQuery, propertyType, priceRange, properties]);\n\n  const getAmenityIcon = (amenity: string) => {\n    switch (amenity) {\n      case \"wifi\": return <Wifi className=\"h-4 w-4\" />;\n      case \"parking\": return <Car className=\"h-4 w-4\" />;\n      case \"furnished\": return <Home className=\"h-4 w-4\" />;\n      case \"garden\": return <span className=\"text-green-500\">🌿</span>;\n      case \"security\": return <span>🔒</span>;\n      default: return <span>✓</span>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Search Header */}\n        <div className=\"glass-card p-6 mb-8\">\n          <h1 className=\"text-3xl font-bold gradient-text mb-6\">Trouvez votre lieu idéal</h1>\n          \n          {/* Search Bar */}\n          <div className=\"flex flex-col md:flex-row gap-4 mb-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <SearchIcon className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Rechercher par ville, quartier, université...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            {/* Category Filters */}\n            <div className=\"flex flex-wrap gap-2\">\n              <Button \n                variant={categoryFilter === \"student\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setCategoryFilter(categoryFilter === \"student\" ? \"\" : \"student\")}\n              >\n                Pour étudiants\n              </Button>\n              <Button \n                variant={categoryFilter === \"family\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setCategoryFilter(categoryFilter === \"family\" ? \"\" : \"family\")}\n              >\n                Pour familles\n              </Button>\n            </div>\n\n            <Button \n              variant=\"outline\" \n              onClick={handleLocationSearch}\n              className=\"flex items-center space-x-2\"\n            >\n              <MapPin className=\"h-4 w-4\" />\n              <span>📍 Me localiser</span>\n            </Button>\n            \n            {/* Via Map Link */}\n            <Button \n              variant=\"outline\" \n              onClick={() => navigate(\"/map\")}\n              className=\"w-full md:w-auto\"\n            >\n              <MapPin className=\"h-4 w-4 mr-2\" />\n              Via Maps\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              onClick={() => setShowFilters(!showFilters)}\n              className=\"flex items-center space-x-2\"\n            >\n              <Filter className=\"h-4 w-4\" />\n              <span>Filtres</span>\n            </Button>\n          </div>\n\n          {/* Quick Filters */}\n          <div className=\"flex flex-wrap gap-2\">\n            <Button \n              variant={propertyType === \"studio\" ? \"default\" : \"outline\"} \n              size=\"sm\"\n              onClick={() => setPropertyType(propertyType === \"studio\" ? \"\" : \"studio\")}\n            >\n              🎓 Étudiants\n            </Button>\n            <Button \n              variant={propertyType === \"apartment\" ? \"default\" : \"outline\"} \n              size=\"sm\"\n              onClick={() => setPropertyType(propertyType === \"apartment\" ? \"\" : \"apartment\")}\n            >\n              👨‍👩‍👧‍👦 Familles\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              🏠 Meublé\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              🚗 Parking\n            </Button>\n          </div>\n        </div>\n\n        {/* Advanced Filters */}\n        {showFilters && (\n          <Card className=\"glass-card mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold mb-4\">Filtres avancés</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Type de bien</label>\n                  <Select value={propertyType} onValueChange={setPropertyType}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Tous types\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tous types</SelectItem>\n                      <SelectItem value=\"studio\">Studio</SelectItem>\n                      <SelectItem value=\"apartment\">Appartement</SelectItem>\n                      <SelectItem value=\"villa\">Villa</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">\n                    Prix: {priceRange[0]} - {priceRange[1]} TND/mois\n                  </label>\n                  <Slider\n                    value={priceRange}\n                    onValueChange={setPriceRange}\n                    max={2000}\n                    min={0}\n                    step={50}\n                    className=\"mt-2\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Équipements</label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox id=\"wifi\" />\n                      <label htmlFor=\"wifi\" className=\"text-sm\">Wi-Fi inclus</label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox id=\"furnished\" />\n                      <label htmlFor=\"furnished\" className=\"text-sm\">Meublé</label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox id=\"parking\" />\n                      <label htmlFor=\"parking\" className=\"text-sm\">Parking</label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Results */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-xl font-semibold\">\n            {filteredProperties.length} bien(s) trouvé(s)\n          </h2>\n          <Select defaultValue=\"price\" onValueChange={(value) => {\n            let sorted = [...filteredProperties];\n            switch(value) {\n              case \"price\":\n                sorted.sort((a, b) => a.price - b.price);\n                break;\n              case \"price-desc\":\n                sorted.sort((a, b) => b.price - a.price);\n                break;\n              case \"rating\":\n                sorted.sort((a, b) => b.rating - a.rating);\n                break;\n              case \"distance\":\n                // Mock distance sorting\n                sorted.sort((a, b) => parseInt(a.distance) - parseInt(b.distance));\n                break;\n            }\n            setFilteredProperties(sorted);\n          }}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"price\">Prix croissant</SelectItem>\n              <SelectItem value=\"price-desc\">Prix décroissant</SelectItem>\n              <SelectItem value=\"rating\">Mieux notés</SelectItem>\n              <SelectItem value=\"distance\">Plus proches</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Property Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredProperties.map((property) => (\n            <Card \n              key={property.id} \n              className=\"glass-card cursor-pointer hover:scale-105 transition-transform\"\n              onClick={() => navigate(`/property/${property.id}`)}\n            >\n              <CardContent className=\"p-0\">\n                {/* Image */}\n                <div className=\"relative h-48 bg-muted rounded-t-lg overflow-hidden\">\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <Home className=\"h-12 w-12 text-muted-foreground\" />\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\" \n                    className=\"absolute top-2 right-2 bg-white/20 backdrop-blur-sm\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Add to favorites\n                      const favorites = JSON.parse(localStorage.getItem(\"userFavorites\") || \"[]\");\n                      const isAlreadyFavorite = favorites.some((fav: any) => fav.id === property.id);\n                      \n                      if (!isAlreadyFavorite) {\n                        const newFavorite = { ...property, addedToFavorites: new Date().toISOString() };\n                        favorites.push(newFavorite);\n                        localStorage.setItem(\"userFavorites\", JSON.stringify(favorites));\n                        console.log(\"❤️ Ajouté aux favoris:\", property.title);\n                      }\n                    }}\n                  >\n                    <Heart className=\"h-4 w-4\" />\n                  </Button>\n                  {!property.available && (\n                    <Badge className=\"absolute bottom-2 left-2\" variant=\"destructive\">\n                      Non disponible\n                    </Badge>\n                  )}\n                  {property.isStudentFriendly && (\n                    <Badge className=\"absolute top-2 left-2\" variant=\"default\">\n                      <GraduationCap className=\"h-3 w-3 mr-1\" />\n                      Étudiant\n                    </Badge>\n                  )}\n                  {property.isFamilyFriendly && (\n                    <Badge className=\"absolute top-2 left-2\" variant=\"default\">\n                      <Users className=\"h-3 w-3 mr-1\" />\n                      Famille\n                    </Badge>\n                  )}\n                </div>\n\n                {/* Content */}\n                <div className=\"p-4\">\n                  <h3 className=\"font-semibold text-lg mb-2\">{property.title}</h3>\n                  <p className=\"text-primary font-bold text-xl mb-2\">\n                    {property.price} TND/{property.priceType}\n                  </p>\n                  \n                  <div className=\"flex items-center text-sm text-muted-foreground mb-2\">\n                    <MapPin className=\"h-3 w-3 mr-1\" />\n                    <span>{property.location}</span>\n                  </div>\n                  \n                  <div className=\"flex items-center text-sm text-muted-foreground mb-3\">\n                    <span className=\"text-accent\">📍 {property.distance}</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"h-4 w-4 fill-warning text-warning\" />\n                      <span className=\"text-sm font-medium\">{property.rating}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        ({property.reviews} avis)\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Amenities */}\n                  <div className=\"flex flex-wrap gap-1 mb-3\">\n                    {property.amenities?.slice(0, 3).map((amenity: string) => (\n                      <Badge key={amenity} variant=\"outline\" className=\"text-xs\">\n                        {getAmenityIcon(amenity)}\n                      </Badge>\n                    ))}\n                    {property.amenities && property.amenities.length > 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        +{property.amenities.length - 3}\n                      </Badge>\n                    )}\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground\">\n                    Par {property.owner}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredProperties.length === 0 && (\n          <div className=\"text-center py-12\">\n            <Home className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Aucun bien trouvé</h3>\n            <p className=\"text-muted-foreground\">\n              Essayez de modifier vos critères de recherche\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Search;","size_bytes":17323},"client/src/pages/Signup.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { MapPin, GraduationCap, Users, Building, Upload } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst Signup = () => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    userType: \"\",\n    cinNumber: \"\",\n    profilePicture: null as File | null,\n    acceptTerms: false,\n    studentInfo: {\n      university: \"\",\n      studentId: \"\"\n    },\n    socialAccounts: {\n      facebook: \"\",\n      instagram: \"\",\n      linkedin: \"\"\n    }\n  });\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const universities = [\n    \"Université de Tunis El Manar\",\n    \"Université de Sfax\", \n    \"INSAT\",\n    \"ENSI\",\n    \"IHEC\",\n    \"ESC Tunis\",\n    \"Autre\"\n  ];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Erreur\",\n        description: \"Les mots de passe ne correspondent pas.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.acceptTerms) {\n      toast({\n        title: \"Erreur\",\n        description: \"Vous devez accepter les conditions générales d'utilisation.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Mock registration\n    localStorage.setItem(\"isAuthenticated\", \"true\");\n    localStorage.setItem(\"userEmail\", formData.email);\n    localStorage.setItem(\"userType\", formData.userType);\n    localStorage.setItem(\"userProfile\", JSON.stringify(formData));\n    \n    // Special message for owners\n    if (formData.userType === \"owner\") {\n      toast({\n        title: \"Compte créé - En attente de validation\",\n        description: \"Votre compte propriétaire est en attente de validation par un administrateur. L'activation définitive se fera après paiement.\",\n      });\n    } else {\n      toast({\n        title: \"Inscription réussie!\",\n        description: \"Votre compte a été créé avec succès.\",\n      });\n    }\n    \n    navigate(\"/dashboard\");\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setFormData({ ...formData, profilePicture: file });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl glass-card\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"gradient-primary p-2 rounded-xl\">\n              <MapPin className=\"h-6 w-6 text-white\" />\n            </div>\n            <h1 className=\"text-2xl font-bold gradient-text\">Ekrili</h1>\n          </div>\n          <CardTitle className=\"text-2xl\">Créer un compte</CardTitle>\n          <CardDescription>\n            Rejoignez la communauté Ekrili\n          </CardDescription>\n        </CardHeader>\n        <form onSubmit={handleSubmit}>\n          <CardContent className=\"space-y-6\">\n            {/* Type d'utilisateur */}\n            <div className=\"space-y-3\">\n              <Label>Je suis...</Label>\n              <RadioGroup\n                value={formData.userType}\n                onValueChange={(value) => setFormData({ ...formData, userType: value })}\n                className=\"grid grid-cols-3 gap-4\"\n              >\n                <div className=\"flex items-center space-x-2 glass-card p-4 rounded-lg\">\n                  <RadioGroupItem value=\"tenant\" id=\"tenant\" />\n                  <Label htmlFor=\"tenant\" className=\"flex items-center space-x-2 cursor-pointer\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>Locataire</span>\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2 glass-card p-4 rounded-lg\">\n                  <RadioGroupItem value=\"student\" id=\"student\" />\n                  <Label htmlFor=\"student\" className=\"flex items-center space-x-2 cursor-pointer\">\n                    <GraduationCap className=\"h-4 w-4\" />\n                    <span>Étudiant</span>\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2 glass-card p-4 rounded-lg\">\n                  <RadioGroupItem value=\"owner\" id=\"owner\" />\n                  <Label htmlFor=\"owner\" className=\"flex items-center space-x-2 cursor-pointer\">\n                    <Building className=\"h-4 w-4\" />\n                    <span>Propriétaire</span>\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Informations personnelles */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">Prénom</Label>\n                <Input\n                  id=\"firstName\"\n                  value={formData.firstName}\n                  onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Nom</Label>\n                <Input\n                  id=\"lastName\"\n                  value={formData.lastName}\n                  onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}\n                  required\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Téléphone *</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                placeholder=\"+216 XX XXX XXX\"\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"cinNumber\">3 derniers chiffres de la CIN/Passeport *</Label>\n              <Input\n                id=\"cinNumber\"\n                value={formData.cinNumber}\n                onChange={(e) => setFormData({ ...formData, cinNumber: e.target.value })}\n                placeholder=\"123\"\n                maxLength={3}\n                required\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"profilePicture\">Photo de profil (facultative)</Label>\n              <Input\n                id=\"profilePicture\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleFileUpload}\n              />\n              {formData.profilePicture && (\n                <p className=\"text-sm text-success\">✓ Photo sélectionnée: {formData.profilePicture.name}</p>\n              )}\n            </div>\n\n            {/* Social Accounts */}\n            <div className=\"space-y-4 p-4 glass-card rounded-lg\">\n              <h3 className=\"font-semibold\">Comptes sociaux (facultatif)</h3>\n              <div className=\"grid grid-cols-1 gap-2\">\n                <Input\n                  placeholder=\"Profil Facebook\"\n                  value={formData.socialAccounts.facebook}\n                  onChange={(e) => setFormData({ \n                    ...formData, \n                    socialAccounts: { ...formData.socialAccounts, facebook: e.target.value }\n                  })}\n                />\n                <Input\n                  placeholder=\"Profil Instagram\"\n                  value={formData.socialAccounts.instagram}\n                  onChange={(e) => setFormData({ \n                    ...formData, \n                    socialAccounts: { ...formData.socialAccounts, instagram: e.target.value }\n                  })}\n                />\n                <Input\n                  placeholder=\"Profil LinkedIn\"\n                  value={formData.socialAccounts.linkedin}\n                  onChange={(e) => setFormData({ \n                    ...formData, \n                    socialAccounts: { ...formData.socialAccounts, linkedin: e.target.value }\n                  })}\n                />\n              </div>\n            </div>\n\n            {/* Informations étudiant */}\n            {formData.userType === \"student\" && (\n              <div className=\"space-y-4 p-4 glass-card rounded-lg\">\n                <h3 className=\"font-semibold flex items-center space-x-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  <span>Informations étudiant</span>\n                </h3>\n                <div className=\"space-y-2\">\n                  <Label>Université</Label>\n                  <Select\n                    value={formData.studentInfo.university}\n                    onValueChange={(value) => \n                      setFormData({ \n                        ...formData, \n                        studentInfo: { ...formData.studentInfo, university: value }\n                      })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Sélectionnez votre université\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {universities.map((uni) => (\n                        <SelectItem key={uni} value={uni}>{uni}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"studentId\">Numéro étudiant</Label>\n                  <Input\n                    id=\"studentId\"\n                    value={formData.studentInfo.studentId}\n                    onChange={(e) => \n                      setFormData({ \n                        ...formData, \n                        studentInfo: { ...formData.studentInfo, studentId: e.target.value }\n                      })\n                    }\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Mots de passe */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Mot de passe</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={formData.password}\n                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirmer le mot de passe</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  value={formData.confirmPassword}\n                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}\n                  required\n                />\n              </div>\n            </div>\n            {/* Terms and Conditions */}\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"acceptTerms\"\n                checked={formData.acceptTerms}\n                onCheckedChange={(checked) => setFormData({ ...formData, acceptTerms: checked as boolean })}\n              />\n              <Label htmlFor=\"acceptTerms\" className=\"text-sm cursor-pointer\">\n                J'accepte les{\" \"}\n                <a href=\"/terms\" className=\"text-primary hover:underline\">conditions générales d'utilisation</a>\n                {\" \"}et la{\" \"}\n                <a href=\"/privacy\" className=\"text-primary hover:underline\">politique de confidentialité</a>\n              </Label>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex flex-col space-y-4\">\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={!formData.userType || !formData.acceptTerms}\n            >\n              Créer mon compte\n            </Button>\n            <p className=\"text-sm text-muted-foreground text-center\">\n              Déjà un compte?{\" \"}\n              <Link to=\"/login\" className=\"text-primary hover:underline\">\n                Se connecter\n              </Link>\n            </p>\n          </CardFooter>\n        </form>\n      </Card>\n    </div>\n  );\n};\n\nexport default Signup;","size_bytes":13185},"client/src/pages/UserProfile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/Header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  User, \n  Mail, \n  Phone, \n  MapPin, \n  Edit,\n  ArrowLeft,\n  Star,\n  CheckCircle,\n  Upload,\n  Shield\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst UserProfile = () => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [userProfile, setUserProfile] = useState<any>(null);\n  const [editData, setEditData] = useState<any>({});\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const isAuth = localStorage.getItem(\"isAuthenticated\");\n    if (!isAuth) {\n      navigate(\"/login\");\n      return;\n    }\n\n    const profile = JSON.parse(localStorage.getItem(\"userProfile\") || \"{}\");\n    setUserProfile(profile);\n    setEditData(profile);\n  }, [navigate]);\n\n  const getUserBadges = () => {\n    const badges = [];\n    if (userProfile?.email && userProfile?.phone && userProfile?.cinNumber) {\n      badges.push({ label: \"Compte vérifié\", icon: \"✅\", color: \"success\" });\n    }\n    if (userProfile?.userType === \"owner\") {\n      badges.push({ label: \"Propriétaire actif\", icon: \"📷\", color: \"default\" });\n    }\n    badges.push({ label: \"Membre\", icon: \"🎖\", color: \"secondary\" });\n    return badges;\n  };\n\n  const handleSave = () => {\n    localStorage.setItem(\"userProfile\", JSON.stringify(editData));\n    setUserProfile(editData);\n    setIsEditing(false);\n    \n    toast({\n      title: \"Profil mis à jour\",\n      description: \"Vos informations ont été sauvegardées\",\n    });\n  };\n\n  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setEditData({ ...editData, profilePicture: file });\n      toast({\n        title: \"Photo mise à jour\",\n        description: \"Votre nouvelle photo de profil a été sélectionnée\",\n      });\n    }\n  };\n\n  if (!userProfile) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <p>Chargement...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/dashboard\")}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold gradient-text flex items-center space-x-3\">\n              <User className=\"h-8 w-8 text-primary\" />\n              <span>Mon Profil</span>\n            </h1>\n          </div>\n          <Button \n            onClick={() => isEditing ? handleSave() : setIsEditing(true)}\n            variant={isEditing ? \"default\" : \"outline\"}\n          >\n            <Edit className=\"h-4 w-4 mr-2\" />\n            {isEditing ? \"Sauvegarder\" : \"Modifier\"}\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Profile Info */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle>Informations personnelles</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Prénom</Label>\n                    {isEditing ? (\n                      <Input\n                        value={editData.firstName || \"\"}\n                        onChange={(e) => setEditData({ ...editData, firstName: e.target.value })}\n                      />\n                    ) : (\n                      <p className=\"p-2 bg-muted rounded\">{userProfile.firstName}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label>Nom</Label>\n                    {isEditing ? (\n                      <Input\n                        value={editData.lastName || \"\"}\n                        onChange={(e) => setEditData({ ...editData, lastName: e.target.value })}\n                      />\n                    ) : (\n                      <p className=\"p-2 bg-muted rounded\">{userProfile.lastName}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Email</Label>\n                  {isEditing ? (\n                    <Input\n                      value={editData.email || \"\"}\n                      onChange={(e) => setEditData({ ...editData, email: e.target.value })}\n                      type=\"email\"\n                    />\n                  ) : (\n                    <p className=\"p-2 bg-muted rounded flex items-center space-x-2\">\n                      <Mail className=\"h-4 w-4\" />\n                      <span>{userProfile.email}</span>\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label>Téléphone</Label>\n                  {isEditing ? (\n                    <Input\n                      value={editData.phone || \"\"}\n                      onChange={(e) => setEditData({ ...editData, phone: e.target.value })}\n                    />\n                  ) : (\n                    <p className=\"p-2 bg-muted rounded flex items-center space-x-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span>{userProfile.phone}</span>\n                    </p>\n                  )}\n                </div>\n\n                {userProfile.userType === \"student\" && userProfile.studentInfo && (\n                  <div className=\"space-y-2\">\n                    <Label>Informations étudiant</Label>\n                    <div className=\"p-3 glass-card rounded-lg space-y-2\">\n                      <p><strong>Université:</strong> {userProfile.studentInfo.university}</p>\n                      <p><strong>Numéro étudiant:</strong> {userProfile.studentInfo.studentId}</p>\n                    </div>\n                  </div>\n                )}\n\n                {isEditing && (\n                  <div>\n                    <Label>Photo de profil</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileUpload}\n                    />\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Verification */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Vérification d'identité</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center\">\n                    <div className={`p-4 rounded-lg ${userProfile.email ? 'bg-success/10' : 'bg-muted'}`}>\n                      <Mail className={`h-6 w-6 mx-auto mb-2 ${userProfile.email ? 'text-success' : 'text-muted-foreground'}`} />\n                      <p className=\"text-sm\">Email</p>\n                      {userProfile.email ? (\n                        <CheckCircle className=\"h-4 w-4 text-success mx-auto mt-1\" />\n                      ) : (\n                        <Button size=\"sm\" variant=\"outline\" className=\"mt-1\">Vérifier</Button>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <div className={`p-4 rounded-lg ${userProfile.phone ? 'bg-success/10' : 'bg-muted'}`}>\n                      <Phone className={`h-6 w-6 mx-auto mb-2 ${userProfile.phone ? 'text-success' : 'text-muted-foreground'}`} />\n                      <p className=\"text-sm\">Téléphone</p>\n                      {userProfile.phone ? (\n                        <CheckCircle className=\"h-4 w-4 text-success mx-auto mt-1\" />\n                      ) : (\n                        <Button size=\"sm\" variant=\"outline\" className=\"mt-1\">Vérifier</Button>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <div className={`p-4 rounded-lg ${userProfile.cinNumber ? 'bg-success/10' : 'bg-muted'}`}>\n                      <User className={`h-6 w-6 mx-auto mb-2 ${userProfile.cinNumber ? 'text-success' : 'text-muted-foreground'}`} />\n                      <p className=\"text-sm\">CIN/Passeport</p>\n                      {userProfile.cinNumber ? (\n                        <CheckCircle className=\"h-4 w-4 text-success mx-auto mt-1\" />\n                      ) : (\n                        <Button size=\"sm\" variant=\"outline\" className=\"mt-1\">Vérifier</Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Profile Picture */}\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-24 h-24 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <User className=\"h-12 w-12 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold\">{userProfile.firstName} {userProfile.lastName}</h3>\n                <p className=\"text-muted-foreground capitalize\">{userProfile.userType}</p>\n                <Badge variant=\"outline\" className=\"mt-2\">\n                  Membre depuis {new Date().getFullYear()}\n                </Badge>\n              </CardContent>\n            </Card>\n\n            {/* Badges */}\n            <Card className=\"glass-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Star className=\"h-5 w-5\" />\n                  <span>Badges</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {getUserBadges().map((badge, index) => (\n                  <div key={index} className=\"flex items-center space-x-2 p-2 glass-card rounded\">\n                    <span>{badge.icon}</span>\n                    <span className=\"text-sm\">{badge.label}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Stats */}\n            {userProfile.userType === \"owner\" && (\n              <Card className=\"glass-card\">\n                <CardHeader>\n                  <CardTitle>Statistiques</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold\">0</p>\n                    <p className=\"text-sm text-muted-foreground\">Biens publiés</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-2xl font-bold\">0</p>\n                    <p className=\"text-sm text-muted-foreground\">Contrats signés</p>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;","size_bytes":11861},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-xl text-sm font-semibold transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:scale-105 active:scale-95 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"gradient-button shadow-lg\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/90 shadow-md\",\n        accent: \"bg-accent text-accent-foreground hover:bg-accent/90 shadow-md\",\n        success: \"bg-success text-success-foreground hover:bg-success/90 shadow-md\",\n        warning: \"bg-warning text-warning-foreground hover:bg-warning/90 shadow-md\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-md\",\n        outline: \"glass-button border border-primary text-primary hover:bg-primary/10\",\n        ghost: \"hover:bg-accent/10 hover:text-accent\",\n        glass: \"glass-button\",\n        link: \"text-primary underline-offset-4 hover:underline shadow-none hover:scale-100\",\n      },\n      size: {\n        default: \"h-12 px-6 py-3\",\n        sm: \"h-10 px-4 py-2 text-sm\",\n        lg: \"h-14 px-8 py-4 text-base\",\n        icon: \"h-12 w-12\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2181},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"replit.md":{"content":"# replit.md\n\n## Overview\nEkrili is a modern property rental platform for the Tunisian market, focusing on students and families. It offers intelligent search with geolocation, real-time messaging, secure contract management, and flexible pricing. Built as a full-stack web application using React and Express.js, it provides comprehensive property management, user authentication, and integrated communication tools. The project aims to streamline property rentals with advanced features and a user-friendly experience.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n### Frontend\n- **Framework**: React 18 with TypeScript (SPA)\n- **Routing**: Wouter\n- **State Management**: TanStack React Query\n- **UI Components**: shadcn/ui (built on Radix UI)\n- **Styling**: Tailwind CSS with custom glassmorphism and Tunisian-inspired palette\n- **Build Tool**: Vite\n\n### Backend\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Architecture**: RESTful API with modular routes\n- **Storage**: Abstracted storage layer (in-memory for development)\n- **Development**: Hot module replacement with Vite integration\n\n### Database\n- **ORM**: Drizzle ORM for type-safe operations\n- **Schema Management**: Centralized definitions in `/shared`\n- **Validation**: Zod for runtime type validation\n- **Migration System**: Drizzle Kit\n\n### Authentication & Authorization\n- **Client-side**: localStorage-based session management\n- **User Types**: Role-based (tenants, property owners)\n- **Profile Management**: Comprehensive user profiles with verification\n\n### UI/UX Design System\n- **Design Philosophy**: Neo-brutalism with glassmorphism\n- **Color Scheme**: HSL-based with Tunisian cultural influences (warm orange-red primary, Mediterranean blue secondary)\n- **Typography**: Modern sans-serif with gradient text effects\n- **Components**: Consistent design across all elements\n\n### Key Features\n- **Property Management**: CRUD operations, image upload, amenities, availability.\n- **Search System**: Advanced filtering by geolocation, price, category.\n- **Messaging**: Real-time chat with history and file sharing.\n- **Contract Management**:\n    - French legal contract creation with CIN fields, electronic signatures (owner then tenant).\n    - Full lifecycle from creation to activation with real-time notifications.\n    - 3-day expiration if tenant doesn't sign.\n    - Properties switch status (Disponible/Loué) based on contract activity.\n    - Modification capability with signature reset.\n    - Secure PDF generation for signed contracts.\n    - Prevents multiple active contracts for same property.\n    - Hourly background job for expiring contracts.\n    - Owners create contracts only after tenant requests.\n    - Modification/termination requests by owners require tenant approval.\n- **Notification System**: User preference-based, multi-channel delivery.\n- **Offer Management**:\n    - Complete offers page for sent/received offers with status tracking.\n    - Tenants can request contracts only after offers are accepted.\n    - Prevents duplicate pending offers from tenants.\n    - Real-time status updates and notifications for offer lifecycle (creation, acceptance, rejection, contract request).\n- **Role-Based UI**: Dynamic interface elements and notifications based on user role (tenant/owner).\n\n## External Dependencies\n### Core Frameworks\n- **React Ecosystem**: React 18, React DOM, Wouter\n- **State Management**: TanStack React Query\n- **Form Handling**: React Hook Form with Hookform Resolvers\n\n### UI & Styling\n- **Radix UI**: Accessible UI primitives\n- **Styling**: Tailwind CSS, PostCSS, Autoprefixer\n- **Icons**: Lucide React\n- **Utilities**: clsx, tailwind-merge, class-variance-authority\n\n### Database & Backend\n- **Database**: PostgreSQL with Neon Database serverless driver\n- **ORM**: Drizzle ORM with Drizzle Kit\n- **Validation**: Zod, Drizzle-Zod\n- **Session Management**: connect-pg-simple (PostgreSQL session storage)\n\n### Development Tools\n- **Build System**: Vite (with React plugin)\n- **Language Support**: TypeScript\n- **Date Handling**: date-fns\n\n### Specialized Features\n- **Carousel**: Embla Carousel React\n- **Command Interface**: cmdk\n- **Digital Signatures**: React Signature Canvas\n- **Utilities**: nanoid","size_bytes":4307},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/scheduler.ts":{"content":"import { storage } from \"./storage\";\n\n// Schedule contract expiration checks every hour\nexport function startContractExpirationScheduler() {\n  const HOUR_IN_MS = 60 * 60 * 1000;\n  \n  console.log(\"Starting contract expiration scheduler...\");\n  \n  // Run initial check\n  checkExpiredContracts();\n  \n  // Schedule recurring checks\n  setInterval(async () => {\n    try {\n      await checkExpiredContracts();\n    } catch (error) {\n      console.error(\"Error in scheduled contract expiration check:\", error);\n    }\n  }, HOUR_IN_MS);\n}\n\nasync function checkExpiredContracts() {\n  try {\n    console.log(\"Checking for expired contracts...\");\n    await storage.expireContracts();\n    console.log(\"Contract expiration check completed\");\n  } catch (error) {\n    console.error(\"Failed to check expired contracts:\", error);\n  }\n}","size_bytes":814},"client/src/components/ContractActions.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Edit, Trash2, Clock, AlertTriangle, FileX } from \"lucide-react\";\nimport ContractGenerator from \"./ContractGenerator\";\n\ninterface Contract {\n  id: number;\n  status: string;\n  contractData: any;\n  tenantSignDeadline?: string | null;\n}\n\ninterface ContractActionsProps {\n  contract: Contract;\n  currentUserId: number;\n  isOwner: boolean;\n}\n\nexport function ContractActions({ contract, currentUserId, isOwner }: ContractActionsProps) {\n  const { toast } = useToast();\n  const [isModifyDialogOpen, setIsModifyDialogOpen] = useState(false);\n\n  // Download PDF mutation\n  const downloadMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(`/api/contracts/${contract.id}/download`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to generate download link');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // In a real implementation, this would trigger the actual PDF download\n      toast({\n        title: \"Téléchargement prêt\",\n        description: `Le contrat ${data.filename} est prêt à être téléchargé.`,\n      });\n      \n      // For demo purposes, show download URL\n      console.log(\"Download URL:\", data.downloadUrl);\n      \n      // In real implementation, you would trigger download:\n      // window.open(data.downloadUrl, '_blank');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de télécharger le contrat\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Contract modification mutation\n  const modifyMutation = useMutation({\n    mutationFn: async (newContractData: any) => {\n      return apiRequest(`/api/contracts/${contract.id}/modify`, {\n        method: 'PUT',\n        body: JSON.stringify({ contractData: newContractData })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contrat modifié\",\n        description: \"Le contrat a été modifié avec succès. Les signatures ont été supprimées.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/contracts', contract.id] });\n      setIsModifyDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de modifier le contrat\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Early termination request mutation\n  const terminationRequestMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/contracts/${contract.id}/request-termination`, {\n        method: 'POST',\n        body: JSON.stringify({\n          requestedBy: currentUserId,\n          reason: \"Demande d'arrêt anticipé par le propriétaire\"\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demande envoyée\",\n        description: \"Demande d'arrêt anticipé envoyée au locataire.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/contracts', contract.id] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'envoyer la demande\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Modification request mutation\n  const modificationRequestMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/contracts/${contract.id}/request-modification`, {\n        method: 'POST',\n        body: JSON.stringify({\n          requestedBy: currentUserId,\n          requestedChanges: \"Demande de modification des termes du contrat\"\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demande envoyée\",\n        description: \"Demande de modification envoyée au locataire.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/contracts', contract.id] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible d'envoyer la demande\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const canDownload = contract.status === 'active' || contract.status === 'fully_signed';\n  const canModify = isOwner && (contract.status === 'draft' || contract.status === 'owner_signed');\n  const isExpired = contract.tenantSignDeadline && new Date() > new Date(contract.tenantSignDeadline);\n  const isActive = contract.status === 'active' || contract.status === 'fully_signed';\n  const canRequestTermination = isOwner && isActive;\n  const canRequestModification = isOwner && isActive;\n  \n  // Tenants have very limited actions - only download when fully signed\n  const isTenant = !isOwner;\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      {/* Download PDF Button */}\n      {canDownload && (\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => downloadMutation.mutate()}\n          disabled={downloadMutation.isPending}\n        >\n          <Download className=\"h-4 w-4 mr-2\" />\n          {downloadMutation.isPending ? \"Génération...\" : \"Télécharger PDF\"}\n        </Button>\n      )}\n\n      {/* Modify Contract Button - Only for owners */}\n      {canModify && !isExpired && !isTenant && (\n        <Dialog open={isModifyDialogOpen} onOpenChange={setIsModifyDialogOpen}>\n          <DialogTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\">\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Modifier\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Modifier le contrat</DialogTitle>\n            </DialogHeader>\n            <div className=\"mt-4\">\n              <ContractGenerator\n                initialData={contract.contractData}\n                onSave={(contractData: any) => modifyMutation.mutate(contractData)}\n                isLoading={modifyMutation.isPending}\n                mode=\"modify\"\n                currentUserId={currentUserId}\n              />\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Early Termination Request - Only for owners of active contracts */}\n      {canRequestTermination && !isTenant && (\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"border-orange-500 text-orange-600 hover:bg-orange-50\">\n              <Clock className=\"h-4 w-4 mr-2\" />\n              Arrêt anticipé\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-orange-500\" />\n                Demander un arrêt anticipé\n              </AlertDialogTitle>\n              <AlertDialogDescription className=\"space-y-2\">\n                <p>Vous êtes sur le point de demander un arrêt anticipé de ce contrat.</p>\n                <div className=\"bg-orange-50 p-3 rounded-lg border-l-4 border-orange-400\">\n                  <p className=\"text-sm text-orange-700\">\n                    <strong>Important :</strong> Le locataire doit accepter cette demande pour que l'arrêt soit effectif. \n                    Si accepté, le contrat sera immédiatement terminé et le bien redeviendra disponible.\n                  </p>\n                </div>\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Annuler</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={() => terminationRequestMutation.mutate()}\n                disabled={terminationRequestMutation.isPending}\n                className=\"bg-orange-600 hover:bg-orange-700\"\n              >\n                {terminationRequestMutation.isPending ? \"Envoi...\" : \"Envoyer la demande\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n\n      {/* Modification Request - Only for owners of active contracts */}\n      {canRequestModification && !isTenant && (\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"border-blue-500 text-blue-600 hover:bg-blue-50\">\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Demander modification\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"flex items-center gap-2\">\n                <Edit className=\"h-5 w-5 text-blue-500\" />\n                Demander une modification\n              </AlertDialogTitle>\n              <AlertDialogDescription className=\"space-y-2\">\n                <p>Vous allez demander au locataire l'autorisation de modifier ce contrat.</p>\n                <div className=\"bg-blue-50 p-3 rounded-lg border-l-4 border-blue-400\">\n                  <p className=\"text-sm text-blue-700\">\n                    <strong>Note :</strong> Le locataire doit approuver votre demande avant que vous puissiez \n                    modifier le contrat. Les signatures seront supprimées après modification.\n                  </p>\n                </div>\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Annuler</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={() => modificationRequestMutation.mutate()}\n                disabled={modificationRequestMutation.isPending}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {modificationRequestMutation.isPending ? \"Envoi...\" : \"Envoyer la demande\"}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n\n      {/* Cancel/Delete Contract - Only for owners */}\n      {(isOwner && !isTenant && (contract.status === 'draft' || isExpired)) && (\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <Button variant=\"destructive\" size=\"sm\">\n              <Trash2 className=\"h-4 w-4 mr-2\" />\n              {isExpired ? \"Supprimer\" : \"Annuler\"}\n            </Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirmer la suppression</AlertDialogTitle>\n              <AlertDialogDescription>\n                Êtes-vous sûr de vouloir {isExpired ? \"supprimer\" : \"annuler\"} ce contrat ? \n                Cette action est irréversible.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Annuler</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={() => {\n                  // In real implementation, add delete/cancel mutation\n                  toast({\n                    title: \"Contrat supprimé\",\n                    description: \"Le contrat a été supprimé avec succès.\",\n                  });\n                }}\n              >\n                Confirmer\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )}\n    </div>\n  );\n}","size_bytes":11940},"client/src/components/ContractGenerator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport SignatureCanvas from \"react-signature-canvas\";\nimport { FileText, Download, PenTool, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\ninterface ContractGeneratorProps {\n  contract?: any;\n  onSign?: (signatureData: any) => void;\n  isLoading?: boolean;\n  currentUserId?: number;\n  // For modification mode\n  initialData?: any;\n  onSave?: (contractData: any) => void;\n  mode?: 'view' | 'modify';\n}\n\nexport default function ContractGenerator({ \n  contract, \n  onSign, \n  isLoading = false, \n  currentUserId = 1,\n  initialData,\n  onSave,\n  mode = 'view'\n}: ContractGeneratorProps) {\n  const [signatureCanvas, setSignatureCanvas] = useState<SignatureCanvas | null>(null);\n  const [showSignatureCanvas, setShowSignatureCanvas] = useState(false);\n  const { toast } = useToast();\n\n  // Handle different modes\n  const contractData = contract || initialData;\n  \n  // Early return if no contract data is available\n  if (!contractData) {\n    return (\n      <Card>\n        <CardContent className=\"py-8\">\n          <div className=\"text-center text-muted-foreground\">\n            Chargement du contrat...\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // For modify mode, handle the contract data differently\n  if (mode === 'modify' && initialData) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Modification du contrat</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-muted-foreground mb-4\">\n              La fonctionnalité de modification est en cours de développement.\n            </div>\n            <Button \n              onClick={() => onSave && onSave(initialData)}\n              disabled={isLoading}\n            >\n              {isLoading ? \"Enregistrement...\" : \"Enregistrer les modifications\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Determine user role based on contract data\n  const userRole: 'owner' | 'tenant' = currentUserId === contractData.ownerId ? 'owner' : 'tenant';\n  \n  const canSign = () => {\n    if (userRole === 'owner') {\n      // Owner can sign if they haven't signed yet, regardless of contract status\n      return !contractData.ownerSignature;\n    } else if (userRole === 'tenant') {\n      // Tenant can sign if owner has signed but tenant hasn't\n      return contractData.ownerSignature && !contractData.tenantSignature;\n    }\n    return false;\n  };\n\n  const handleSign = () => {\n    if (!signatureCanvas || signatureCanvas.isEmpty()) {\n      toast({\n        title: \"Signature requise\",\n        description: \"Veuillez signer avant de valider\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const signatureData = signatureCanvas.toDataURL();\n    onSign && onSign({\n      signatureType: userRole,\n      signatureData: signatureData\n    });\n    setShowSignatureCanvas(false);\n    \n    toast({\n      title: \"Signature enregistrée\",\n      description: \"Votre signature a été ajoutée au contrat\",\n    });\n  };\n\n  const clearSignature = () => {\n    if (signatureCanvas) {\n      signatureCanvas.clear();\n    }\n  };\n\n  const generatePDF = async () => {\n    const contractElement = document.getElementById('contract-content');\n    if (!contractElement) return;\n\n    try {\n      const canvas = await html2canvas(contractElement);\n      const imgData = canvas.toDataURL('image/png');\n      \n      const pdf = new jsPDF();\n      const imgWidth = 210;\n      const pageHeight = 295;\n      const imgHeight = (canvas.height * imgWidth) / canvas.width;\n      let heightLeft = imgHeight;\n      \n      let position = 0;\n      \n      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n      heightLeft -= pageHeight;\n      \n      while (heightLeft >= 0) {\n        position = heightLeft - imgHeight;\n        pdf.addPage();\n        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);\n        heightLeft -= pageHeight;\n      }\n      \n      pdf.save(`contrat-${contractData.id || 'draft'}.pdf`);\n      \n      toast({\n        title: \"PDF généré\",\n        description: \"Le contrat a été téléchargé avec succès\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de générer le PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Contract Display */}\n      <Card className=\"glass-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <FileText className=\"h-5 w-5\" />\n            <span>Contrat de Location #{contractData.id || 'draft'}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div id=\"contract-content\" className=\"space-y-4 text-sm max-w-4xl mx-auto p-6 bg-white text-black\">\n            <div className=\"text-center font-bold text-xl mb-8\">\n              CONTRAT DE LOCATION\n            </div>\n            \n            <div className=\"text-center mb-6\">\n              <p>Pour</p>\n              <p className=\"font-semibold\">un appartement meublé/non meublé</p>\n            </div>\n\n            <div className=\"mb-6\">\n              <p className=\"font-semibold mb-2\">ENTRE LES SOUSSIGNÉS :</p>\n              <div className=\"ml-4 space-y-2\">\n                <p><strong>Le BAILLEUR:</strong> M. {contractData.contractData?.landlordName || contractData.landlordName || \"Propriétaire\"}</p>\n                {(contractData.contractData?.landlordCin || contractData.landlordCin) && (\n                  <p className=\"ml-4\">CIN: {contractData.contractData?.landlordCin || contractData.landlordCin}</p>\n                )}\n                <p><strong>Le PRENEUR:</strong> M. {contractData.contractData?.tenantName || contractData.tenantName || \"Locataire\"}</p>\n                {(contractData.contractData?.tenantCin || contractData.tenantCin) && (\n                  <p className=\"ml-4\">CIN: {contractData.contractData?.tenantCin || contractData.tenantCin}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <p className=\"font-semibold mb-2\">IL A ÉTÉ CONVENU CE QUI SUIT :</p>\n              <div className=\"ml-4 space-y-2\">\n                <p>Le bailleur loue à M. {contractData.contractData?.tenantName || contractData.tenantName || \"Locataire\"}</p>\n                <p><strong>Propriété:</strong> {contractData.contractData?.propertyTitle || contractData.propertyTitle || \"Propriété\"}</p>\n                <p><strong>Adresse:</strong> {contractData.contractData?.propertyAddress || contractData.propertyAddress || \"Adresse non spécifiée\"}</p>\n              </div>\n            </div>\n\n            <div className=\"mb-6\">\n              <p>Il appartient aux deux parties de constater et d'établir, par acte séparé dressé contradictoirement, l'état des lieux et la connaissance du mobilier si les locaux sont loués meublés.</p>\n            </div>\n\n            <div className=\"mb-6\">\n              <p><strong>DURÉE DU BAIL:</strong></p>\n              <p className=\"ml-4\">\n                Le bail est fait pour une durée déterminée du{\" \"}\n                {(contractData.contractData?.startDate || contractData.startDate) ? new Date(contractData.contractData?.startDate || contractData.startDate).toLocaleDateString('fr-FR') : \"__/__/__\"}{\" \"}\n                au{\" \"}\n                {(contractData.contractData?.endDate || contractData.endDate) ? new Date(contractData.contractData?.endDate || contractData.endDate).toLocaleDateString('fr-FR') : \"__/__/__\"}\n              </p>\n            </div>\n\n            <div className=\"mb-6\">\n              <p>Le preneur pourra le dénoncer avec un préavis de trois mois entiers par lettre recommandée avec accusé de réception pendant le contrat.</p>\n              <p>Le bailleur pourra le dénoncer avec un préavis d'un mois entier par lettre recommandée avec accusé de réception pendant le contrat pour un motif sérieux et légitime et conformément aux dispositions prévues par la loi.</p>\n            </div>\n\n            <div className=\"mb-6\">\n              <p className=\"font-semibold mb-2\">OBLIGATIONS DU PRENEUR:</p>\n              <p>Le présent contrat est fait aux conditions ordinaires et de droit en pareille matière à savoir la loi du 01/09/1948 ou les règles générales établies par le Code Civil. Le preneur et le bailleur s'engagent à respecter leurs obligations réciproques et notamment le preneur en vertu des obligations suivantes concernant le bon ordre et la tenue de l'immeuble et surtout l'entretien constant des locaux loués. Il devra payer le loyer au premier du mois.</p>\n              <p><strong>Ce loyer s'élève actuellement à {contractData.contractData?.monthlyRent || contractData.monthlyRent || \"___\"} TND</strong></p>\n            </div>\n\n            <div className=\"mb-6\">\n              <p className=\"font-semibold mb-2\">CAUTION:</p>\n              <p>Le montant de la caution s'élève à {contractData.contractData?.deposit || contractData.deposit || \"___\"} TND</p>\n            </div>\n\n            <div className=\"mb-6\">\n              <p className=\"font-semibold mb-2\">CLAUSES SPÉCIALES:</p>\n              <p>À défaut de paiement à son échéance d'un seul terme de loyer, comme en cas d'inexécution d'une des obligations mises à la charge du preneur tant par la présente convention que par la loi et deux mois après un commandement de payer ou sommation, déférée par le bailleur, demeure sans effet, la présente location sera résiliée de plein droit sans qu'il y ait à remplir aucune formalité judiciaire.</p>\n              <p>Le preneur ne peut en aucun cas procéder à une sous-location ou échange de bail de son logement.</p>\n            </div>\n\n            {(contractData.contractData?.conditions || contractData.conditions || contractData.contractData?.specialConditions || contractData.specialConditions) && (\n              <div className=\"mb-6\">\n                <p className=\"font-semibold mb-2\">CONDITIONS PARTICULIÈRES:</p>\n                <p className=\"ml-4\">{contractData.contractData?.conditions || contractData.conditions || contractData.contractData?.specialConditions || contractData.specialConditions}</p>\n              </div>\n            )}\n\n            <div className=\"mb-6\">\n              <p className=\"font-semibold\">ANNEXE AU PRÉSENT CONTRAT:</p>\n              <ul className=\"ml-4 list-disc\">\n                <li>Un état des lieux d'entrée plus inventaire (quand meublé)</li>\n                <li>Un contrat de garantie</li>\n              </ul>\n            </div>\n\n            <div className=\"mb-8\">\n              <p>Fait en trois exemplaires</p>\n              <p>Le {new Date().toLocaleDateString('fr-FR')}</p>\n            </div>\n\n            {/* Signatures Section */}\n            <div className=\"mt-12 border-t pt-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12\">\n                <div className=\"text-center\">\n                  <p className=\"font-semibold mb-4\">LE BAILLEUR</p>\n                  <p className=\"text-xs mb-2\">(ajouter la mention lu et approuvé)</p>\n                  {contractData.ownerSignature ? (\n                    <div className=\"border rounded p-4 bg-white min-h-[100px] flex flex-col items-center justify-center\">\n                      <img src={contractData.ownerSignature} alt=\"Signature propriétaire\" className=\"max-h-16 max-w-full\" />\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Signé le {contractData.ownerSignedAt ? new Date(contractData.ownerSignedAt).toLocaleDateString('fr-FR') : ''}\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"border-2 border-dashed border-muted-foreground/30 rounded p-4 text-center text-muted-foreground min-h-[100px] flex items-center justify-center\">\n                      En attente de signature\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"text-center\">\n                  <p className=\"font-semibold mb-4\">LE PRENEUR</p>\n                  <p className=\"text-xs mb-2\">(ajouter la mention lu et approuvé)</p>\n                  {contractData.tenantSignature ? (\n                    <div className=\"border rounded p-4 bg-white min-h-[100px] flex flex-col items-center justify-center\">\n                      <img src={contractData.tenantSignature} alt=\"Signature locataire\" className=\"max-h-16 max-w-full\" />\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Signé le {contractData.tenantSignedAt ? new Date(contractData.tenantSignedAt).toLocaleDateString('fr-FR') : ''}\n                      </p>\n                    </div>\n                  ) : (\n                    <div className=\"border-2 border-dashed border-muted-foreground/30 rounded p-4 text-center text-muted-foreground min-h-[100px] flex items-center justify-center\">\n                      En attente de signature\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Action Buttons - Role-based access */}\n      <div className=\"flex justify-between items-center\">\n        {/* Download button for fully signed contracts */}\n        {(contractData.ownerSignature && contractData.tenantSignature) && (\n          <Button variant=\"outline\" onClick={generatePDF}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Télécharger PDF\n          </Button>\n        )}\n        \n        {/* Signing button - only show when it's the user's turn to sign */}\n        {canSign() && (\n          <Button onClick={() => setShowSignatureCanvas(true)} disabled={isLoading}>\n            <PenTool className=\"h-4 w-4 mr-2\" />\n            {userRole === 'owner' ? 'Signer en tant que propriétaire' : 'Signer en tant que locataire'}\n          </Button>\n        )}\n\n        {/* Status messages */}\n        {userRole === 'tenant' && !contractData.ownerSignature && (\n          <div className=\"text-sm text-muted-foreground\">\n            En attente de la signature du propriétaire\n          </div>\n        )}\n        \n        {userRole === 'owner' && contractData.ownerSignature && !contractData.tenantSignature && (\n          <div className=\"text-sm text-muted-foreground\">\n            Contrat signé. En attente de la signature du locataire.\n          </div>\n        )}\n\n        {contractData.ownerSignature && contractData.tenantSignature && (\n          <div className=\"text-sm text-green-600 font-medium\">\n            Contrat entièrement signé et actif\n          </div>\n        )}\n      </div>\n\n      {/* Signature Modal */}\n      {showSignatureCanvas && (\n        <Card className=\"glass-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Signature électronique</span>\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => setShowSignatureCanvas(false)}>\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Signez dans l'espace ci-dessous avec votre souris ou votre doigt\n              </p>\n              \n              <div className=\"border-2 border-dashed border-primary/20 rounded-lg\">\n                <SignatureCanvas\n                  ref={(ref) => setSignatureCanvas(ref)}\n                  canvasProps={{\n                    width: 500,\n                    height: 200,\n                    className: 'signature-canvas w-full'\n                  }}\n                />\n              </div>\n              \n              <div className=\"flex justify-between\">\n                <Button variant=\"outline\" onClick={clearSignature}>\n                  Effacer\n                </Button>\n                <Button onClick={handleSign} disabled={isLoading}>\n                  {isLoading ? \"Signature en cours...\" : \"Valider la signature\"}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":16545},"client/src/components/ContractStatusBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Clock, CheckCircle, FileText, XCircle, AlertTriangle } from \"lucide-react\";\n\ninterface ContractStatusBadgeProps {\n  status: string;\n  tenantSignDeadline?: string | null;\n}\n\nexport function ContractStatusBadge({ status, tenantSignDeadline }: ContractStatusBadgeProps) {\n  const getStatusInfo = () => {\n    switch (status) {\n      case 'draft':\n        return {\n          label: 'Brouillon',\n          variant: 'secondary' as const,\n          icon: <FileText className=\"h-3 w-3\" />\n        };\n      case 'owner_signed':\n        const isExpired = tenantSignDeadline && new Date() > new Date(tenantSignDeadline);\n        return {\n          label: isExpired ? 'Expiré' : 'En attente locataire',\n          variant: isExpired ? 'destructive' as const : 'default' as const,\n          icon: isExpired ? <XCircle className=\"h-3 w-3\" /> : <Clock className=\"h-3 w-3\" />\n        };\n      case 'fully_signed':\n        return {\n          label: 'Signé complet',\n          variant: 'default' as const,\n          icon: <CheckCircle className=\"h-3 w-3\" />\n        };\n      case 'active':\n        return {\n          label: 'Actif',\n          variant: 'default' as const,\n          icon: <CheckCircle className=\"h-3 w-3\" />\n        };\n      case 'expired':\n        return {\n          label: 'Expiré',\n          variant: 'destructive' as const,\n          icon: <XCircle className=\"h-3 w-3\" />\n        };\n      case 'cancelled':\n        return {\n          label: 'Annulé',\n          variant: 'destructive' as const,\n          icon: <XCircle className=\"h-3 w-3\" />\n        };\n      default:\n        return {\n          label: status,\n          variant: 'secondary' as const,\n          icon: <AlertTriangle className=\"h-3 w-3\" />\n        };\n    }\n  };\n\n  const { label, variant, icon } = getStatusInfo();\n\n  return (\n    <Badge variant={variant} className=\"flex items-center gap-1\">\n      {icon}\n      {label}\n    </Badge>\n  );\n}","size_bytes":1964},"client/src/components/NotificationCenter.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Bell, X, CheckCircle, Clock, AlertTriangle, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useLocation } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\ninterface Notification {\n  id: number;\n  userId: number;\n  title: string;\n  message: string;\n  type: string;\n  relatedId?: number;\n  read: boolean;\n  createdAt: string;\n}\n\ninterface NotificationCenterProps {\n  userId: number;\n}\n\nexport function NotificationCenter({ userId }: NotificationCenterProps) {\n  const [, navigate] = useLocation();\n\n  // Fetch notifications with polling for real-time updates\n  const { data: notifications = [], refetch } = useQuery({\n    queryKey: ['/api/notifications', userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/notifications?userId=${userId}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to fetch notifications');\n      return response.json() as Notification[];\n    },\n    refetchInterval: 5000, // Poll every 5 seconds for real-time updates\n    staleTime: 0,\n    gcTime: 0,\n  });\n\n  const markReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      return apiRequest(`/api/notifications/${notificationId}/read`, {\n        method: 'PUT'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications', userId] });\n    }\n  });\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'contract_signature_required':\n      case 'signature':\n        return <FileText className=\"h-4 w-4 text-blue-500\" />;\n      case 'contract_active':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'contract_expired':\n        return <Clock className=\"h-4 w-4 text-red-500\" />;\n      case 'contract_modified':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Bell className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const handleNotificationClick = (notification: Notification) => {\n    // Mark as read\n    if (!notification.read) {\n      markReadMutation.mutate(notification.id);\n    }\n\n    // Navigate to related content\n    if (notification.type.includes('contract') && notification.relatedId) {\n      navigate(`/contract/${notification.relatedId}`);\n    }\n  };\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n          <Bell className=\"h-5 w-5\" />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n            >\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <Card className=\"border-0 shadow-none\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center justify-between\">\n              Notifications\n              {unreadCount > 0 && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {unreadCount} non lues\n                </Badge>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <ScrollArea className=\"h-64\">\n              {notifications.length === 0 ? (\n                <div className=\"p-4 text-center text-sm text-muted-foreground\">\n                  Aucune notification\n                </div>\n              ) : (\n                <div className=\"space-y-1\">\n                  {notifications.map((notification) => (\n                    <div\n                      key={notification.id}\n                      className={`p-3 border-b cursor-pointer hover:bg-muted/50 transition-colors ${\n                        !notification.read ? 'bg-blue-50/50 border-l-4 border-l-blue-500' : ''\n                      }`}\n                      onClick={() => handleNotificationClick(notification)}\n                    >\n                      <div className=\"flex items-start gap-2\">\n                        {getNotificationIcon(notification.type)}\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <p className={`text-sm font-medium truncate ${\n                              !notification.read ? 'text-foreground' : 'text-muted-foreground'\n                            }`}>\n                              {notification.title}\n                            </p>\n                            {!notification.read && (\n                              <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\" />\n                            )}\n                          </div>\n                          <p className=\"text-xs text-muted-foreground line-clamp-2\">\n                            {notification.message}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {format(new Date(notification.createdAt), 'dd MMM yyyy HH:mm', { locale: fr })}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6067},"client/src/components/OfferModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, HandHeart } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Property {\n  id: number;\n  title: string;\n  price: string;\n  ownerId: number;\n}\n\ninterface OfferModalProps {\n  property: Property;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function OfferModal({ property, isOpen, onClose }: OfferModalProps) {\n  const [startDate, setStartDate] = useState<Date>();\n  const [endDate, setEndDate] = useState<Date>();\n  const [monthlyRent, setMonthlyRent] = useState(property.price);\n  const [deposit, setDeposit] = useState(property.price);\n  const [conditions, setConditions] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const offerMutation = useMutation({\n    mutationFn: async (offerData: any) => {\n      return await apiRequest(\"/api/offers\", {\n        method: \"POST\",\n        body: JSON.stringify(offerData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Offre envoyée\",\n        description: \"Votre offre a été transmise au propriétaire\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\"] });\n      onClose();\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'envoyer l'offre\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setStartDate(undefined);\n    setEndDate(undefined);\n    setMonthlyRent(property.price);\n    setDeposit(property.price);\n    setConditions(\"\");\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!startDate || !endDate) {\n      toast({\n        title: \"Dates requises\",\n        description: \"Veuillez sélectionner les dates de début et fin\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Mock current user - replace with real auth\n    const currentUser = JSON.parse(localStorage.getItem(\"currentUser\") || '{\"id\": 1}');\n\n    const offerData = {\n      propertyId: property.id,\n      tenantId: currentUser.id,\n      ownerId: property.ownerId,\n      startDate: startDate.toISOString(),\n      endDate: endDate.toISOString(),\n      monthlyRent: parseFloat(monthlyRent),\n      deposit: parseFloat(deposit),\n      conditions: conditions || undefined,\n    };\n\n    offerMutation.mutate(offerData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <HandHeart className=\"h-5 w-5 text-primary\" />\n            <span>Faire une offre</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label>Propriété</Label>\n            <p className=\"text-sm text-muted-foreground\">{property.title}</p>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"start-date\">Date de début</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start text-left font-normal\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {startDate ? format(startDate, \"PPP\", { locale: fr }) : \"Sélectionner\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={startDate}\n                    onSelect={setStartDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div>\n              <Label htmlFor=\"end-date\">Date de fin</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full justify-start text-left font-normal\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {endDate ? format(endDate, \"PPP\", { locale: fr }) : \"Sélectionner\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={endDate}\n                    onSelect={setEndDate}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"monthly-rent\">Loyer mensuel (€)</Label>\n              <Input\n                id=\"monthly-rent\"\n                type=\"number\"\n                value={monthlyRent}\n                onChange={(e) => setMonthlyRent(e.target.value)}\n                min=\"0\"\n                step=\"10\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"deposit\">Dépôt de garantie (€)</Label>\n              <Input\n                id=\"deposit\"\n                type=\"number\"\n                value={deposit}\n                onChange={(e) => setDeposit(e.target.value)}\n                min=\"0\"\n                step=\"10\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"conditions\">Conditions particulières (optionnel)</Label>\n            <Textarea\n              id=\"conditions\"\n              placeholder=\"Précisez vos conditions ou demandes particulières...\"\n              value={conditions}\n              onChange={(e) => setConditions(e.target.value)}\n              rows={3}\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Annuler\n            </Button>\n            <Button type=\"submit\" disabled={offerMutation.isPending}>\n              {offerMutation.isPending ? \"Envoi...\" : \"Envoyer l'offre\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6972},"client/src/pages/ContractsDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useLocation } from \"wouter\";\nimport { ContractStatusBadge } from \"@/components/ContractStatusBadge\";\nimport { NotificationCenter } from \"@/components/NotificationCenter\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { FileText, Plus, Eye, Edit, Clock, AlertTriangle, History } from \"lucide-react\";\n\ninterface Contract {\n  id: number;\n  status: string;\n  contractData: any;\n  tenantSignDeadline?: string | null;\n  createdAt: string;\n  ownerId: number;\n  tenantId: number;\n  ownerSignature?: string | null;\n  tenantSignature?: string | null;\n  ownerSignedAt?: string | null;\n  tenantSignedAt?: string | null;\n}\n\nexport default function ContractsDashboard() {\n  const [, navigate] = useLocation();\n  const [activeTab, setActiveTab] = useState<'active' | 'terminated' | 'modified'>('active');\n  \n  // Get current user from localStorage (real session management)\n  const getCurrentUser = () => {\n    const userData = localStorage.getItem(\"userData\");\n    const userId = localStorage.getItem(\"userId\");\n    const userType = localStorage.getItem(\"userType\");\n    \n    if (userData && userId && userType) {\n      try {\n        const user = JSON.parse(userData);\n        return {\n          id: parseInt(userId),\n          userType: userType,\n          ...user\n        };\n      } catch (error) {\n        console.error(\"Error parsing user data:\", error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const currentUser = getCurrentUser();\n  const currentUserId = currentUser?.id || 0;\n  const userType = currentUser?.userType || 'tenant';\n\n  // Fetch user's contracts based on their role\n  const { data: contracts = [], isLoading, error } = useQuery({\n    queryKey: ['/api/contracts', currentUserId, userType],\n    queryFn: async () => {\n      // For owners: get contracts they created (ownerOnly=true)\n      // For tenants: get contracts assigned to them (ownerOnly=false)\n      const ownerOnly = userType === 'owner';\n      console.log(`Fetching contracts for user ${currentUserId}, userType: ${userType}, ownerOnly: ${ownerOnly}`);\n      \n      const response = await fetch(`/api/contracts?userId=${currentUserId}&ownerOnly=${ownerOnly}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(`Failed to fetch contracts: ${response.status} ${response.statusText}`, errorData);\n        throw new Error(`Failed to fetch contracts: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(`Received ${data.length} contracts:`, data);\n      return data;\n    },\n    refetchInterval: 10000, // Refetch every 10 seconds\n    enabled: !!currentUserId && !!userType, // Only fetch if user is logged in and userType is set\n  });\n\n  // Categorize contracts by status with more detailed filtering\n  const activeContracts = contracts.filter((contract: Contract) => \n    ['active', 'fully_signed', 'owner_signed', 'draft', 'waiting_for_modification'].includes(contract.status)\n  );\n  \n  const terminatedContracts = contracts.filter((contract: Contract) => \n    contract.status === 'terminated'\n  );\n  \n  const modifiedContracts = contracts.filter((contract: Contract) => \n    contract.status === 'modified' || contract.modificationSummary?.includes('Version')\n  );\n\n  // Further categorize active contracts for better display\n  const pendingOwnerSignature = activeContracts.filter((c: Contract) => c.status === 'draft' && !c.ownerSignature);\n  const pendingTenantSignature = activeContracts.filter((c: Contract) => c.status === 'owner_signed' && !c.tenantSignature);\n  const fullySignedContracts = activeContracts.filter((c: Contract) => c.status === 'fully_signed' || c.status === 'active');\n  const waitingForModification = activeContracts.filter((c: Contract) => c.status === 'waiting_for_modification');\n\n  // Helper function to get signature status\n  const getSignatureStatus = (contract: Contract) => {\n    if (contract.ownerSignature && contract.tenantSignature) {\n      return {\n        status: 'fully_signed',\n        text: 'Signé par les deux parties',\n        color: 'text-green-600',\n        bgColor: 'bg-green-50',\n        icon: '✓'\n      };\n    } else if (contract.ownerSignature && !contract.tenantSignature) {\n      return {\n        status: 'pending_tenant',\n        text: 'En attente de signature du locataire',\n        color: 'text-yellow-600',\n        bgColor: 'bg-yellow-50',\n        icon: '⏳'\n      };\n    } else if (!contract.ownerSignature) {\n      return {\n        status: 'pending_owner',\n        text: 'En attente de signature du propriétaire',\n        color: 'text-orange-600',\n        bgColor: 'bg-orange-50',\n        icon: '📝'\n      };\n    }\n    return {\n      status: 'draft',\n      text: 'Brouillon',\n      color: 'text-gray-600',\n      bgColor: 'bg-gray-50',\n      icon: '📄'\n    };\n  };\n\n  // Helper function to get next action\n  const getNextAction = (contract: Contract) => {\n    if (contract.status === 'waiting_for_modification') {\n      return 'Modification en cours';\n    }\n    if (!contract.ownerSignature && contract.ownerId === currentUserId) {\n      return 'Votre signature requise';\n    }\n    if (contract.ownerSignature && !contract.tenantSignature && contract.ownerId !== currentUserId) {\n      return 'Votre signature requise';\n    }\n    if (contract.ownerSignature && !contract.tenantSignature && contract.ownerId === currentUserId) {\n      return 'En attente du locataire';\n    }\n    if (contract.ownerSignature && contract.tenantSignature) {\n      return 'Contrat actif';\n    }\n    return 'Action inconnue';\n  };\n\n  // Debug logging\n  console.log('ContractsDashboard Debug:', {\n    currentUser,\n    currentUserId,\n    userType,\n    contractsCount: contracts.length,\n    activeContracts: activeContracts.length,\n    terminatedContracts: terminatedContracts.length,\n    modifiedContracts: modifiedContracts.length,\n    contracts,\n    isLoading,\n    error\n  });\n\n  const getContractTitle = (contract: Contract) => {\n    return contract.contractData?.propertyTitle || `Contrat #${contract.id}`;\n  };\n\n  const getContractRole = (contract: Contract) => {\n    return contract.ownerId === currentUserId ? 'Propriétaire' : 'Locataire';\n  };\n\n  const canModifyContract = (contract: Contract) => {\n    // Owner can modify if:\n    // 1. They are the owner\n    // 2. Tenant hasn't signed yet\n    // 3. Contract is not expired or cancelled\n    return contract.ownerId === currentUserId && \n           !contract.tenantSignature && \n           !['expired', 'cancelled'].includes(contract.status);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600';\n      case 'owner_signed': return 'text-yellow-600';\n      case 'fully_signed': return 'text-blue-600';\n      case 'expired': return 'text-red-600';\n      case 'cancelled': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Erreur de chargement</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            Impossible de charger les contrats. Veuillez vérifier votre connexion.\n          </p>\n          <p className=\"text-sm text-red-500\">{error.message}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">\n            {userType === 'owner' ? 'Mes Contrats' : 'Mes Contrats Reçus'}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {userType === 'owner' \n              ? 'Gérez vos contrats de location et suivez leur statut'\n              : 'Consultez et signez vos contrats de location reçus'\n            }\n          </p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <NotificationCenter userId={currentUserId} />\n          {/* Only owners can create new contracts */}\n          {userType === 'owner' && (\n            <Button onClick={() => navigate(\"/create-contract\")}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nouveau Contrat\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'active' | 'terminated' | 'modified')} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"active\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            Contrats Actifs ({activeContracts.length})\n            {pendingOwnerSignature.length + pendingTenantSignature.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                {pendingOwnerSignature.length + pendingTenantSignature.length} en attente\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"terminated\" className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            Contrats Terminés ({terminatedContracts.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"modified\" className=\"flex items-center gap-2\">\n            <History className=\"h-4 w-4\" />\n            Contrats Modifiés ({modifiedContracts.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"active\" className=\"mt-6\">\n          {activeContracts.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Aucun contrat actif</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  {userType === 'owner' \n                    ? 'Vous n\\'avez pas encore de contrats actifs. Créez votre premier contrat pour commencer.'\n                    : 'Vous n\\'avez pas encore de contrats actifs. Les propriétaires vous enverront des contrats à signer.'\n                  }\n                </p>\n                {userType === 'owner' && (\n                  <Button onClick={() => navigate(\"/create-contract\")}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Créer un contrat\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* Summary Cards */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <Card className=\"border-orange-200 bg-orange-50/50\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      {pendingOwnerSignature.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">En attente propriétaire</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"border-yellow-200 bg-yellow-50/50\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">\n                      {pendingTenantSignature.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">En attente locataire</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"border-green-200 bg-green-50/50\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {fullySignedContracts.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Entièrement signés</div>\n                  </CardContent>\n                </Card>\n                <Card className=\"border-blue-200 bg-blue-50/50\">\n                  <CardContent className=\"p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {waitingForModification.length}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">En modification</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Contract List */}\n              <div className=\"grid gap-4\">\n                {activeContracts.map((contract: Contract) => {\n                  const signatureStatus = getSignatureStatus(contract);\n                  const nextAction = getNextAction(contract);\n                  \n                  return (\n                    <Card key={contract.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex justify-between items-start\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <CardTitle className=\"text-lg\">\n                                {getContractTitle(contract)}\n                              </CardTitle>\n                              <ContractStatusBadge \n                                status={contract.status} \n                                tenantSignDeadline={contract.tenantSignDeadline}\n                              />\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {getContractRole(contract)}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-3\">\n                              <span>Contrat #{contract.id}</span>\n                              <span>Créé le {format(new Date(contract.createdAt), 'dd MMM yyyy', { locale: fr })}</span>\n                              {contract.tenantSignDeadline && contract.status === 'owner_signed' && (\n                                <span className=\"text-yellow-600 font-medium\">\n                                  Échéance: {format(new Date(contract.tenantSignDeadline), 'dd MMM yyyy HH:mm', { locale: fr })}\n                                </span>\n                              )}\n                            </div>\n                            \n                            {/* Signature Status */}\n                            <div className={`inline-flex items-center gap-2 px-3 py-2 rounded-lg text-sm font-medium ${signatureStatus.bgColor} ${signatureStatus.color} mb-2`}>\n                              <span className=\"text-base\">{signatureStatus.icon}</span>\n                              {signatureStatus.text}\n                            </div>\n                            \n                            {/* Next Action */}\n                            <div className=\"text-sm font-medium text-blue-600\">\n                              📋 Action suivante: {nextAction}\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => navigate(`/contract/${contract.id}`)}\n                            >\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              Voir\n                            </Button>\n                            {canModifyContract(contract) && userType === 'owner' && (\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\"\n                                onClick={() => navigate(`/create-contract?edit=${contract.id}`)}\n                              >\n                                <Edit className=\"h-4 w-4 mr-2\" />\n                                Modifier\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      {contract.contractData?.propertyAddress && (\n                        <CardContent className=\"pt-0\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <span className=\"text-muted-foreground\">📍 Adresse:</span>\n                              <p className=\"font-medium\">{contract.contractData.propertyAddress}</p>\n                            </div>\n                            {contract.contractData?.monthlyRent && (\n                              <div>\n                                <span className=\"text-muted-foreground\">💰 Loyer:</span>\n                                <p className=\"font-medium\">{contract.contractData.monthlyRent}€/mois</p>\n                              </div>\n                            )}\n                            <div>\n                              <span className=\"text-muted-foreground\">👥 Signatures:</span>\n                              <div className=\"flex gap-2 mt-1\">\n                                <Badge variant={contract.ownerSignature ? \"default\" : \"secondary\"} className=\"text-xs\">\n                                  Propriétaire {contract.ownerSignature ? \"✓\" : \"✗\"}\n                                </Badge>\n                                <Badge variant={contract.tenantSignature ? \"default\" : \"secondary\"} className=\"text-xs\">\n                                  Locataire {contract.tenantSignature ? \"✓\" : \"✗\"}\n                                </Badge>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      )}\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"terminated\" className=\"mt-6\">\n          {terminatedContracts.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <AlertTriangle className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Aucun contrat terminé</h3>\n                <p className=\"text-muted-foreground\">\n                  Aucun contrat n'a été terminé anticipativement.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {terminatedContracts.map((contract: Contract) => (\n                <Card key={contract.id} className=\"hover:shadow-md transition-shadow border-red-200\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <CardTitle className=\"text-lg\">\n                            {getContractTitle(contract)}\n                          </CardTitle>\n                          <Badge variant=\"destructive\">Terminé</Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {getContractRole(contract)}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <span>Contrat #{contract.id}</span>\n                          <span>Terminé le {contract.terminatedAt ? format(new Date(contract.terminatedAt), 'dd MMM yyyy', { locale: fr }) : 'N/A'}</span>\n                          {contract.terminationReason && (\n                            <span className=\"text-red-600 font-medium\">\n                              Raison: {contract.terminationReason}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => navigate(`/contract/${contract.id}`)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          Voir Détails\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  {contract.contractData?.propertyAddress && (\n                    <CardContent className=\"pt-0\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        📍 {contract.contractData.propertyAddress}\n                      </p>\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"modified\" className=\"mt-6\">\n          {modifiedContracts.length === 0 ? (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <History className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Aucun contrat modifié</h3>\n                <p className=\"text-muted-foreground\">\n                  Aucun contrat n'a été modifié depuis sa création.\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {modifiedContracts.map((contract: Contract) => (\n                <Card key={contract.id} className=\"hover:shadow-md transition-shadow border-blue-200\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <CardTitle className=\"text-lg\">\n                            {getContractTitle(contract)}\n                          </CardTitle>\n                          <Badge variant=\"secondary\">Modifié</Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {getContractRole(contract)}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <span>Contrat #{contract.id}</span>\n                          <span>Modifié le {format(new Date(contract.updatedAt), 'dd MMM yyyy', { locale: fr })}</span>\n                          {contract.modificationSummary && (\n                            <span className=\"text-blue-600 font-medium\">\n                              {contract.modificationSummary}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => navigate(`/contract/${contract.id}`)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          Version Actuelle\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => navigate(`/contract/${contract.id}/versions`)}\n                        >\n                          <History className=\"h-4 w-4 mr-2\" />\n                          Historique\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  {contract.contractData?.propertyAddress && (\n                    <CardContent className=\"pt-0\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        📍 {contract.contractData.propertyAddress}\n                      </p>\n                      {contract.contractData?.monthlyRent && (\n                        <p className=\"text-sm font-medium mt-1\">\n                          💰 {contract.contractData.monthlyRent}€/mois\n                        </p>\n                      )}\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25406},"client/src/pages/Offers.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ArrowLeft, CheckCircle, XCircle, FileText, Clock } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport Header from \"@/components/Header\";\n\nexport default function Offers() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current user from localStorage\n  const getCurrentUser = () => {\n    const userData = localStorage.getItem(\"userData\");\n    \n    if (userData) {\n      try {\n        return JSON.parse(userData);\n      } catch (e) {\n        console.error(\"Error parsing userData:\", e);\n      }\n    }\n    \n    // If no user is logged in, return null to indicate no authentication\n    return null;\n  };\n  \n  const [currentUser, setCurrentUser] = useState(getCurrentUser());\n  \n  // Listen for storage changes to update user when switched\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const newUser = getCurrentUser();\n      console.log(\"Storage changed, new user:\", newUser);\n      setCurrentUser(newUser);\n    };\n\n    // Initial check\n    handleStorageChange();\n\n    // Listen for storage events and focus events (for same-tab changes)\n    window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('focus', handleStorageChange);\n    \n    // Check for changes every 500ms for faster updates\n    const interval = setInterval(handleStorageChange, 500);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('focus', handleStorageChange);\n      clearInterval(interval);\n    };\n  }, []);\n  \n  console.log(\"Current user in Offers page:\", currentUser);\n\n  // Redirect to login if no user is authenticated\n  useEffect(() => {\n    if (!currentUser) {\n      navigate(\"/login\");\n    }\n  }, [currentUser, navigate]);\n\n  const { data: offers = [], isLoading } = useQuery({\n    queryKey: [\"/api/offers\", currentUser?.id, currentUser?.userType],\n    queryFn: async () => {\n      if (!currentUser) return [];\n      \n      const params = new URLSearchParams({\n        userId: currentUser.id.toString(),\n        userType: currentUser.userType\n      });\n      const response = await fetch(`/api/offers?${params}`);\n      const data = await response.json();\n      \n      // Ensure data is always an array\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!currentUser, // Only run query if user is authenticated\n  });\n\n  const updateOfferStatus = useMutation({\n    mutationFn: async ({ offerId, status }: { offerId: number; status: string }) => {\n      return await apiRequest(`/api/offers/${offerId}/status`, {\n        method: \"PUT\",\n        body: JSON.stringify({ status }),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\"] });\n      toast({\n        title: \"Offre mise à jour\",\n        description: \"Le statut de l'offre a été modifié\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le statut de l'offre\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const requestContract = useMutation({\n    mutationFn: async (offerId: number) => {\n      return await apiRequest(`/api/offers/${offerId}/request-contract`, {\n        method: \"PUT\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/offers\"] });\n      toast({\n        title: \"Contrat demandé\",\n        description: \"Votre demande de contrat a été envoyée au propriétaire\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\", \n        description: \"Impossible de demander le contrat\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"secondary\"><Clock className=\"h-3 w-3 mr-1\" />En attente</Badge>;\n      case \"accepted\":\n        return <Badge variant=\"default\"><CheckCircle className=\"h-3 w-3 mr-1\" />Acceptée</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />Refusée</Badge>;\n      case \"contract_requested\":\n        return <Badge variant=\"outline\"><FileText className=\"h-3 w-3 mr-1\" />Contrat demandé</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const OfferCard = ({ offer, type }: { offer: any; type: 'sent' | 'received' }) => (\n    <Card key={offer.id} className=\"mb-4\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-lg\">{offer.property?.title || `Propriété #${offer.propertyId}`}</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              {type === 'sent' \n                ? `Offre envoyée à ${offer.owner?.firstName} ${offer.owner?.lastName}` \n                : `Offre reçue de ${offer.tenant?.firstName} ${offer.tenant?.lastName}`}\n            </p>\n            {offer.property?.address && (\n              <p className=\"text-xs text-muted-foreground\">{offer.property.address}</p>\n            )}\n          </div>\n          {getStatusBadge(offer.status)}\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div>\n            <p className=\"text-sm font-medium\">Loyer mensuel</p>\n            <p className=\"text-lg font-bold text-primary\">{offer.monthlyRent} TND</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium\">Dépôt de garantie</p>\n            <p className=\"text-lg\">{offer.deposit || 0} TND</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium\">Date de début</p>\n            <p>{format(new Date(offer.startDate), \"dd MMM yyyy\", { locale: fr })}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium\">Date de fin</p>\n            <p>{format(new Date(offer.endDate), \"dd MMM yyyy\", { locale: fr })}</p>\n          </div>\n        </div>\n\n        {offer.conditions && (\n          <div className=\"mb-4\">\n            <p className=\"text-sm font-medium mb-1\">Conditions</p>\n            <p className=\"text-sm text-muted-foreground\">{offer.conditions}</p>\n          </div>\n        )}\n\n        <div className=\"flex gap-2\">\n          {type === 'received' && offer.status === 'pending' && (\n            <>\n              <Button \n                size=\"sm\" \n                onClick={() => updateOfferStatus.mutate({ offerId: offer.id, status: 'accepted' })}\n                disabled={updateOfferStatus.isPending}\n              >\n                <CheckCircle className=\"h-4 w-4 mr-1\" />\n                Accepter\n              </Button>\n              <Button \n                size=\"sm\" \n                variant=\"destructive\"\n                onClick={() => updateOfferStatus.mutate({ offerId: offer.id, status: 'rejected' })}\n                disabled={updateOfferStatus.isPending}\n              >\n                <XCircle className=\"h-4 w-4 mr-1\" />\n                Refuser\n              </Button>\n            </>\n          )}\n\n          {type === 'sent' && offer.status === 'accepted' && (\n            <Button \n              size=\"sm\"\n              onClick={() => requestContract.mutate(offer.id)}\n              disabled={requestContract.isPending}\n            >\n              <FileText className=\"h-4 w-4 mr-1\" />\n              Demander un contrat\n            </Button>\n          )}\n\n          {offer.status === 'contract_requested' && (\n            <Button size=\"sm\" variant=\"outline\" onClick={() => navigate('/contracts')}>\n              <FileText className=\"h-4 w-4 mr-1\" />\n              Voir les contrats\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center mb-8\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => navigate(\"/dashboard\")}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold gradient-text\">\n              {currentUser.userType === 'owner' ? 'Mes offres reçues' : 'Mes offres envoyées'}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {currentUser.userType === 'owner' \n                ? 'Gérez vos offres reçues pour vos propriétés' \n                : 'Suivez vos offres de location envoyées'}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"w-full\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-2xl font-bold\">\n              {currentUser.userType === 'owner' ? 'Mes offres reçues' : 'Mes offres envoyées'}\n            </h2>\n            <p className=\"text-muted-foreground\">\n              {currentUser.userType === 'owner' \n                ? 'Gérez les offres reçues pour vos propriétés' \n                : 'Suivez le statut de vos offres de location'}\n            </p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-12\">\n              <div className=\"animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p>Chargement des offres...</p>\n            </div>\n          ) : offers.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-lg font-medium\">\n                {currentUser.userType === 'owner' ? 'Aucune offre reçue' : 'Aucune offre envoyée'}\n              </p>\n              <p className=\"text-muted-foreground\">\n                {currentUser.userType === 'owner' \n                  ? 'Vous n\\'avez reçu aucune offre pour vos propriétés.' \n                  : 'Vous n\\'avez envoyé aucune offre pour le moment. Parcourez les propriétés disponibles pour faire des offres.'}\n              </p>\n            </div>\n          ) : (\n            offers.map((offer: any) => (\n              <OfferCard \n                key={offer.id} \n                offer={offer} \n                type={currentUser.userType === 'owner' ? 'received' : 'sent'} \n              />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10992},"client/src/components/ErrorAlert.tsx":{"content":"import { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertCircle, Info, CheckCircle, XCircle } from \"lucide-react\";\n\ninterface ErrorAlertProps {\n  type?: 'error' | 'warning' | 'info' | 'success';\n  title?: string;\n  message: string;\n  details?: string;\n  onDismiss?: () => void;\n}\n\nexport function ErrorAlert({ type = 'error', title, message, details, onDismiss }: ErrorAlertProps) {\n  const getIcon = () => {\n    switch (type) {\n      case 'success': return <CheckCircle className=\"h-5 w-5 text-green-600\" />;\n      case 'warning': return <AlertCircle className=\"h-5 w-5 text-orange-600\" />;\n      case 'info': return <Info className=\"h-5 w-5 text-blue-600\" />;\n      default: return <XCircle className=\"h-5 w-5 text-red-600\" />;\n    }\n  };\n\n  const getStyles = () => {\n    switch (type) {\n      case 'success': return 'bg-green-50 border-green-200 text-green-800';\n      case 'warning': return 'bg-orange-50 border-orange-200 text-orange-800';\n      case 'info': return 'bg-blue-50 border-blue-200 text-blue-800';\n      default: return 'bg-red-50 border-red-200 text-red-800';\n    }\n  };\n\n  const getDefaultTitle = () => {\n    switch (type) {\n      case 'success': return 'Succès';\n      case 'warning': return 'Attention';\n      case 'info': return 'Information';\n      default: return 'Erreur';\n    }\n  };\n\n  return (\n    <Alert className={`${getStyles()} border-l-4 shadow-sm`}>\n      <div className=\"flex items-start gap-3\">\n        {getIcon()}\n        <div className=\"flex-1\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"font-semibold text-sm\">\n              {title || getDefaultTitle()}\n            </h4>\n            {onDismiss && (\n              <button\n                onClick={onDismiss}\n                className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n              >\n                <XCircle className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n          <AlertDescription className=\"mt-2 text-sm leading-relaxed\">\n            {message}\n          </AlertDescription>\n          {details && (\n            <div className=\"mt-3 p-3 bg-white/50 rounded border border-current/20\">\n              <p className=\"text-xs font-mono text-gray-600\">{details}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Alert>\n  );\n}","size_bytes":2350},"client/src/components/EnhancedContractActions.tsx":{"content":"import React, { useState } from 'react';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { AlertCircle, AlertTriangle, Edit, Trash2, Clock, CheckCircle, XCircle, ChevronDown, RefreshCw } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { fr } from 'date-fns/locale';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { ErrorAlert } from '@/components/ErrorAlert';\nimport { useLocation } from 'wouter';\n\ninterface ContractActionsProps {\n  contract: any;\n  currentUserId: number;\n  userType: 'tenant' | 'owner';\n}\n\ninterface RequestStatus {\n  id: number;\n  type: 'modification' | 'termination';\n  status: 'pending' | 'accepted' | 'rejected';\n  createdAt: string;\n  modificationDeadline?: string;\n}\n\nexport function EnhancedContractActions({ contract, currentUserId, userType }: ContractActionsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location, navigate] = useLocation();\n  const [showTerminationDialog, setShowTerminationDialog] = useState(false);\n  const [showModificationDialog, setShowModificationDialog] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [terminationReason, setTerminationReason] = useState('');\n  const [modificationReason, setModificationReason] = useState('');\n  const [selectedFields, setSelectedFields] = useState<string[]>([]);\n  const [showModifyContractDialog, setShowModifyContractDialog] = useState(false);\n  const [contractModifications, setContractModifications] = useState<any>({});\n\n  // Fetch pending requests for this contract\n  const { data: pendingRequests = [], isLoading: requestsLoading } = useQuery<RequestStatus[]>({\n    queryKey: [`/api/contracts/${contract.id}/pending-requests`],\n    queryFn: async () => {\n      const response = await fetch(`/api/contracts/${contract.id}/pending-requests`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Pending requests query returned:', data);\n      return data;\n    },\n    enabled: !!contract.id,\n    staleTime: 0,\n    gcTime: 0\n  });\n\n  // Debug log\n  console.log('EnhancedContractActions Debug:', {\n    contractId: contract.id,\n    pendingRequests,\n    requestsLoading,\n    modificationRequest: pendingRequests.find(r => r.type === 'modification'),\n    userType,\n    currentUserId,\n    queryKey: `/api/contracts/${contract.id}/pending-requests`\n  });\n\n  // Force refresh pending requests when component mounts\n  React.useEffect(() => {\n    if (contract.id) {\n      queryClient.invalidateQueries({ queryKey: [`/api/contracts/${contract.id}/pending-requests`] });\n    }\n  }, [contract.id, queryClient]);\n\n  // Find current request statuses\n  const terminationRequest = pendingRequests.find(r => r.type === 'termination');\n  const modificationRequest = pendingRequests.find(r => r.type === 'modification');\n\n  // Helper function to check if modification deadline is still valid\n  const isWithinModificationDeadline = (deadline?: string): boolean => {\n    if (!deadline) return false;\n    return new Date(deadline) > new Date();\n  };\n\n  // Early termination request mutation\n  const terminationRequestMutation = useMutation({\n    mutationFn: async () => {\n      if (!terminationReason.trim()) {\n        throw new Error('La raison de la résiliation est obligatoire');\n      }\n      return apiRequest(`/api/contracts/${contract.id}/request-termination`, {\n        method: 'POST',\n        body: JSON.stringify({\n          requestedBy: currentUserId,\n          reason: terminationReason\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demande envoyée\",\n        description: \"Votre demande d'arrêt anticipé a été envoyée au locataire\"\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/contracts/${contract.id}/pending-requests`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      setShowTerminationDialog(false);\n      setTerminationReason('');\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Erreur lors de l'envoi de la demande\");\n      setShowTerminationDialog(false);\n    }\n  });\n\n  // Modification request mutation\n  const modificationRequestMutation = useMutation({\n    mutationFn: async () => {\n      if (!modificationReason.trim()) {\n        throw new Error('La raison de la modification est obligatoire');\n      }\n      if (selectedFields.length === 0) {\n        throw new Error('Vous devez sélectionner au moins un champ à modifier');\n      }\n      return apiRequest(`/api/contracts/${contract.id}/request-modification`, {\n        method: 'POST',\n        body: JSON.stringify({\n          requestedBy: currentUserId,\n          modificationReason: modificationReason,\n          fieldsToModify: selectedFields,\n          requestedChanges: `Modification demandée pour: ${selectedFields.join(', ')}. Raison: ${modificationReason}`\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Demande envoyée\",\n        description: \"Votre demande de modification a été envoyée au locataire\"\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/contracts/${contract.id}/pending-requests`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      setShowModificationDialog(false);\n      setModificationReason('');\n      setSelectedFields([]);\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Erreur lors de l'envoi de la demande\");\n      setShowModificationDialog(false);\n    }\n  });\n\n  // Contract modification mutation (for when modification is approved)\n  const contractModificationMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(`/api/contracts/${contract.id}/modify`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          modifications: contractModifications,\n          modificationRequestId: modificationRequest?.id\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Contrat modifié\",\n        description: \"Les modifications ont été appliquées avec succès\"\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/contracts/${contract.id}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/contracts/${contract.id}/pending-requests`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/contracts'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      setShowModifyContractDialog(false);\n      setContractModifications({});\n      setError(null);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Erreur lors de la modification du contrat\");\n      setShowModifyContractDialog(false);\n    }\n  });\n\n  const getRequestStatusBadge = (status: string, type: string) => {\n    const baseClasses = \"text-xs px-2 py-1 rounded-full font-medium\";\n    \n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className={`${baseClasses} bg-yellow-50 text-yellow-700 border-yellow-300`}>\n          <Clock className=\"w-3 h-3 mr-1\" /> En attente\n        </Badge>;\n      case 'accepted':\n        return <Badge variant=\"outline\" className={`${baseClasses} bg-green-50 text-green-700 border-green-300`}>\n          <CheckCircle className=\"w-3 h-3 mr-1\" /> Acceptée\n        </Badge>;\n      case 'rejected':\n        return <Badge variant=\"outline\" className={`${baseClasses} bg-red-50 text-red-700 border-red-300`}>\n          <XCircle className=\"w-3 h-3 mr-1\" /> Refusée\n        </Badge>;\n      default:\n        return null;\n    }\n  };\n\n  const getButtonText = (requestType: 'modification' | 'termination', request?: RequestStatus) => {\n    if (!request) {\n      return requestType === 'modification' ? 'Demander modification' : 'Arrêt anticipé';\n    }\n    \n    switch (request.status) {\n      case 'pending':\n        return `${requestType === 'modification' ? 'Modification' : 'Arrêt'} demandé`;\n      case 'accepted':\n        return `${requestType === 'modification' ? 'Modification' : 'Arrêt'} accepté`;\n      case 'rejected':\n        return `Renvoyer ${requestType === 'modification' ? 'modification' : 'arrêt'}`;\n      default:\n        return requestType === 'modification' ? 'Demander modification' : 'Arrêt anticipé';\n    }\n  };\n\n  const canSendRequest = (request?: RequestStatus) => {\n    return !request || request.status === 'rejected';\n  };\n\n  // Only show actions for owners\n  if (userType !== 'owner' || contract.ownerId !== currentUserId) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {error && <ErrorAlert message={error} />}\n      \n      <div className=\"flex flex-col sm:flex-row gap-3\">\n        {/* Termination Request Button */}\n        <div className=\"flex-1\">\n          <Button\n            onClick={() => canSendRequest(terminationRequest) ? setShowTerminationDialog(true) : null}\n            disabled={!canSendRequest(terminationRequest) || terminationRequestMutation.isPending}\n            className={`w-full ${\n              terminationRequest?.status === 'pending' ? 'bg-yellow-600 hover:bg-yellow-700' :\n              terminationRequest?.status === 'accepted' ? 'bg-green-600 hover:bg-green-700' :\n              'bg-orange-600 hover:bg-orange-700'\n            }`}\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            {getButtonText('termination', terminationRequest)}\n            {terminationRequestMutation.isPending && (\n              <RefreshCw className=\"w-3 h-3 ml-2 animate-spin\" />\n            )}\n          </Button>\n          \n          {terminationRequest && (\n            <div className=\"mt-2 flex items-center justify-between\">\n              {getRequestStatusBadge(terminationRequest.status, 'termination')}\n              \n              {/* Dropdown menu for request details */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"h-8 px-2\">\n                    <ChevronDown className=\"w-3 h-3\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem\n                    onClick={() => navigate(`/tenant-requests/termination/${terminationRequest.id}`)}\n                  >\n                    Voir les détails\n                  </DropdownMenuItem>\n                  {terminationRequest.status === 'rejected' && (\n                    <DropdownMenuItem\n                      onClick={() => setShowTerminationDialog(true)}\n                    >\n                      Renvoyer la demande\n                    </DropdownMenuItem>\n                  )}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          )}\n        </div>\n\n        {/* Modification Request Button */}\n        <div className=\"flex-1\">\n          <Button\n            onClick={() => canSendRequest(modificationRequest) ? setShowModificationDialog(true) : null}\n            disabled={!canSendRequest(modificationRequest) || modificationRequestMutation.isPending}\n            className={`w-full ${\n              modificationRequest?.status === 'pending' ? 'bg-yellow-600 hover:bg-yellow-700' :\n              modificationRequest?.status === 'accepted' ? 'bg-green-600 hover:bg-green-700' :\n              'bg-blue-600 hover:bg-blue-700'\n            }`}\n          >\n            <Edit className=\"w-4 h-4 mr-2\" />\n            {getButtonText('modification', modificationRequest)}\n            {modificationRequestMutation.isPending && (\n              <RefreshCw className=\"w-3 h-3 ml-2 animate-spin\" />\n            )}\n          </Button>\n          \n          {modificationRequest && (\n            <div className=\"mt-2 space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                {getRequestStatusBadge(modificationRequest.status, 'modification')}\n                \n                {/* Dropdown menu for request details */}\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"h-8 px-2\">\n                      <ChevronDown className=\"w-3 h-3\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem\n                      onClick={() => navigate(`/tenant-requests/modification/${modificationRequest.id}`)}\n                    >\n                      Voir les détails\n                    </DropdownMenuItem>\n                    {modificationRequest.status === 'rejected' && (\n                      <DropdownMenuItem\n                        onClick={() => setShowModificationDialog(true)}\n                      >\n                        Renvoyer la demande\n                      </DropdownMenuItem>\n                    )}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n              \n              {/* Modify Contract Button - appears when modification is accepted and within 24h deadline */}\n              {modificationRequest.status === 'accepted' && isWithinModificationDeadline(modificationRequest.modificationDeadline) && (\n                <div className=\"space-y-2\">\n                  <Button\n                    onClick={() => setShowModifyContractDialog(true)}\n                    disabled={contractModificationMutation.isPending}\n                    className=\"w-full bg-green-600 hover:bg-green-700\"\n                    size=\"sm\"\n                  >\n                    <Edit className=\"w-3 h-3 mr-2\" />\n                    Modifier le contrat (24h restantes)\n                    {contractModificationMutation.isPending && (\n                      <RefreshCw className=\"w-3 h-3 ml-2 animate-spin\" />\n                    )}\n                  </Button>\n                  {modificationRequest.modificationDeadline && (\n                    <p className=\"text-xs text-orange-600 text-center\">\n                      Délai: {formatDistanceToNow(new Date(modificationRequest.modificationDeadline), { \n                        addSuffix: true, \n                        locale: fr \n                      })}\n                    </p>\n                  )}\n                </div>\n              )}\n              \n              {/* Show expired deadline message */}\n              {modificationRequest.status === 'accepted' && !isWithinModificationDeadline(modificationRequest.modificationDeadline) && (\n                <div className=\"w-full p-2 bg-red-50 border border-red-200 rounded text-red-700 text-sm text-center\">\n                  Délai de modification expiré (24h)\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Termination Request Dialog */}\n      <AlertDialog open={showTerminationDialog} onOpenChange={setShowTerminationDialog}>\n        <AlertDialogContent className=\"max-w-md\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n              Demande d'Arrêt Anticipé\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"space-y-4\">\n              <p>\n                Demander l'arrêt anticipé de ce contrat. Le locataire recevra une notification \n                et pourra accepter ou refuser votre demande.\n              </p>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <Label htmlFor=\"termination-reason\" className=\"text-sm font-medium\">\n                    Raison de la résiliation *\n                  </Label>\n                  <Textarea\n                    id=\"termination-reason\"\n                    placeholder=\"Expliquez la raison de votre demande d'arrêt anticipé...\"\n                    value={terminationReason}\n                    onChange={(e) => setTerminationReason(e.target.value)}\n                    className=\"mt-1\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"bg-yellow-50 p-3 rounded-md border border-yellow-200\">\n                <p className=\"text-xs text-yellow-800\">\n                  <strong>Important :</strong> Si acceptée, la résiliation sera immédiate.\n                </p>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setTerminationReason('')}>\n              Annuler\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => terminationRequestMutation.mutate()}\n              className=\"bg-orange-600 hover:bg-orange-700\"\n              disabled={!terminationReason.trim() || terminationRequestMutation.isPending}\n            >\n              {terminationRequestMutation.isPending ? 'Envoi...' : 'Envoyer la demande'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Modification Request Dialog */}\n      <AlertDialog open={showModificationDialog} onOpenChange={setShowModificationDialog}>\n        <AlertDialogContent className=\"max-w-lg\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center gap-2\">\n              <Edit className=\"w-5 h-5 text-blue-600\" />\n              Demande de Modification\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"space-y-4\">\n              <p className=\"text-sm\">\n                Demander une modification de ce contrat. Le locataire recevra une notification \n                et pourra accepter ou refuser votre demande.\n              </p>\n              \n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"modification-reason\" className=\"text-sm font-medium\">\n                    Raison de la modification *\n                  </Label>\n                  <Textarea\n                    id=\"modification-reason\"\n                    placeholder=\"Expliquez pourquoi vous souhaitez modifier le contrat...\"\n                    value={modificationReason}\n                    onChange={(e) => setModificationReason(e.target.value)}\n                    className=\"mt-1\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium mb-3 block\">\n                    Champs à modifier * (sélectionnez au moins un)\n                  </Label>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {[\n                      { id: 'tenant_name', label: 'Nom du locataire' },\n                      { id: 'tenant_cin', label: 'CIN du locataire' },\n                      { id: 'tenant_address', label: 'Adresse du locataire' },\n                      { id: 'monthly_rent', label: 'Loyer mensuel' },\n                      { id: 'deposit', label: 'Caution' },\n                      { id: 'contract_duration', label: 'Durée du contrat' },\n                      { id: 'special_conditions', label: 'Conditions spéciales' },\n                      { id: 'payment_terms', label: 'Modalités de paiement' }\n                    ].map((field) => (\n                      <div key={field.id} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={field.id}\n                          checked={selectedFields.includes(field.id)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedFields([...selectedFields, field.id]);\n                            } else {\n                              setSelectedFields(selectedFields.filter(f => f !== field.id));\n                            }\n                          }}\n                        />\n                        <Label \n                          htmlFor={field.id} \n                          className=\"text-xs cursor-pointer\"\n                        >\n                          {field.label}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 p-3 rounded-md border border-blue-200\">\n                <p className=\"text-xs text-blue-800\">\n                  <strong>Note :</strong> Si acceptée, les modifications devront être re-signées.\n                </p>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => {\n              setModificationReason('');\n              setSelectedFields([]);\n            }}>\n              Annuler\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => modificationRequestMutation.mutate()}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              disabled={!modificationReason.trim() || selectedFields.length === 0 || modificationRequestMutation.isPending}\n            >\n              {modificationRequestMutation.isPending ? 'Envoi...' : 'Envoyer la demande'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Contract Modification Dialog */}\n      <AlertDialog open={showModifyContractDialog} onOpenChange={setShowModifyContractDialog}>\n        <AlertDialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center gap-2\">\n              <Edit className=\"w-5 h-5 text-green-600\" />\n              Modifier le Contrat\n            </AlertDialogTitle>\n            <AlertDialogDescription className=\"space-y-4\">\n              <p>\n                Modifiez les champs demandés dans la demande de modification.\n                {modificationRequest && (\n                  <span className=\"block mt-1 text-sm text-gray-600\">\n                    Champs à modifier: {Array.isArray(modificationRequest.fieldsToModify) ? \n                      modificationRequest.fieldsToModify.join(', ') : \n                      (typeof modificationRequest.fieldsToModify === 'string' ? \n                        JSON.parse(modificationRequest.fieldsToModify || '[]').join(', ') : \n                        'N/A')}\n                  </span>\n                )}\n              </p>\n              \n              <div className=\"space-y-4\">\n                {modificationRequest && (Array.isArray(modificationRequest.fieldsToModify) ? \n                  modificationRequest.fieldsToModify : \n                  (typeof modificationRequest.fieldsToModify === 'string' ? \n                    JSON.parse(modificationRequest.fieldsToModify || '[]') : \n                    [])).map((fieldId: string) => (\n                  <div key={fieldId}>\n                    {/* Tenant Name Field */}\n                    {fieldId === 'tenant_name' && (\n                      <div>\n                        <Label htmlFor=\"tenant_name\" className=\"text-sm font-medium\">\n                          Nom du locataire\n                        </Label>\n                        <Input\n                          id=\"tenant_name\"\n                          placeholder=\"Nom complet du locataire\"\n                          value={contractModifications.tenant_name || contract.contractData?.tenantName || ''}\n                          onChange={(e) => setContractModifications({...contractModifications, tenant_name: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Tenant Address Field */}\n                    {fieldId === 'tenant_address' && (\n                      <div>\n                        <Label htmlFor=\"tenant_address\" className=\"text-sm font-medium\">\n                          Adresse du locataire\n                        </Label>\n                        <Textarea\n                          id=\"tenant_address\"\n                          placeholder=\"Adresse complète du locataire\"\n                          value={contractModifications.tenant_address || contract.contractData?.propertyAddress || ''}\n                          onChange={(e) => setContractModifications({...contractModifications, tenant_address: e.target.value})}\n                          className=\"mt-1\"\n                          rows={2}\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Monthly Rent Field */}\n                    {fieldId === 'monthly_rent' && (\n                      <div>\n                        <Label htmlFor=\"monthly_rent\" className=\"text-sm font-medium\">\n                          Loyer mensuel (TND)\n                        </Label>\n                        <Input\n                          id=\"monthly_rent\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"Montant en dinars\"\n                          value={contractModifications.monthly_rent || contract.contractData?.monthlyRent || ''}\n                          onChange={(e) => setContractModifications({...contractModifications, monthly_rent: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Deposit Field */}\n                    {fieldId === 'deposit' && (\n                      <div>\n                        <Label htmlFor=\"deposit\" className=\"text-sm font-medium\">\n                          Caution (TND)\n                        </Label>\n                        <Input\n                          id=\"deposit\"\n                          type=\"number\"\n                          step=\"0.01\"\n                          placeholder=\"Montant de la caution\"\n                          value={contractModifications.deposit || contract.contractData?.deposit || ''}\n                          onChange={(e) => setContractModifications({...contractModifications, deposit: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Special Conditions Field */}\n                    {fieldId === 'special_conditions' && (\n                      <div>\n                        <Label htmlFor=\"special_conditions\" className=\"text-sm font-medium\">\n                          Conditions spéciales\n                        </Label>\n                        <Textarea\n                          id=\"special_conditions\"\n                          placeholder=\"Conditions particulières du contrat\"\n                          value={contractModifications.special_conditions || contract.contractData?.specialConditions || ''}\n                          onChange={(e) => setContractModifications({...contractModifications, special_conditions: e.target.value})}\n                          className=\"mt-1\"\n                          rows={3}\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Payment Terms Field */}\n                    {fieldId === 'payment_terms' && (\n                      <div>\n                        <Label htmlFor=\"payment_terms\" className=\"text-sm font-medium\">\n                          Modalités de paiement\n                        </Label>\n                        <Input\n                          id=\"payment_terms\"\n                          placeholder=\"Date d'échéance (ex: le 1er de chaque mois)\"\n                          value={contractModifications.payment_terms || contract.contractData?.paymentDueDate || ''}\n                          onChange={(e) => setContractModifications({...contractModifications, payment_terms: e.target.value})}\n                          className=\"mt-1\"\n                        />\n                      </div>\n                    )}\n                    \n                    {/* Contract Duration Field */}\n                    {fieldId === 'contract_duration' && (\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        <div>\n                          <Label htmlFor=\"start_date\" className=\"text-sm font-medium\">\n                            Date de début\n                          </Label>\n                          <Input\n                            id=\"start_date\"\n                            type=\"date\"\n                            value={contractModifications.start_date || contract.contractData?.startDate || ''}\n                            onChange={(e) => setContractModifications({...contractModifications, start_date: e.target.value})}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"end_date\" className=\"text-sm font-medium\">\n                            Date de fin\n                          </Label>\n                          <Input\n                            id=\"end_date\"\n                            type=\"date\"\n                            value={contractModifications.end_date || contract.contractData?.endDate || ''}\n                            onChange={(e) => setContractModifications({...contractModifications, end_date: e.target.value})}\n                            className=\"mt-1\"\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"bg-green-50 p-3 rounded-md border border-green-200\">\n                <p className=\"text-xs text-green-800\">\n                  <strong>Note :</strong> Ces modifications seront appliquées immédiatement et le contrat sera mis à jour.\n                </p>\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => {\n              setContractModifications({});\n            }}>\n              Annuler\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => contractModificationMutation.mutate()}\n              className=\"bg-green-600 hover:bg-green-700\"\n              disabled={contractModificationMutation.isPending}\n            >\n              {contractModificationMutation.isPending ? 'Modification...' : 'Appliquer les modifications'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":31614},"client/src/pages/TenantRequestResponse.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { AlertCircle, CheckCircle, XCircle, Clock, FileText } from 'lucide-react';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ntype RequestType = 'modification' | 'termination';\n\ninterface Request {\n  id: number;\n  contractId: number;\n  requestedBy: number;\n  status: 'pending' | 'accepted' | 'rejected';\n  createdAt: string;\n  requestedChanges?: string;\n  reason?: string;\n  tenantResponse?: string;\n}\n\nexport default function TenantRequestResponse() {\n  const params = useParams();\n  const [location, navigate] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [response, setResponse] = useState('');\n  \n  // Parse URL to get request type and ID\n  const requestType = params.type as RequestType;\n  const requestId = parseInt(params.id || '0');\n  \n  console.log(\"TenantRequestResponse: URL params:\", { type: params.type, id: params.id });\n  console.log(\"TenantRequestResponse: Parsed values:\", { requestType, requestId });\n\n  // Get current user\n  const getUserData = () => {\n    const userData = localStorage.getItem(\"userData\");\n    if (userData) {\n      try {\n        return JSON.parse(userData);\n      } catch (e) {\n        console.error(\"Error parsing userData:\", e);\n        return null;\n      }\n    }\n    return null;\n  };\n  \n  const currentUser = getUserData();\n  \n  // Fetch request details\n  const { data: request, isLoading, error } = useQuery<Request>({\n    queryKey: [`/api/contract-${requestType}-requests/${requestId}`],\n    enabled: !!requestId && !!currentUser,\n    queryFn: async () => {\n      console.log(\"TenantRequestResponse: Making API request to\", `/api/contract-${requestType}-requests/${requestId}`);\n      const response = await fetch(`/api/contract-${requestType}-requests/${requestId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch request');\n      }\n      const data = await response.json();\n      console.log(\"TenantRequestResponse: Received request data\", data);\n      return data;\n    }\n  });\n  \n  console.log(\"TenantRequestResponse: Query state:\", { \n    request, \n    isLoading, \n    error, \n    enabled: !!requestId && !!currentUser,\n    queryKey: `/api/contract-${requestType}-requests/${requestId}`\n  });\n\n  // Fetch contract details\n  const { data: contract } = useQuery<any>({\n    queryKey: [`/api/contracts/${request?.contractId}`],\n    enabled: !!request?.contractId\n  });\n\n  // Response mutation\n  const responseMutation = useMutation({\n    mutationFn: async (responseType: 'accepted' | 'rejected') => {\n      return apiRequest(`/api/contract-${requestType}-requests/${requestId}/respond`, {\n        method: 'PUT',\n        body: JSON.stringify({\n          response: responseType,\n          tenantResponse: response,\n          userId: currentUser?.id\n        })\n      });\n    },\n    onSuccess: (data, responseType) => {\n      toast({\n        title: responseType === 'accepted' ? \"Demande acceptée\" : \"Demande refusée\",\n        description: responseType === 'accepted' \n          ? \"Votre acceptation a été envoyée au propriétaire\"\n          : \"Votre refus a été envoyé au propriétaire\"\n      });\n      \n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: [`/api/contract-${requestType}-requests/${requestId}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      \n      // Navigate back to contracts or dashboard\n      navigate('/contracts');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de traiter votre réponse\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n        <div className=\"max-w-2xl mx-auto pt-20\">\n          <div className=\"text-center\">Chargement...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!request) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n        <div className=\"max-w-2xl mx-auto pt-20\">\n          <Card>\n            <CardContent className=\"text-center p-8\">\n              <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Demande non trouvée</h2>\n              <p className=\"text-gray-600\">Cette demande n'existe pas ou a été supprimée.</p>\n              <Button onClick={() => navigate('/contracts')} className=\"mt-4\">\n                Retour aux contrats\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-300\">\n          <Clock className=\"w-3 h-3 mr-1\" /> En attente\n        </Badge>;\n      case 'accepted':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-300\">\n          <CheckCircle className=\"w-3 h-3 mr-1\" /> Acceptée\n        </Badge>;\n      case 'rejected':\n        return <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-300\">\n          <XCircle className=\"w-3 h-3 mr-1\" /> Refusée\n        </Badge>;\n      default:\n        return null;\n    }\n  };\n\n  const isModificationRequest = requestType === 'modification';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-orange-50 to-red-50 p-6\">\n      <div className=\"max-w-2xl mx-auto pt-20\">\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center pb-6\">\n            <div className=\"flex items-center justify-center gap-2 mb-4\">\n              <FileText className=\"h-6 w-6 text-orange-600\" />\n              <CardTitle className=\"text-2xl text-gray-800\">\n                {isModificationRequest ? 'Demande de Modification' : 'Demande d\\'Arrêt Anticipé'}\n              </CardTitle>\n            </div>\n            {getStatusBadge(request.status)}\n          </CardHeader>\n\n          <CardContent className=\"space-y-6\">\n            {/* Contract Info */}\n            {contract && contract.contractData && (\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold text-lg mb-2\">Informations du Contrat</h3>\n                <p className=\"text-gray-600\">\n                  <strong>Propriété:</strong> {contract.contractData.propertyTitle}\n                </p>\n                <p className=\"text-gray-600\">\n                  <strong>Adresse:</strong> {contract.contractData.propertyAddress}\n                </p>\n                <p className=\"text-gray-600\">\n                  <strong>Loyer:</strong> {contract.contractData.monthlyRent} DT/mois\n                </p>\n              </div>\n            )}\n\n            {/* Request Details */}\n            <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n              <h3 className=\"font-semibold text-lg mb-2 text-blue-800\">\n                Détails de la Demande\n              </h3>\n              <p className=\"text-blue-700 mb-2\">\n                <strong>Date de demande:</strong> {request?.createdAt ? new Date(request.createdAt).toLocaleDateString('fr-FR') : 'N/A'}\n              </p>\n              {isModificationRequest && request?.requestedChanges && (\n                <p className=\"text-blue-700\">\n                  <strong>Modifications demandées:</strong> {request.requestedChanges}\n                </p>\n              )}\n              {!isModificationRequest && request?.reason && (\n                <p className=\"text-blue-700\">\n                  <strong>Raison:</strong> {request.reason}\n                </p>\n              )}\n            </div>\n\n            {/* Response Section */}\n            {request?.status === 'pending' ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Votre réponse (optionnelle)\n                  </label>\n                  <Textarea\n                    placeholder=\"Ajoutez un commentaire...\"\n                    value={response}\n                    onChange={(e) => setResponse(e.target.value)}\n                    className=\"w-full\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex gap-4 pt-4\">\n                  <Button\n                    onClick={() => responseMutation.mutate('accepted')}\n                    disabled={responseMutation.isPending}\n                    className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  >\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Accepter\n                  </Button>\n                  <Button\n                    onClick={() => responseMutation.mutate('rejected')}\n                    disabled={responseMutation.isPending}\n                    variant=\"outline\"\n                    className=\"flex-1 border-red-300 text-red-700 hover:bg-red-50\"\n                  >\n                    <XCircle className=\"w-4 h-4 mr-2\" />\n                    Refuser\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h3 className=\"font-semibold mb-2\">Réponse donnée</h3>\n                <p className=\"text-gray-600\">\n                  <strong>Statut:</strong> {request?.status === 'accepted' ? 'Acceptée' : 'Refusée'}\n                </p>\n                {request?.tenantResponse && (\n                  <p className=\"text-gray-600 mt-2\">\n                    <strong>Commentaire:</strong> {request.tenantResponse}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <div className=\"pt-4\">\n              <Button\n                onClick={() => navigate('/contracts')}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                Retour aux contrats\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10566},"client/src/components/AutomaticTenantNavigation.tsx":{"content":"import { useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\n\ninterface AutomaticTenantNavigationProps {\n  userId: number;\n  userType: string;\n}\n\nexport function AutomaticTenantNavigation({ userId, userType }: AutomaticTenantNavigationProps) {\n  const [location, navigate] = useLocation();\n  \n  // Only works for tenants\n  const { data: notifications = [] } = useQuery({\n    queryKey: ['/api/notifications'],\n    enabled: userType === 'tenant',\n    refetchInterval: 5000 // Check every 5 seconds\n  });\n\n  useEffect(() => {\n    if (userType !== 'tenant') return;\n    \n    // Look for new contract management request notifications\n    const managementNotifications = notifications.filter((notification: any) => \n      (notification.type === 'contract_modification_request' || \n       notification.type === 'contract_termination_request') &&\n      notification.isRead === false\n    );\n\n    // If there's a new management request notification and we're not already on the response page\n    if (managementNotifications.length > 0 && !location.includes('/tenant-requests/')) {\n      const latestNotification = managementNotifications[0];\n      \n      // Determine request type and navigate to response page\n      const requestType = latestNotification.type === 'contract_modification_request' \n        ? 'modification' \n        : 'termination';\n      \n      // Navigate to the tenant response page\n      navigate(`/tenant-requests/${requestType}/${latestNotification.relatedId}`);\n    }\n  }, [notifications, userType, location, navigate]);\n\n  return null; // This component doesn't render anything\n}","size_bytes":1655},"client/src/components/TenantRequestsDropdown.tsx":{"content":"import React from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator, DropdownMenuLabel } from '@/components/ui/dropdown-menu';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Bell, Clock, CheckCircle, XCircle, FileText } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\ninterface TenantRequestsDropdownProps {\n  userId: number;\n  userType: string;\n}\n\ninterface Request {\n  id: number;\n  type: 'modification' | 'termination';\n  status: 'pending' | 'accepted' | 'rejected';\n  createdAt: string;\n  contractId: number;\n}\n\nexport function TenantRequestsDropdown({ userId, userType }: TenantRequestsDropdownProps) {\n  const [, navigate] = useLocation();\n  \n  console.log(\"TenantRequestsDropdown: userType check:\", userType, \"userId:\", userId);\n  console.log(\"TenantRequestsDropdown: Current localStorage:\", {\n    isAuthenticated: localStorage.getItem(\"isAuthenticated\"),\n    userData: localStorage.getItem(\"userData\"),\n    userType: localStorage.getItem(\"userType\")\n  });\n  \n  // Only show for tenants\n  if (userType !== 'tenant') {\n    console.log(\"TenantRequestsDropdown: Not showing - userType is not tenant\");\n    return null;\n  }\n\n  // Fetch pending requests for this tenant\n  const { data: allRequests = [], isLoading: requestsLoading, error } = useQuery<Request[]>({\n    queryKey: [`/api/tenant-requests/${userId}`],\n    queryFn: async () => {\n      console.log(\"TenantRequestsDropdown: Making API request to\", `/api/tenant-requests/${userId}`);\n      const response = await fetch(`/api/tenant-requests/${userId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        console.error(\"TenantRequestsDropdown: API error\", response.status, response.statusText);\n        throw new Error(`Failed to fetch tenant requests: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log(\"TenantRequestsDropdown: Received data\", data);\n      return data;\n    },\n    enabled: userType === 'tenant' && !!userId,\n    refetchInterval: 5000, // Refetch every 5 seconds for real-time updates\n    retry: 3,\n    staleTime: 0 // Always fetch fresh data\n  });\n  \n  console.log(\"TenantRequestsDropdown query result:\", { \n    allRequests, \n    requestsLoading, \n    error,\n    queryEnabled: userType === 'tenant' && !!userId \n  });\n\n  const pendingCount = allRequests.filter(r => r.status === 'pending').length;\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"w-3 h-3\" />;\n      case 'accepted':\n        return <CheckCircle className=\"w-3 h-3\" />;\n      case 'rejected':\n        return <XCircle className=\"w-3 h-3\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'bg-yellow-50 text-yellow-700 border-yellow-300';\n      case 'accepted':\n        return 'bg-green-50 text-green-700 border-green-300';\n      case 'rejected':\n        return 'bg-red-50 text-red-700 border-red-300';\n      default:\n        return 'bg-gray-50 text-gray-700 border-gray-300';\n    }\n  };\n\n  const formatRequestType = (type: string) => {\n    return type === 'modification' ? 'Modification' : 'Arrêt anticipé';\n  };\n\n  console.log(\"TenantRequestsDropdown rendering for userId:\", userId, \"userType:\", userType);\n  console.log(\"Requests data:\", allRequests);\n  console.log(\"Pending count:\", pendingCount);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"relative\">\n          <FileText className=\"w-4 h-4 mr-2\" />\n          Mes demandes\n          {pendingCount > 0 && (\n            <Badge variant=\"outline\" className=\"ml-2 bg-red-50 text-red-700 border-red-300 text-xs px-1 py-0\">\n              {pendingCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80\">\n        <DropdownMenuLabel className=\"flex items-center gap-2\">\n          <Bell className=\"w-4 h-4\" />\n          Demandes de gestion de contrat\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        \n        {requestsLoading ? (\n          <DropdownMenuItem disabled>\n            Chargement...\n          </DropdownMenuItem>\n        ) : allRequests.length === 0 ? (\n          <DropdownMenuItem disabled>\n            Aucune demande\n          </DropdownMenuItem>\n        ) : (\n          allRequests.map((request) => (\n            <DropdownMenuItem\n              key={`${request.type}-${request.id}`}\n              onClick={() => navigate(`/tenant-requests/${request.type}/${request.id}`)}\n              className=\"flex items-center justify-between p-3 cursor-pointer\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex items-center gap-2\">\n                  {getStatusIcon(request.status)}\n                  <span className=\"font-medium\">\n                    {formatRequestType(request.type)}\n                  </span>\n                </div>\n                <Badge variant=\"outline\" className={`text-xs ${getStatusColor(request.status)}`}>\n                  {request.status === 'pending' ? 'En attente' :\n                   request.status === 'accepted' ? 'Acceptée' : 'Refusée'}\n                </Badge>\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {new Date(request.createdAt).toLocaleDateString('fr-FR')}\n              </div>\n            </DropdownMenuItem>\n          ))\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":5840},"client/src/pages/ContractVersions.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, History, FileText, Calendar, User, Edit3 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\n\ninterface ContractVersion {\n  id: number;\n  contractId: number;\n  version: number;\n  data: any;\n  createdAt: string;\n  modificationReason?: string;\n}\n\ninterface Contract {\n  id: number;\n  status: string;\n  contractData: any;\n  createdAt: string;\n  updatedAt: string;\n  modificationSummary?: string;\n}\n\nexport default function ContractVersions() {\n  const [, navigate] = useLocation();\n  const contractId = parseInt(window.location.pathname.split('/')[2]);\n\n  // Get current user\n  const getCurrentUser = () => {\n    const userData = localStorage.getItem(\"userData\");\n    const userId = localStorage.getItem(\"userId\");\n    const userType = localStorage.getItem(\"userType\");\n    \n    if (userData && userId && userType) {\n      try {\n        const user = JSON.parse(userData);\n        return {\n          id: parseInt(userId),\n          userType: userType,\n          ...user\n        };\n      } catch (error) {\n        console.error(\"Error parsing user data:\", error);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const currentUser = getCurrentUser();\n  const currentUserId = currentUser?.id || 0;\n\n  // Fetch contract details\n  const { data: contract, isLoading: contractLoading } = useQuery({\n    queryKey: ['/api/contracts', contractId],\n    queryFn: async () => {\n      const response = await fetch(`/api/contracts/${contractId}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch contract');\n      }\n      return response.json();\n    },\n    enabled: !!contractId,\n  });\n\n  // Fetch contract versions\n  const { data: versions = [], isLoading: versionsLoading } = useQuery({\n    queryKey: ['/api/contracts', contractId, 'versions'],\n    queryFn: async () => {\n      const response = await fetch(`/api/contracts/${contractId}/versions`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch contract versions');\n      }\n      return response.json();\n    },\n    enabled: !!contractId,\n  });\n\n  const isLoading = contractLoading || versionsLoading;\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/2\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-24 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contract) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Contrat non trouvé</h1>\n          <p className=\"text-muted-foreground mb-4\">\n            Le contrat demandé n'existe pas ou vous n'avez pas l'autorisation de le consulter.\n          </p>\n          <Button onClick={() => navigate(\"/contracts\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Retour aux contrats\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"flex items-center gap-4 mb-8\">\n        <Button \n          variant=\"outline\" \n          onClick={() => navigate(\"/contracts\")}\n          className=\"shrink-0\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Retour\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">\n            Historique des Versions\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Contrat #{contract.id} - {contract.contractData?.propertyTitle || 'Titre non défini'}\n          </p>\n        </div>\n      </div>\n\n      {/* Current Contract Info */}\n      <Card className=\"mb-6 border-blue-200 bg-blue-50/50\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <FileText className=\"h-5 w-5 text-blue-600\" />\n            <CardTitle className=\"text-lg\">Version Actuelle</CardTitle>\n            <Badge variant=\"secondary\">v{versions.length > 0 ? Math.max(...versions.map((v: ContractVersion) => v.version)) : 1}</Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div>\n              <span className=\"font-medium text-muted-foreground\">Statut:</span>\n              <p className=\"capitalize\">{contract.status}</p>\n            </div>\n            <div>\n              <span className=\"font-medium text-muted-foreground\">Dernière modification:</span>\n              <p>{format(new Date(contract.updatedAt), 'dd MMM yyyy HH:mm', { locale: fr })}</p>\n            </div>\n            <div>\n              <span className=\"font-medium text-muted-foreground\">Propriété:</span>\n              <p>{contract.contractData?.propertyAddress || 'Adresse non définie'}</p>\n            </div>\n          </div>\n          {contract.modificationSummary && (\n            <div className=\"mt-4 p-3 bg-blue-100 rounded-lg\">\n              <span className=\"font-medium text-blue-800\">Résumé des modifications:</span>\n              <p className=\"text-blue-700 mt-1\">{contract.modificationSummary}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Versions Timeline */}\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n          <History className=\"h-5 w-5\" />\n          Historique des Modifications\n        </h2>\n\n        {versions.length === 0 ? (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <History className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Aucune modification</h3>\n              <p className=\"text-muted-foreground\">\n                Ce contrat n'a pas encore été modifié depuis sa création.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {versions.map((version: ContractVersion, index: number) => (\n              <Card key={version.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-3 h-3 rounded-full bg-blue-600\"></div>\n                        <CardTitle className=\"text-lg\">Version {version.version}</CardTitle>\n                      </div>\n                      {index === 0 && (\n                        <Badge variant=\"secondary\">Dernière</Badge>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Calendar className=\"h-4 w-4\" />\n                      {format(new Date(version.createdAt), 'dd MMM yyyy HH:mm', { locale: fr })}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {version.modificationReason && (\n                      <div>\n                        <span className=\"font-medium text-muted-foreground flex items-center gap-2\">\n                          <Edit3 className=\"h-4 w-4\" />\n                          Raison de la modification:\n                        </span>\n                        <p className=\"mt-1\">{version.modificationReason}</p>\n                      </div>\n                    )}\n                    <div>\n                      <span className=\"font-medium text-muted-foreground flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        Modifié par:\n                      </span>\n                      <p className=\"mt-1\">\n                        {version.data?.modifiedBy === currentUserId ? 'Vous' : 'Propriétaire'}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Key Changes Preview */}\n                  {version.data && (\n                    <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Données de cette version:</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                        {version.data.monthlyRent && (\n                          <div>\n                            <span className=\"text-muted-foreground\">Loyer mensuel:</span>\n                            <span className=\"ml-2 font-medium\">{version.data.monthlyRent}€</span>\n                          </div>\n                        )}\n                        {version.data.propertyTitle && (\n                          <div>\n                            <span className=\"text-muted-foreground\">Titre:</span>\n                            <span className=\"ml-2 font-medium\">{version.data.propertyTitle}</span>\n                          </div>\n                        )}\n                        {version.data.leaseDuration && (\n                          <div>\n                            <span className=\"text-muted-foreground\">Durée:</span>\n                            <span className=\"ml-2 font-medium\">{version.data.leaseDuration} mois</span>\n                          </div>\n                        )}\n                        {version.data.securityDeposit && (\n                          <div>\n                            <span className=\"text-muted-foreground\">Caution:</span>\n                            <span className=\"ml-2 font-medium\">{version.data.securityDeposit}€</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":10538}}}